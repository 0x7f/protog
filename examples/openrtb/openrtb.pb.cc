// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "openrtb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace google {
namespace openrtb {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
struct BidRequestOneofInstance {
  const ::com::google::openrtb::BidRequest_Site* site_;
  const ::com::google::openrtb::BidRequest_App* app_;
}* BidRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Banner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_BannerAdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_ExpandableDirection_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_CompanionAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Video_CompanionAd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoLinearity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoStartDelay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VASTCompanionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_reflection_ = NULL;
struct BidRequest_Imp_NativeOneofInstance {
  const ::std::string* request_;
  const ::com::google::openrtb::NativeRequest* request_native_;
}* BidRequest_Imp_Native_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_Deal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_AdPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_APIFramework_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Publisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Publisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_VideoQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_ContentContext_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_QAGMediaRating_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Producer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Producer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Geo_LocationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Data_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Data_Segment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Regs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Regs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AuctionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_reflection_ = NULL;
struct BidResponse_SeatBid_BidOneofInstance {
  const ::std::string* adm_;
  const ::com::google::openrtb::NativeResponse* adm_native_;
}* BidResponse_SeatBid_Bid_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_reflection_ = NULL;
struct NativeRequest_AssetOneofInstance {
  const ::com::google::openrtb::NativeRequest_Asset_Title* title_;
  const ::com::google::openrtb::NativeRequest_Asset_Image* img_;
  const ::com::google::openrtb::BidRequest_Imp_Video* video_;
  const ::com::google::openrtb::NativeRequest_Asset_Data* data_;
}* NativeRequest_Asset_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Image_ImageAssetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Data_DataAssetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_LayoutId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_AdUnitId_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_reflection_ = NULL;
struct NativeResponse_AssetOneofInstance {
  const ::com::google::openrtb::NativeResponse_Asset_Title* title_;
  const ::com::google::openrtb::NativeResponse_Asset_Image* img_;
  const ::com::google::openrtb::NativeResponse_Asset_Video* video_;
  const ::com::google::openrtb::NativeResponse_Asset_Data* data_;
}* NativeResponse_Asset_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_openrtb_2eproto() {
  protobuf_AddDesc_openrtb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "openrtb.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_default_oneof_instance_, site_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_default_oneof_instance_, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, regs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, allimps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, badv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, distributionchannel_oneof_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _extensions_),
      BidRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Imp_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Imp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, displaymanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, displaymanagerver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, instl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, iframebuster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, pmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, native_),
  };
  BidRequest_Imp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_descriptor_,
      BidRequest_Imp::default_instance_,
      BidRequest_Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp));
  BidRequest_Imp_Banner_descriptor_ = BidRequest_Imp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Banner_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, wmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, hmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, topframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, expdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, api_),
  };
  BidRequest_Imp_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Banner_descriptor_,
      BidRequest_Imp_Banner::default_instance_,
      BidRequest_Imp_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Banner));
  BidRequest_Imp_Banner_BannerAdType_descriptor_ = BidRequest_Imp_Banner_descriptor_->enum_type(0);
  BidRequest_Imp_Banner_ExpandableDirection_descriptor_ = BidRequest_Imp_Banner_descriptor_->enum_type(1);
  BidRequest_Imp_Video_descriptor_ = BidRequest_Imp_descriptor_->nested_type(1);
  static const int BidRequest_Imp_Video_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, linearity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, minduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, protocols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, startdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxextended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, minbitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxbitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, boxingallowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, playbackmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, delivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companionad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companionad_21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companiontype_),
  };
  BidRequest_Imp_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Video_descriptor_,
      BidRequest_Imp_Video::default_instance_,
      BidRequest_Imp_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Video));
  BidRequest_Imp_Video_CompanionAd_descriptor_ = BidRequest_Imp_Video_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Video_CompanionAd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, banner_),
  };
  BidRequest_Imp_Video_CompanionAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Video_CompanionAd_descriptor_,
      BidRequest_Imp_Video_CompanionAd::default_instance_,
      BidRequest_Imp_Video_CompanionAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Video_CompanionAd));
  BidRequest_Imp_Video_VideoLinearity_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(0);
  BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(1);
  BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(2);
  BidRequest_Imp_Video_VideoStartDelay_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(3);
  BidRequest_Imp_Video_VASTCompanionType_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(4);
  BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(5);
  BidRequest_Imp_Native_descriptor_ = BidRequest_Imp_descriptor_->nested_type(2);
  static const int BidRequest_Imp_Native_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_Imp_Native_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_Imp_Native_default_oneof_instance_, request_native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, request_oneof_),
  };
  BidRequest_Imp_Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Native_descriptor_,
      BidRequest_Imp_Native::default_instance_,
      BidRequest_Imp_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _extensions_),
      BidRequest_Imp_Native_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Native));
  BidRequest_Imp_Pmp_descriptor_ = BidRequest_Imp_descriptor_->nested_type(3);
  static const int BidRequest_Imp_Pmp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, private_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, deals_),
  };
  BidRequest_Imp_Pmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Pmp_descriptor_,
      BidRequest_Imp_Pmp::default_instance_,
      BidRequest_Imp_Pmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Pmp));
  BidRequest_Imp_Pmp_Deal_descriptor_ = BidRequest_Imp_Pmp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Pmp_Deal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, wadomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, at_),
  };
  BidRequest_Imp_Pmp_Deal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Pmp_Deal_descriptor_,
      BidRequest_Imp_Pmp_Deal::default_instance_,
      BidRequest_Imp_Pmp_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Pmp_Deal));
  BidRequest_Imp_AdPosition_descriptor_ = BidRequest_Imp_descriptor_->enum_type(0);
  BidRequest_Imp_APIFramework_descriptor_ = BidRequest_Imp_descriptor_->enum_type(1);
  BidRequest_Site_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Site_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, privacypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, mobile_),
  };
  BidRequest_Site_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Site_descriptor_,
      BidRequest_Site::default_instance_,
      BidRequest_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Site));
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_App_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, privacypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, paid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, storeurl_),
  };
  BidRequest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_App));
  BidRequest_Publisher_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Publisher_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, domain_),
  };
  BidRequest_Publisher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Publisher_descriptor_,
      BidRequest_Publisher::default_instance_,
      BidRequest_Publisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Publisher));
  BidRequest_Content_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Content_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, videoquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, contentrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, userrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, context_22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, livestream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, sourcerelationship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, producer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, qagmediarating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, embeddable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, language_),
  };
  BidRequest_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Content_descriptor_,
      BidRequest_Content::default_instance_,
      BidRequest_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Content));
  BidRequest_Content_VideoQuality_descriptor_ = BidRequest_Content_descriptor_->enum_type(0);
  BidRequest_Content_ContentContext_descriptor_ = BidRequest_Content_descriptor_->enum_type(1);
  BidRequest_Content_QAGMediaRating_descriptor_ = BidRequest_Content_descriptor_->enum_type(2);
  BidRequest_Producer_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Producer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, domain_),
  };
  BidRequest_Producer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Producer_descriptor_,
      BidRequest_Producer::default_instance_,
      BidRequest_Producer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Producer));
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_Device_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, didsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, didmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpidsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpidmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, hwv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ppi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, pxratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, flashver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ifa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, macsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, macmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, lmt_),
  };
  BidRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device));
  BidRequest_Device_DeviceType_descriptor_ = BidRequest_Device_descriptor_->enum_type(0);
  BidRequest_Device_ConnectionType_descriptor_ = BidRequest_Device_descriptor_->enum_type(1);
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_Geo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, regionfips104_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, metro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, utcoffset_),
  };
  BidRequest_Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo));
  BidRequest_Geo_LocationType_descriptor_ = BidRequest_Geo_descriptor_->enum_type(0);
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(8);
  static const int BidRequest_User_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, buyeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, data_),
  };
  BidRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User));
  BidRequest_User_Gender_descriptor_ = BidRequest_User_descriptor_->enum_type(0);
  BidRequest_Data_descriptor_ = BidRequest_descriptor_->nested_type(9);
  static const int BidRequest_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, segment_),
  };
  BidRequest_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Data_descriptor_,
      BidRequest_Data::default_instance_,
      BidRequest_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Data));
  BidRequest_Data_Segment_descriptor_ = BidRequest_Data_descriptor_->nested_type(0);
  static const int BidRequest_Data_Segment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, value_),
  };
  BidRequest_Data_Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Data_Segment_descriptor_,
      BidRequest_Data_Segment::default_instance_,
      BidRequest_Data_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Data_Segment));
  BidRequest_Regs_descriptor_ = BidRequest_descriptor_->nested_type(10);
  static const int BidRequest_Regs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, coppa_),
  };
  BidRequest_Regs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Regs_descriptor_,
      BidRequest_Regs::default_instance_,
      BidRequest_Regs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Regs));
  BidRequest_AuctionType_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, nbr_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, group_),
  };
  BidResponse_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid));
  BidResponse_SeatBid_Bid_descriptor_ = BidResponse_SeatBid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, nurl_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidResponse_SeatBid_Bid_default_oneof_instance_, adm_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidResponse_SeatBid_Bid_default_oneof_instance_, adm_native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, iurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adm_oneof_),
  };
  BidResponse_SeatBid_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_Bid_descriptor_,
      BidResponse_SeatBid_Bid::default_instance_,
      BidResponse_SeatBid_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _extensions_),
      BidResponse_SeatBid_Bid_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid_Bid));
  BidResponse_NoBidReason_descriptor_ = BidResponse_descriptor_->enum_type(0);
  NativeRequest_descriptor_ = file->message_type(2);
  static const int NativeRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, adunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, plcmtcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, assets_),
  };
  NativeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeRequest_descriptor_,
      NativeRequest::default_instance_,
      NativeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeRequest));
  NativeRequest_Asset_descriptor_ = NativeRequest_descriptor_->nested_type(0);
  static const int NativeRequest_Asset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, required_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, title_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, img_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, video_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, asset_oneof_),
  };
  NativeRequest_Asset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeRequest_Asset_descriptor_,
      NativeRequest_Asset::default_instance_,
      NativeRequest_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _extensions_),
      NativeRequest_Asset_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeRequest_Asset));
  NativeRequest_Asset_Title_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(0);
  static const int NativeRequest_Asset_Title_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, len_),
  };
  NativeRequest_Asset_Title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeRequest_Asset_Title_descriptor_,
      NativeRequest_Asset_Title::default_instance_,
      NativeRequest_Asset_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeRequest_Asset_Title));
  NativeRequest_Asset_Image_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(1);
  static const int NativeRequest_Asset_Image_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, mimes_),
  };
  NativeRequest_Asset_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeRequest_Asset_Image_descriptor_,
      NativeRequest_Asset_Image::default_instance_,
      NativeRequest_Asset_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeRequest_Asset_Image));
  NativeRequest_Asset_Image_ImageAssetType_descriptor_ = NativeRequest_Asset_Image_descriptor_->enum_type(0);
  NativeRequest_Asset_Data_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(2);
  static const int NativeRequest_Asset_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, len_),
  };
  NativeRequest_Asset_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeRequest_Asset_Data_descriptor_,
      NativeRequest_Asset_Data::default_instance_,
      NativeRequest_Asset_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeRequest_Asset_Data));
  NativeRequest_Asset_Data_DataAssetType_descriptor_ = NativeRequest_Asset_Data_descriptor_->enum_type(0);
  NativeRequest_LayoutId_descriptor_ = NativeRequest_descriptor_->enum_type(0);
  NativeRequest_AdUnitId_descriptor_ = NativeRequest_descriptor_->enum_type(1);
  NativeResponse_descriptor_ = file->message_type(3);
  static const int NativeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, imptrackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, jstracker_),
  };
  NativeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_descriptor_,
      NativeResponse::default_instance_,
      NativeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse));
  NativeResponse_Link_descriptor_ = NativeResponse_descriptor_->nested_type(0);
  static const int NativeResponse_Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, clicktrackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, fallback_),
  };
  NativeResponse_Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Link_descriptor_,
      NativeResponse_Link::default_instance_,
      NativeResponse_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Link));
  NativeResponse_Asset_descriptor_ = NativeResponse_descriptor_->nested_type(1);
  static const int NativeResponse_Asset_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, required_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, title_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, img_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, video_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, asset_oneof_),
  };
  NativeResponse_Asset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Asset_descriptor_,
      NativeResponse_Asset::default_instance_,
      NativeResponse_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _extensions_),
      NativeResponse_Asset_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Asset));
  NativeResponse_Asset_Title_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(0);
  static const int NativeResponse_Asset_Title_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, text_),
  };
  NativeResponse_Asset_Title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Asset_Title_descriptor_,
      NativeResponse_Asset_Title::default_instance_,
      NativeResponse_Asset_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Asset_Title));
  NativeResponse_Asset_Image_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(1);
  static const int NativeResponse_Asset_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, h_),
  };
  NativeResponse_Asset_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Asset_Image_descriptor_,
      NativeResponse_Asset_Image::default_instance_,
      NativeResponse_Asset_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Asset_Image));
  NativeResponse_Asset_Data_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(2);
  static const int NativeResponse_Asset_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, value_),
  };
  NativeResponse_Asset_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Asset_Data_descriptor_,
      NativeResponse_Asset_Data::default_instance_,
      NativeResponse_Asset_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Asset_Data));
  NativeResponse_Asset_Video_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(3);
  static const int NativeResponse_Asset_Video_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, vasttag_),
  };
  NativeResponse_Asset_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeResponse_Asset_Video_descriptor_,
      NativeResponse_Asset_Video::default_instance_,
      NativeResponse_Asset_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeResponse_Asset_Video));
  ContentCategory_descriptor_ = file->enum_type(0);
  CreativeAttribute_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_openrtb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_descriptor_, &BidRequest_Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Banner_descriptor_, &BidRequest_Imp_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Video_descriptor_, &BidRequest_Imp_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Video_CompanionAd_descriptor_, &BidRequest_Imp_Video_CompanionAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Native_descriptor_, &BidRequest_Imp_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Pmp_descriptor_, &BidRequest_Imp_Pmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Pmp_Deal_descriptor_, &BidRequest_Imp_Pmp_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Site_descriptor_, &BidRequest_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Publisher_descriptor_, &BidRequest_Publisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Content_descriptor_, &BidRequest_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Producer_descriptor_, &BidRequest_Producer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Data_descriptor_, &BidRequest_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Data_Segment_descriptor_, &BidRequest_Data_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Regs_descriptor_, &BidRequest_Regs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_Bid_descriptor_, &BidResponse_SeatBid_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeRequest_descriptor_, &NativeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeRequest_Asset_descriptor_, &NativeRequest_Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeRequest_Asset_Title_descriptor_, &NativeRequest_Asset_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeRequest_Asset_Image_descriptor_, &NativeRequest_Asset_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeRequest_Asset_Data_descriptor_, &NativeRequest_Asset_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_descriptor_, &NativeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Link_descriptor_, &NativeResponse_Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Asset_descriptor_, &NativeResponse_Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Asset_Title_descriptor_, &NativeResponse_Asset_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Asset_Image_descriptor_, &NativeResponse_Asset_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Asset_Data_descriptor_, &NativeResponse_Asset_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeResponse_Asset_Video_descriptor_, &NativeResponse_Asset_Video::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_openrtb_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_default_oneof_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Imp::default_instance_;
  delete BidRequest_Imp_reflection_;
  delete BidRequest_Imp::_default_bidfloorcur_;
  delete BidRequest_Imp_Banner::default_instance_;
  delete BidRequest_Imp_Banner_reflection_;
  delete BidRequest_Imp_Video::default_instance_;
  delete BidRequest_Imp_Video_reflection_;
  delete BidRequest_Imp_Video_CompanionAd::default_instance_;
  delete BidRequest_Imp_Video_CompanionAd_reflection_;
  delete BidRequest_Imp_Native::default_instance_;
  delete BidRequest_Imp_Native_default_oneof_instance_;
  delete BidRequest_Imp_Native_reflection_;
  delete BidRequest_Imp_Pmp::default_instance_;
  delete BidRequest_Imp_Pmp_reflection_;
  delete BidRequest_Imp_Pmp_Deal::default_instance_;
  delete BidRequest_Imp_Pmp_Deal_reflection_;
  delete BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_;
  delete BidRequest_Site::default_instance_;
  delete BidRequest_Site_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidRequest_Publisher::default_instance_;
  delete BidRequest_Publisher_reflection_;
  delete BidRequest_Content::default_instance_;
  delete BidRequest_Content_reflection_;
  delete BidRequest_Producer::default_instance_;
  delete BidRequest_Producer_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidRequest_Data::default_instance_;
  delete BidRequest_Data_reflection_;
  delete BidRequest_Data_Segment::default_instance_;
  delete BidRequest_Data_Segment_reflection_;
  delete BidRequest_Regs::default_instance_;
  delete BidRequest_Regs_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
  delete BidResponse_SeatBid_Bid::default_instance_;
  delete BidResponse_SeatBid_Bid_default_oneof_instance_;
  delete BidResponse_SeatBid_Bid_reflection_;
  delete NativeRequest::default_instance_;
  delete NativeRequest_reflection_;
  delete NativeRequest_Asset::default_instance_;
  delete NativeRequest_Asset_default_oneof_instance_;
  delete NativeRequest_Asset_reflection_;
  delete NativeRequest_Asset_Title::default_instance_;
  delete NativeRequest_Asset_Title_reflection_;
  delete NativeRequest_Asset_Image::default_instance_;
  delete NativeRequest_Asset_Image_reflection_;
  delete NativeRequest_Asset_Data::default_instance_;
  delete NativeRequest_Asset_Data_reflection_;
  delete NativeResponse::default_instance_;
  delete NativeResponse_reflection_;
  delete NativeResponse_Link::default_instance_;
  delete NativeResponse_Link_reflection_;
  delete NativeResponse_Asset::default_instance_;
  delete NativeResponse_Asset_default_oneof_instance_;
  delete NativeResponse_Asset_reflection_;
  delete NativeResponse_Asset_Title::default_instance_;
  delete NativeResponse_Asset_Title_reflection_;
  delete NativeResponse_Asset_Image::default_instance_;
  delete NativeResponse_Asset_Image_reflection_;
  delete NativeResponse_Asset_Data::default_instance_;
  delete NativeResponse_Asset_Data_reflection_;
  delete NativeResponse_Asset_Video::default_instance_;
  delete NativeResponse_Asset_Video_reflection_;
}

void protobuf_AddDesc_openrtb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ropenrtb.proto\022\022com.google.openrtb\"\2659\n\n"
    "BidRequest\022\n\n\002id\030\001 \002(\t\022/\n\003imp\030\002 \003(\0132\".co"
    "m.google.openrtb.BidRequest.Imp\0223\n\004site\030"
    "\003 \001(\0132#.com.google.openrtb.BidRequest.Si"
    "teH\000\0221\n\003app\030\004 \001(\0132\".com.google.openrtb.B"
    "idRequest.AppH\000\0225\n\006device\030\005 \001(\0132%.com.go"
    "ogle.openrtb.BidRequest.Device\0221\n\004regs\030\016"
    " \001(\0132#.com.google.openrtb.BidRequest.Reg"
    "s\0221\n\004user\030\006 \001(\0132#.com.google.openrtb.Bid"
    "Request.User\022D\n\002at\030\007 \001(\0162*.com.google.op"
    "enrtb.BidRequest.AuctionType:\014SECOND_PRI"
    "CE\022\014\n\004tmax\030\010 \001(\005\022\r\n\005wseat\030\t \003(\t\022\026\n\007allim"
    "ps\030\n \001(\010:\005false\022\013\n\003cur\030\013 \003(\t\022\014\n\004bcat\030\014 \003"
    "(\t\022\014\n\004badv\030\r \003(\t\022\023\n\004test\030\017 \001(\010:\005false\032\263\033"
    "\n\003Imp\022\n\n\002id\030\001 \002(\t\0229\n\006banner\030\002 \001(\0132).com."
    "google.openrtb.BidRequest.Imp.Banner\0227\n\005"
    "video\030\003 \001(\0132(.com.google.openrtb.BidRequ"
    "est.Imp.Video\022\026\n\016displaymanager\030\004 \001(\t\022\031\n"
    "\021displaymanagerver\030\005 \001(\t\022\r\n\005instl\030\006 \001(\010\022"
    "\r\n\005tagid\030\007 \001(\t\022\023\n\010bidfloor\030\010 \001(\001:\0010\022\030\n\013b"
    "idfloorcur\030\t \001(\t:\003USD\022\016\n\006secure\030\014 \001(\010\022\024\n"
    "\014iframebuster\030\n \003(\t\0223\n\003pmp\030\013 \001(\0132&.com.g"
    "oogle.openrtb.BidRequest.Imp.Pmp\0229\n\006nati"
    "ve\030\r \001(\0132).com.google.openrtb.BidRequest"
    ".Imp.Native\032\220\005\n\006Banner\022\t\n\001w\030\001 \001(\005\022\t\n\001h\030\002"
    " \001(\005\022\014\n\004wmax\030\013 \001(\005\022\014\n\004hmax\030\014 \001(\005\022\014\n\004wmin"
    "\030\r \001(\005\022\014\n\004hmin\030\016 \001(\005\022\n\n\002id\030\003 \001(\t\022:\n\003pos\030"
    "\004 \001(\0162-.com.google.openrtb.BidRequest.Im"
    "p.AdPosition\022I\n\005btype\030\005 \003(\01626.com.google"
    ".openrtb.BidRequest.Imp.Banner.BannerAdT"
    "ypeB\002\020\001\0228\n\005battr\030\006 \003(\0162%.com.google.open"
    "rtb.CreativeAttributeB\002\020\001\022\r\n\005mimes\030\007 \003(\t"
    "\022\020\n\010topframe\030\010 \001(\010\022Q\n\006expdir\030\t \003(\0162=.com"
    ".google.openrtb.BidRequest.Imp.Banner.Ex"
    "pandableDirectionB\002\020\001\022@\n\003api\030\n \003(\0162/.com"
    ".google.openrtb.BidRequest.Imp.APIFramew"
    "orkB\002\020\001\"U\n\014BannerAdType\022\021\n\rXHTML_TEXT_AD"
    "\020\001\022\023\n\017XHTML_BANNER_AD\020\002\022\021\n\rJAVASCRIPT_AD"
    "\020\003\022\n\n\006IFRAME\020\004\"W\n\023ExpandableDirection\022\010\n"
    "\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\006\n\002UP\020\003\022\010\n\004DOWN\020\004\022\031\n\025"
    "EXPANDABLE_FULLSCREEN\020\005*\005\010d\020\220N\032\375\014\n\005Video"
    "\022\r\n\005mimes\030\001 \003(\t\022J\n\tlinearity\030\002 \001(\01627.com"
    ".google.openrtb.BidRequest.Imp.Video.Vid"
    "eoLinearity\022\023\n\013minduration\030\003 \001(\005\022\023\n\013maxd"
    "uration\030\004 \001(\005\022W\n\010protocol\030\005 \001(\0162A.com.go"
    "ogle.openrtb.BidRequest.Imp.Video.VideoB"
    "idResponseProtocolB\002\030\001\022X\n\tprotocols\030\025 \003("
    "\0162A.com.google.openrtb.BidRequest.Imp.Vi"
    "deo.VideoBidResponseProtocolB\002\020\001\022\t\n\001w\030\006 "
    "\001(\005\022\t\n\001h\030\007 \001(\005\022\022\n\nstartdelay\030\010 \001(\005\022\023\n\010se"
    "quence\030\t \001(\005:\0011\0228\n\005battr\030\n \003(\0162%.com.goo"
    "gle.openrtb.CreativeAttributeB\002\020\001\022\023\n\013max"
    "extended\030\013 \001(\005\022\022\n\nminbitrate\030\014 \001(\005\022\022\n\nma"
    "xbitrate\030\r \001(\005\022\033\n\rboxingallowed\030\016 \001(\010:\004t"
    "rue\022X\n\016playbackmethod\030\017 \003(\0162<.com.google"
    ".openrtb.BidRequest.Imp.Video.VideoPlayb"
    "ackMethodB\002\020\001\022T\n\010delivery\030\020 \003(\0162>.com.go"
    "ogle.openrtb.BidRequest.Imp.Video.Conten"
    "tDeliveryMethodB\002\020\001\022:\n\003pos\030\021 \001(\0162-.com.g"
    "oogle.openrtb.BidRequest.Imp.AdPosition\022"
    ">\n\013companionad\030\022 \003(\0132).com.google.openrt"
    "b.BidRequest.Imp.Banner\022P\n\016companionad_2"
    "1\030\026 \001(\01324.com.google.openrtb.BidRequest."
    "Imp.Video.CompanionAdB\002\030\001\022@\n\003api\030\023 \003(\0162/"
    ".com.google.openrtb.BidRequest.Imp.APIFr"
    "ameworkB\002\020\001\022U\n\rcompaniontype\030\024 \003(\0162:.com"
    ".google.openrtb.BidRequest.Imp.Video.VAS"
    "TCompanionTypeB\002\020\001\032O\n\013CompanionAd\0229\n\006ban"
    "ner\030\001 \003(\0132).com.google.openrtb.BidReques"
    "t.Imp.Banner*\005\010d\020\220N\",\n\016VideoLinearity\022\n\n"
    "\006LINEAR\020\001\022\016\n\nNON_LINEAR\020\002\"\206\001\n\030VideoBidRe"
    "sponseProtocol\022\014\n\010VAST_1_0\020\001\022\014\n\010VAST_2_0"
    "\020\002\022\014\n\010VAST_3_0\020\003\022\024\n\020VAST_1_0_WRAPPER\020\004\022\024"
    "\n\020VAST_2_0_WRAPPER\020\005\022\024\n\020VAST_3_0_WRAPPER"
    "\020\006\"i\n\023VideoPlaybackMethod\022\026\n\022AUTO_PLAY_S"
    "OUND_ON\020\001\022\027\n\023AUTO_PLAY_SOUND_OFF\020\002\022\021\n\rCL"
    "ICK_TO_PLAY\020\003\022\016\n\nMOUSE_OVER\020\004\"^\n\017VideoSt"
    "artDelay\022\014\n\010PRE_ROLL\020\000\022\035\n\020GENERIC_MID_RO"
    "LL\020\377\377\377\377\377\377\377\377\377\001\022\036\n\021GENERIC_POST_ROLL\020\376\377\377\377\377"
    "\377\377\377\377\001\"\?\n\021VASTCompanionType\022\n\n\006STATIC\020\001\022\010"
    "\n\004HTML\020\002\022\024\n\020COMPANION_IFRAME\020\003\"7\n\025Conten"
    "tDeliveryMethod\022\r\n\tSTREAMING\020\001\022\017\n\013PROGRE"
    "SSIVE\020\002*\005\010d\020\220N\032\371\001\n\006Native\022\021\n\007request\030\001 \001"
    "(\tH\000\022;\n\016request_native\0302 \001(\0132!.com.googl"
    "e.openrtb.NativeRequestH\000\022\013\n\003ver\030\002 \001(\t\022@"
    "\n\003api\030\003 \003(\0162/.com.google.openrtb.BidRequ"
    "est.Imp.APIFrameworkB\002\020\001\0228\n\005battr\030\004 \003(\0162"
    "%.com.google.openrtb.CreativeAttributeB\002"
    "\020\001*\005\010d\020\220NB\017\n\rrequest_oneof\032\205\002\n\003Pmp\022\027\n\017pr"
    "ivate_auction\030\001 \001(\010\022:\n\005deals\030\002 \003(\0132+.com"
    ".google.openrtb.BidRequest.Imp.Pmp.Deal\032"
    "\241\001\n\004Deal\022\n\n\002id\030\001 \001(\t\022\023\n\010bidfloor\030\002 \001(\001:\001"
    "0\022\030\n\013bidfloorcur\030\003 \001(\t:\003USD\022\r\n\005wseat\030\004 \003"
    "(\t\022\020\n\010wadomain\030\005 \003(\t\0226\n\002at\030\006 \001(\0162*.com.g"
    "oogle.openrtb.BidRequest.AuctionType*\005\010d"
    "\020\220N*\005\010d\020\220N\"\250\001\n\nAdPosition\022\013\n\007UNKNOWN\020\000\022\022"
    "\n\016ABOVE_THE_FOLD\020\001\022$\n DEPRECATED_LIKELY_"
    "BELOW_THE_FOLD\020\002\022\022\n\016BELOW_THE_FOLD\020\003\022\n\n\006"
    "HEADER\020\004\022\n\n\006FOOTER\020\005\022\013\n\007SIDEBAR\020\006\022\032\n\026AD_"
    "POSITION_FULLSCREEN\020\007\"M\n\014APIFramework\022\013\n"
    "\007VPAID_1\020\001\022\013\n\007VPAID_2\020\002\022\013\n\007MRAID_1\020\003\022\t\n\005"
    "ORMMA\020\004\022\013\n\007MRAID_2\020\005*\005\010d\020\220N\032\303\002\n\004Site\022\n\n\002"
    "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\013"
    "\n\003cat\030\004 \003(\t\022\022\n\nsectioncat\030\005 \003(\t\022\017\n\007pagec"
    "at\030\006 \003(\t\022\014\n\004page\030\007 \001(\t\022\025\n\rprivacypolicy\030"
    "\010 \001(\010\022\013\n\003ref\030\t \001(\t\022\016\n\006search\030\n \001(\t\022;\n\tpu"
    "blisher\030\013 \001(\0132(.com.google.openrtb.BidRe"
    "quest.Publisher\0227\n\007content\030\014 \001(\0132&.com.g"
    "oogle.openrtb.BidRequest.Content\022\020\n\010keyw"
    "ords\030\r \001(\t\022\016\n\006mobile\030\017 \001(\010*\005\010d\020\220N\032\304\002\n\003Ap"
    "p\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 "
    "\001(\t\022\013\n\003cat\030\004 \003(\t\022\022\n\nsectioncat\030\005 \003(\t\022\017\n\007"
    "pagecat\030\006 \003(\t\022\013\n\003ver\030\007 \001(\t\022\016\n\006bundle\030\010 \001"
    "(\t\022\025\n\rprivacypolicy\030\t \001(\010\022\014\n\004paid\030\n \001(\010\022"
    ";\n\tpublisher\030\013 \001(\0132(.com.google.openrtb."
    "BidRequest.Publisher\0227\n\007content\030\014 \001(\0132&."
    "com.google.openrtb.BidRequest.Content\022\020\n"
    "\010keywords\030\r \001(\t\022\020\n\010storeurl\030\020 \001(\t*\005\010d\020\220N"
    "\032I\n\tPublisher\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
    "\013\n\003cat\030\003 \003(\t\022\016\n\006domain\030\004 \001(\t*\005\010d\020\220N\032\324\006\n\007"
    "Content\022\n\n\002id\030\001 \001(\t\022\017\n\007episode\030\002 \001(\005\022\r\n\005"
    "title\030\003 \001(\t\022\016\n\006series\030\004 \001(\t\022\016\n\006season\030\005 "
    "\001(\t\022\013\n\003url\030\006 \001(\t\022\013\n\003cat\030\007 \003(\t\022I\n\014videoqu"
    "ality\030\010 \001(\01623.com.google.openrtb.BidRequ"
    "est.Content.VideoQuality\022\020\n\010keywords\030\t \001"
    "(\t\022\025\n\rcontentrating\030\n \001(\t\022\022\n\nuserrating\030"
    "\013 \001(\t\022F\n\007context\030\024 \001(\01625.com.google.open"
    "rtb.BidRequest.Content.ContentContext\022\022\n"
    "\ncontext_22\030\014 \001(\t\022\022\n\nlivestream\030\r \001(\010\022\032\n"
    "\022sourcerelationship\030\016 \001(\010\0229\n\010producer\030\017 "
    "\001(\0132\'.com.google.openrtb.BidRequest.Prod"
    "ucer\022\013\n\003len\030\020 \001(\005\022M\n\016qagmediarating\030\021 \001("
    "\01625.com.google.openrtb.BidRequest.Conten"
    "t.QAGMediaRating\022\022\n\nembeddable\030\022 \001(\010\022\020\n\010"
    "language\030\023 \001(\t\"W\n\014VideoQuality\022\023\n\017QUALIT"
    "Y_UNKNOWN\020\000\022\020\n\014PROFESSIONAL\020\001\022\014\n\010PROSUME"
    "R\020\002\022\022\n\016USER_GENERATED\020\003\"k\n\016ContentContex"
    "t\022\t\n\005VIDEO\020\001\022\010\n\004GAME\020\002\022\t\n\005MUSIC\020\003\022\017\n\013APP"
    "LICATION\020\004\022\010\n\004TEXT\020\005\022\t\n\005OTHER\020\006\022\023\n\017CONTE"
    "XT_UNKNOWN\020\007\"E\n\016QAGMediaRating\022\021\n\rALL_AU"
    "DIENCES\020\001\022\024\n\020EVERYONE_OVER_12\020\002\022\n\n\006MATUR"
    "E\020\003*\005\010d\020\220N\032H\n\010Producer\022\n\n\002id\030\001 \001(\t\022\014\n\004na"
    "me\030\002 \001(\t\022\013\n\003cat\030\003 \003(\t\022\016\n\006domain\030\004 \001(\t*\005\010"
    "d\020\220N\032\272\006\n\006Device\022\013\n\003dnt\030\001 \001(\010\022\n\n\002ua\030\002 \001(\t"
    "\022\n\n\002ip\030\003 \001(\t\022/\n\003geo\030\004 \001(\0132\".com.google.o"
    "penrtb.BidRequest.Geo\022\017\n\007didsha1\030\005 \001(\t\022\016"
    "\n\006didmd5\030\006 \001(\t\022\020\n\010dpidsha1\030\007 \001(\t\022\017\n\007dpid"
    "md5\030\010 \001(\t\022\014\n\004ipv6\030\t \001(\t\022\017\n\007carrier\030\n \001(\t"
    "\022\020\n\010language\030\013 \001(\t\022\014\n\004make\030\014 \001(\t\022\r\n\005mode"
    "l\030\r \001(\t\022\n\n\002os\030\016 \001(\t\022\013\n\003osv\030\017 \001(\t\022\013\n\003hwv\030"
    "\030 \001(\t\022\t\n\001w\030\031 \001(\005\022\t\n\001h\030\032 \001(\005\022\013\n\003ppi\030\033 \001(\005"
    "\022\017\n\007pxratio\030\034 \001(\001\022\n\n\002js\030\020 \001(\010\022L\n\016connect"
    "iontype\030\021 \001(\01624.com.google.openrtb.BidRe"
    "quest.Device.ConnectionType\022D\n\ndevicetyp"
    "e\030\022 \001(\01620.com.google.openrtb.BidRequest."
    "Device.DeviceType\022\020\n\010flashver\030\023 \001(\t\022\013\n\003i"
    "fa\030\024 \001(\t\022\017\n\007macsha1\030\025 \001(\t\022\016\n\006macmd5\030\026 \001("
    "\t\022\013\n\003lmt\030\027 \001(\010\"\177\n\nDeviceType\022\n\n\006MOBILE\020\001"
    "\022\025\n\021PERSONAL_COMPUTER\020\002\022\020\n\014CONNECTED_TV\020"
    "\003\022\t\n\005PHONE\020\004\022\n\n\006TABLET\020\005\022\024\n\020CONNECTED_DE"
    "VICE\020\006\022\017\n\013SET_TOP_BOX\020\007\"y\n\016ConnectionTyp"
    "e\022\026\n\022CONNECTION_UNKNOWN\020\000\022\014\n\010ETHERNET\020\001\022"
    "\010\n\004WIFI\020\002\022\020\n\014CELL_UNKNOWN\020\003\022\013\n\007CELL_2G\020\004"
    "\022\013\n\007CELL_3G\020\005\022\013\n\007CELL_4G\020\006*\005\010d\020\220N\032\227\002\n\003Ge"
    "o\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022\017\n\007country\030\003"
    " \001(\t\022\016\n\006region\030\004 \001(\t\022\025\n\rregionfips104\030\005 "
    "\001(\t\022\r\n\005metro\030\006 \001(\t\022\014\n\004city\030\007 \001(\t\022\013\n\003zip\030"
    "\010 \001(\t\022=\n\004type\030\t \001(\0162/.com.google.openrtb"
    ".BidRequest.Geo.LocationType\022\021\n\tutcoffse"
    "t\030\n \001(\005\";\n\014LocationType\022\020\n\014GPS_LOCATION\020"
    "\001\022\006\n\002IP\020\002\022\021\n\rUSER_PROVIDED\020\003*\005\010d\020\220N\032\375\001\n\004"
    "User\022\n\n\002id\030\001 \001(\t\022\020\n\010buyeruid\030\002 \001(\t\022\013\n\003yo"
    "b\030\003 \001(\005\022\016\n\006gender\030\004 \001(\t\022\020\n\010keywords\030\005 \001("
    "\t\022\022\n\ncustomdata\030\006 \001(\t\022/\n\003geo\030\007 \001(\0132\".com"
    ".google.openrtb.BidRequest.Geo\0221\n\004data\030\010"
    " \003(\0132#.com.google.openrtb.BidRequest.Dat"
    "a\")\n\006Gender\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002\022\t\n\005OTH"
    "ER\020\003*\005\010d\020\220N\032\240\001\n\004Data\022\n\n\002id\030\001 \001(\t\022\014\n\004name"
    "\030\002 \001(\t\022<\n\007segment\030\003 \003(\0132+.com.google.ope"
    "nrtb.BidRequest.Data.Segment\0329\n\007Segment\022"
    "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t"
    "*\005\010d\020\220N*\005\010d\020\220N\032\034\n\004Regs\022\r\n\005coppa\030\001 \001(\010*\005\010"
    "d\020\220N\"A\n\013AuctionType\022\017\n\013FIRST_PRICE\020\001\022\020\n\014"
    "SECOND_PRICE\020\002\022\017\n\013FIXED_PRICE\020\003*\005\010d\020\220NB\033"
    "\n\031distributionchannel_oneof\"\363\006\n\013BidRespo"
    "nse\022\n\n\002id\030\001 \002(\t\0228\n\007seatbid\030\002 \003(\0132\'.com.g"
    "oogle.openrtb.BidResponse.SeatBid\022\r\n\005bid"
    "id\030\003 \001(\t\022\013\n\003cur\030\004 \001(\t\022\022\n\ncustomdata\030\005 \001("
    "\t\0228\n\003nbr\030\006 \001(\0162+.com.google.openrtb.BidR"
    "esponse.NoBidReason\032\310\003\n\007SeatBid\0228\n\003bid\030\001"
    " \003(\0132+.com.google.openrtb.BidResponse.Se"
    "atBid.Bid\022\014\n\004seat\030\002 \001(\t\022\r\n\005group\030\003 \001(\010\032\336"
    "\002\n\003Bid\022\n\n\002id\030\001 \002(\t\022\r\n\005impid\030\002 \002(\t\022\r\n\005pri"
    "ce\030\003 \002(\001\022\014\n\004adid\030\004 \001(\t\022\014\n\004nurl\030\005 \001(\t\022\r\n\003"
    "adm\030\006 \001(\tH\000\0228\n\nadm_native\0302 \001(\0132\".com.go"
    "ogle.openrtb.NativeResponseH\000\022\017\n\007adomain"
    "\030\007 \003(\t\022\016\n\006bundle\030\016 \001(\t\022\014\n\004iurl\030\010 \001(\t\022\013\n\003"
    "cid\030\t \001(\t\022\014\n\004crid\030\n \001(\t\022\013\n\003cat\030\017 \003(\t\0227\n\004"
    "attr\030\013 \003(\0162%.com.google.openrtb.Creative"
    "AttributeB\002\020\001\022\016\n\006dealid\030\r \001(\t\022\t\n\001w\030\020 \001(\005"
    "\022\t\n\001h\030\021 \001(\005*\005\010d\020\220NB\013\n\tadm_oneof*\005\010d\020\220N\"\341"
    "\001\n\013NoBidReason\022\021\n\rUNKNOWN_ERROR\020\000\022\023\n\017TEC"
    "HNICAL_ERROR\020\001\022\023\n\017INVALID_REQUEST\020\002\022\024\n\020K"
    "NOWN_WEB_SPIDER\020\003\022\036\n\032SUSPECTED_NONHUMAN_"
    "TRAFFIC\020\004\022\034\n\030CLOUD_DATACENTER_PROXYIP\020\005\022"
    "\026\n\022UNSUPPORTED_DEVICE\020\006\022\025\n\021BLOCKED_PUBLI"
    "SHER\020\007\022\022\n\016UNMATCHED_USER\020\010*\005\010d\020\220N\"\235\n\n\rNa"
    "tiveRequest\022\013\n\003ver\030\001 \001(\t\022:\n\006layout\030\002 \001(\016"
    "2*.com.google.openrtb.NativeRequest.Layo"
    "utId\022:\n\006adunit\030\003 \001(\0162*.com.google.openrt"
    "b.NativeRequest.AdUnitId\022\023\n\010plcmtcnt\030\004 \001"
    "(\005:\0011\022\016\n\003seq\030\005 \001(\005:\0010\0227\n\006assets\030\006 \003(\0132\'."
    "com.google.openrtb.NativeRequest.Asset\032\266"
    "\006\n\005Asset\022\n\n\002id\030\001 \002(\005\022\027\n\010required\030\002 \001(\010:\005"
    "false\022>\n\005title\030\003 \001(\0132-.com.google.openrt"
    "b.NativeRequest.Asset.TitleH\000\022<\n\003img\030\004 \001"
    "(\0132-.com.google.openrtb.NativeRequest.As"
    "set.ImageH\000\0229\n\005video\030\005 \001(\0132(.com.google."
    "openrtb.BidRequest.Imp.VideoH\000\022<\n\004data\030\006"
    " \001(\0132,.com.google.openrtb.NativeRequest."
    "Asset.DataH\000\032\033\n\005Title\022\013\n\003len\030\001 \002(\005*\005\010d\020\220"
    "N\032\313\001\n\005Image\022J\n\004type\030\001 \001(\0162<.com.google.o"
    "penrtb.NativeRequest.Asset.Image.ImageAs"
    "setType\022\t\n\001w\030\002 \001(\005\022\t\n\001h\030\003 \001(\005\022\014\n\004wmin\030\004 "
    "\001(\005\022\014\n\004hmin\030\005 \001(\005\022\r\n\005mimes\030\006 \003(\t\".\n\016Imag"
    "eAssetType\022\010\n\004ICON\020\001\022\010\n\004LOGO\020\002\022\010\n\004MAIN\020\003"
    "*\005\010d\020\220N\032\217\002\n\004Data\022H\n\004type\030\001 \002(\0162:.com.goo"
    "gle.openrtb.NativeRequest.Asset.Data.Dat"
    "aAssetType\022\013\n\003len\030\002 \001(\005\"\250\001\n\rDataAssetTyp"
    "e\022\r\n\tSPONSORED\020\001\022\010\n\004DESC\020\002\022\n\n\006RATING\020\003\022\t"
    "\n\005LIKES\020\004\022\r\n\tDOWNLOADS\020\005\022\t\n\005PRICE\020\006\022\r\n\tS"
    "ALEPRICE\020\007\022\t\n\005PHONE\020\010\022\013\n\007ADDRESS\020\t\022\t\n\005DE"
    "SC2\020\n\022\016\n\nDISPLAYURL\020\013\022\013\n\007CTATEXT\020\014*\005\010d\020\220"
    "N*\005\010d\020\220NB\r\n\013asset_oneof\"t\n\010LayoutId\022\020\n\014C"
    "ONTENT_WALL\020\001\022\014\n\010APP_WALL\020\002\022\r\n\tNEWS_FEED"
    "\020\003\022\r\n\tCHAT_LIST\020\004\022\014\n\010CAROUSEL\020\005\022\022\n\016CONTE"
    "NT_STREAM\020\006\022\010\n\004GRID\020\007\"s\n\010AdUnitId\022\024\n\020PAI"
    "D_SEARCH_UNIT\020\001\022\031\n\025RECOMMENDATION_WIDGET"
    "\020\002\022\024\n\020PROMOTED_LISTING\020\003\022\024\n\020IAB_IN_AD_NA"
    "TIVE\020\004\022\n\n\006CUSTOM\020\005*\005\010d\020\220N\"\235\006\n\016NativeResp"
    "onse\022\013\n\003ver\030\001 \001(\t\0228\n\006assets\030\002 \003(\0132(.com."
    "google.openrtb.NativeResponse.Asset\0225\n\004l"
    "ink\030\003 \002(\0132\'.com.google.openrtb.NativeRes"
    "ponse.Link\022\023\n\013imptrackers\030\004 \003(\t\022\021\n\tjstra"
    "cker\030\005 \001(\t\032C\n\004Link\022\013\n\003url\030\001 \001(\t\022\025\n\rclick"
    "trackers\030\002 \003(\t\022\020\n\010fallback\030\003 \001(\t*\005\010d\020\220N\032"
    "\230\004\n\005Asset\022\n\n\002id\030\001 \002(\005\022\027\n\010required\030\002 \001(\010:"
    "\005false\022\?\n\005title\030\003 \001(\0132..com.google.openr"
    "tb.NativeResponse.Asset.TitleH\000\022=\n\003img\030\004"
    " \001(\0132..com.google.openrtb.NativeResponse"
    ".Asset.ImageH\000\022\?\n\005video\030\005 \001(\0132..com.goog"
    "le.openrtb.NativeResponse.Asset.VideoH\000\022"
    "=\n\004data\030\006 \001(\0132-.com.google.openrtb.Nativ"
    "eResponse.Asset.DataH\000\0225\n\004link\030\007 \001(\0132\'.c"
    "om.google.openrtb.NativeResponse.Link\032\034\n"
    "\005Title\022\014\n\004text\030\001 \002(\t*\005\010d\020\220N\0321\n\005Image\022\013\n\003"
    "url\030\001 \001(\t\022\t\n\001w\030\002 \001(\005\022\t\n\001h\030\003 \001(\005*\005\010d\020\220N\032+"
    "\n\004Data\022\r\n\005label\030\001 \001(\t\022\r\n\005value\030\002 \002(\t*\005\010d"
    "\020\220N\032\037\n\005Video\022\017\n\007vasttag\030\001 \001(\t*\005\010d\020\220N*\005\010d"
    "\020\220NB\r\n\013asset_oneof*\005\010d\020\220N*\313)\n\017ContentCat"
    "egory\022\010\n\004IAB1\020\001\022\n\n\006IAB1_1\020\002\022\n\n\006IAB1_2\020\003\022"
    "\n\n\006IAB1_3\020\004\022\n\n\006IAB1_4\020\005\022\n\n\006IAB1_5\020\006\022\n\n\006I"
    "AB1_6\020\007\022\n\n\006IAB1_7\020\010\022\010\n\004IAB2\020\t\022\n\n\006IAB2_1\020"
    "\n\022\n\n\006IAB2_2\020\013\022\n\n\006IAB2_3\020\014\022\n\n\006IAB2_4\020\r\022\n\n"
    "\006IAB2_5\020\016\022\n\n\006IAB2_6\020\017\022\n\n\006IAB2_7\020\020\022\n\n\006IAB"
    "2_8\020\021\022\n\n\006IAB2_9\020\022\022\013\n\007IAB2_10\020\023\022\013\n\007IAB2_1"
    "1\020\024\022\013\n\007IAB2_12\020\025\022\013\n\007IAB2_13\020\026\022\013\n\007IAB2_14"
    "\020\027\022\013\n\007IAB2_15\020\030\022\013\n\007IAB2_16\020\031\022\013\n\007IAB2_17\020"
    "\032\022\013\n\007IAB2_18\020\033\022\013\n\007IAB2_19\020\034\022\013\n\007IAB2_20\020\035"
    "\022\013\n\007IAB2_21\020\036\022\013\n\007IAB2_22\020\037\022\013\n\007IAB2_23\020 \022"
    "\010\n\004IAB3\020!\022\n\n\006IAB3_1\020\"\022\n\n\006IAB3_2\020#\022\n\n\006IAB"
    "3_3\020$\022\n\n\006IAB3_4\020%\022\n\n\006IAB3_5\020&\022\n\n\006IAB3_6\020"
    "\'\022\n\n\006IAB3_7\020(\022\n\n\006IAB3_8\020)\022\n\n\006IAB3_9\020*\022\013\n"
    "\007IAB3_10\020+\022\013\n\007IAB3_11\020,\022\013\n\007IAB3_12\020-\022\010\n\004"
    "IAB4\020.\022\n\n\006IAB4_1\020/\022\n\n\006IAB4_2\0200\022\n\n\006IAB4_3"
    "\0201\022\n\n\006IAB4_4\0202\022\n\n\006IAB4_5\0203\022\n\n\006IAB4_6\0204\022\n"
    "\n\006IAB4_7\0205\022\n\n\006IAB4_8\0206\022\n\n\006IAB4_9\0207\022\013\n\007IA"
    "B4_10\0208\022\013\n\007IAB4_11\0209\022\010\n\004IAB5\020:\022\n\n\006IAB5_1"
    "\020;\022\n\n\006IAB5_2\020<\022\n\n\006IAB5_3\020=\022\n\n\006IAB5_4\020>\022\n"
    "\n\006IAB5_5\020\?\022\n\n\006IAB5_6\020@\022\n\n\006IAB5_7\020A\022\n\n\006IA"
    "B5_8\020B\022\n\n\006IAB5_9\020C\022\013\n\007IAB5_10\020D\022\013\n\007IAB5_"
    "11\020E\022\013\n\007IAB5_12\020F\022\013\n\007IAB5_13\020G\022\013\n\007IAB5_1"
    "4\020H\022\013\n\007IAB5_15\020I\022\010\n\004IAB6\020J\022\n\n\006IAB6_1\020K\022\n"
    "\n\006IAB6_2\020L\022\n\n\006IAB6_3\020M\022\n\n\006IAB6_4\020N\022\n\n\006IA"
    "B6_5\020O\022\n\n\006IAB6_6\020P\022\n\n\006IAB6_7\020Q\022\n\n\006IAB6_8"
    "\020R\022\n\n\006IAB6_9\020S\022\010\n\004IAB7\020T\022\n\n\006IAB7_1\020U\022\n\n\006"
    "IAB7_2\020V\022\n\n\006IAB7_3\020W\022\n\n\006IAB7_4\020X\022\n\n\006IAB7"
    "_5\020Y\022\n\n\006IAB7_6\020Z\022\n\n\006IAB7_7\020[\022\n\n\006IAB7_8\020\\"
    "\022\n\n\006IAB7_9\020]\022\013\n\007IAB7_10\020^\022\013\n\007IAB7_11\020_\022\013"
    "\n\007IAB7_12\020`\022\013\n\007IAB7_13\020a\022\013\n\007IAB7_14\020b\022\013\n"
    "\007IAB7_15\020c\022\013\n\007IAB7_16\020d\022\013\n\007IAB7_17\020e\022\013\n\007"
    "IAB7_18\020f\022\013\n\007IAB7_19\020g\022\013\n\007IAB7_20\020h\022\013\n\007I"
    "AB7_21\020i\022\013\n\007IAB7_22\020j\022\013\n\007IAB7_23\020k\022\013\n\007IA"
    "B7_24\020l\022\013\n\007IAB7_25\020m\022\013\n\007IAB7_26\020n\022\013\n\007IAB"
    "7_27\020o\022\013\n\007IAB7_28\020p\022\013\n\007IAB7_29\020q\022\013\n\007IAB7"
    "_30\020r\022\013\n\007IAB7_31\020s\022\013\n\007IAB7_32\020t\022\013\n\007IAB7_"
    "33\020u\022\013\n\007IAB7_34\020v\022\013\n\007IAB7_35\020w\022\013\n\007IAB7_3"
    "6\020x\022\013\n\007IAB7_37\020y\022\013\n\007IAB7_38\020z\022\013\n\007IAB7_39"
    "\020{\022\013\n\007IAB7_40\020|\022\013\n\007IAB7_41\020}\022\013\n\007IAB7_42\020"
    "~\022\013\n\007IAB7_43\020\177\022\014\n\007IAB7_44\020\200\001\022\014\n\007IAB7_45\020"
    "\201\001\022\t\n\004IAB8\020\202\001\022\013\n\006IAB8_1\020\203\001\022\013\n\006IAB8_2\020\204\001\022"
    "\013\n\006IAB8_3\020\205\001\022\013\n\006IAB8_4\020\206\001\022\013\n\006IAB8_5\020\207\001\022\013"
    "\n\006IAB8_6\020\210\001\022\013\n\006IAB8_7\020\211\001\022\013\n\006IAB8_8\020\212\001\022\013\n"
    "\006IAB8_9\020\213\001\022\014\n\007IAB8_10\020\214\001\022\014\n\007IAB8_11\020\215\001\022\014"
    "\n\007IAB8_12\020\216\001\022\014\n\007IAB8_13\020\217\001\022\014\n\007IAB8_14\020\220\001"
    "\022\014\n\007IAB8_15\020\221\001\022\014\n\007IAB8_16\020\222\001\022\014\n\007IAB8_17\020"
    "\223\001\022\014\n\007IAB8_18\020\224\001\022\t\n\004IAB9\020\225\001\022\013\n\006IAB9_1\020\226\001"
    "\022\013\n\006IAB9_2\020\227\001\022\013\n\006IAB9_3\020\230\001\022\013\n\006IAB9_4\020\231\001\022"
    "\013\n\006IAB9_5\020\232\001\022\013\n\006IAB9_6\020\233\001\022\013\n\006IAB9_7\020\234\001\022\013"
    "\n\006IAB9_8\020\235\001\022\013\n\006IAB9_9\020\236\001\022\014\n\007IAB9_10\020\237\001\022\014"
    "\n\007IAB9_11\020\240\001\022\014\n\007IAB9_12\020\241\001\022\014\n\007IAB9_13\020\242\001"
    "\022\014\n\007IAB9_14\020\243\001\022\014\n\007IAB9_15\020\244\001\022\014\n\007IAB9_16\020"
    "\245\001\022\014\n\007IAB9_17\020\246\001\022\014\n\007IAB9_18\020\247\001\022\014\n\007IAB9_1"
    "9\020\250\001\022\014\n\007IAB9_20\020\251\001\022\014\n\007IAB9_21\020\252\001\022\014\n\007IAB9"
    "_22\020\253\001\022\014\n\007IAB9_23\020\254\001\022\014\n\007IAB9_24\020\255\001\022\014\n\007IA"
    "B9_25\020\256\001\022\014\n\007IAB9_26\020\257\001\022\014\n\007IAB9_27\020\260\001\022\014\n\007"
    "IAB9_28\020\261\001\022\014\n\007IAB9_29\020\262\001\022\014\n\007IAB9_30\020\263\001\022\014"
    "\n\007IAB9_31\020\264\001\022\n\n\005IAB10\020\265\001\022\014\n\007IAB10_1\020\266\001\022\014"
    "\n\007IAB10_2\020\267\001\022\014\n\007IAB10_3\020\270\001\022\014\n\007IAB10_4\020\271\001"
    "\022\014\n\007IAB10_5\020\272\001\022\014\n\007IAB10_6\020\273\001\022\014\n\007IAB10_7\020"
    "\274\001\022\014\n\007IAB10_8\020\275\001\022\014\n\007IAB10_9\020\276\001\022\n\n\005IAB11\020"
    "\277\001\022\014\n\007IAB11_1\020\300\001\022\014\n\007IAB11_2\020\301\001\022\014\n\007IAB11_"
    "3\020\302\001\022\014\n\007IAB11_4\020\303\001\022\014\n\007IAB11_5\020\304\001\022\n\n\005IAB1"
    "2\020\305\001\022\014\n\007IAB12_1\020\306\001\022\014\n\007IAB12_2\020\307\001\022\014\n\007IAB1"
    "2_3\020\310\001\022\n\n\005IAB13\020\311\001\022\014\n\007IAB13_1\020\312\001\022\014\n\007IAB1"
    "3_2\020\313\001\022\014\n\007IAB13_3\020\314\001\022\014\n\007IAB13_4\020\315\001\022\014\n\007IA"
    "B13_5\020\316\001\022\014\n\007IAB13_6\020\317\001\022\014\n\007IAB13_7\020\320\001\022\014\n\007"
    "IAB13_8\020\321\001\022\014\n\007IAB13_9\020\322\001\022\r\n\010IAB13_10\020\323\001\022"
    "\r\n\010IAB13_11\020\324\001\022\r\n\010IAB13_12\020\325\001\022\n\n\005IAB14\020\326"
    "\001\022\014\n\007IAB14_1\020\327\001\022\014\n\007IAB14_2\020\330\001\022\014\n\007IAB14_3"
    "\020\331\001\022\014\n\007IAB14_4\020\332\001\022\014\n\007IAB14_5\020\333\001\022\014\n\007IAB14"
    "_6\020\334\001\022\014\n\007IAB14_7\020\335\001\022\014\n\007IAB14_8\020\336\001\022\n\n\005IAB"
    "15\020\337\001\022\014\n\007IAB15_1\020\340\001\022\014\n\007IAB15_2\020\341\001\022\014\n\007IAB"
    "15_3\020\342\001\022\014\n\007IAB15_4\020\343\001\022\014\n\007IAB15_5\020\344\001\022\014\n\007I"
    "AB15_6\020\345\001\022\014\n\007IAB15_7\020\346\001\022\014\n\007IAB15_8\020\347\001\022\014\n"
    "\007IAB15_9\020\350\001\022\r\n\010IAB15_10\020\351\001\022\n\n\005IAB16\020\352\001\022\014"
    "\n\007IAB16_1\020\353\001\022\014\n\007IAB16_2\020\354\001\022\014\n\007IAB16_3\020\355\001"
    "\022\014\n\007IAB16_4\020\356\001\022\014\n\007IAB16_5\020\357\001\022\014\n\007IAB16_6\020"
    "\360\001\022\014\n\007IAB16_7\020\361\001\022\n\n\005IAB17\020\362\001\022\014\n\007IAB17_1\020"
    "\363\001\022\014\n\007IAB17_2\020\364\001\022\014\n\007IAB17_3\020\365\001\022\014\n\007IAB17_"
    "4\020\366\001\022\014\n\007IAB17_5\020\367\001\022\014\n\007IAB17_6\020\370\001\022\014\n\007IAB1"
    "7_7\020\371\001\022\014\n\007IAB17_8\020\372\001\022\014\n\007IAB17_9\020\373\001\022\r\n\010IA"
    "B17_10\020\374\001\022\r\n\010IAB17_11\020\375\001\022\r\n\010IAB17_12\020\376\001\022"
    "\r\n\010IAB17_13\020\377\001\022\r\n\010IAB17_14\020\200\002\022\r\n\010IAB17_1"
    "5\020\201\002\022\r\n\010IAB17_16\020\202\002\022\r\n\010IAB17_17\020\203\002\022\r\n\010IA"
    "B17_18\020\204\002\022\r\n\010IAB17_19\020\205\002\022\r\n\010IAB17_20\020\206\002\022"
    "\r\n\010IAB17_21\020\207\002\022\r\n\010IAB17_22\020\210\002\022\r\n\010IAB17_2"
    "3\020\211\002\022\r\n\010IAB17_24\020\212\002\022\r\n\010IAB17_25\020\213\002\022\r\n\010IA"
    "B17_26\020\214\002\022\r\n\010IAB17_27\020\215\002\022\r\n\010IAB17_28\020\216\002\022"
    "\r\n\010IAB17_29\020\217\002\022\r\n\010IAB17_30\020\220\002\022\r\n\010IAB17_3"
    "1\020\221\002\022\r\n\010IAB17_32\020\222\002\022\r\n\010IAB17_33\020\223\002\022\r\n\010IA"
    "B17_34\020\224\002\022\r\n\010IAB17_35\020\225\002\022\r\n\010IAB17_36\020\226\002\022"
    "\r\n\010IAB17_37\020\227\002\022\r\n\010IAB17_38\020\230\002\022\r\n\010IAB17_3"
    "9\020\231\002\022\r\n\010IAB17_40\020\232\002\022\r\n\010IAB17_41\020\233\002\022\r\n\010IA"
    "B17_42\020\234\002\022\r\n\010IAB17_43\020\235\002\022\r\n\010IAB17_44\020\236\002\022"
    "\n\n\005IAB18\020\237\002\022\014\n\007IAB18_1\020\240\002\022\014\n\007IAB18_2\020\241\002\022"
    "\014\n\007IAB18_3\020\242\002\022\014\n\007IAB18_4\020\243\002\022\014\n\007IAB18_5\020\244"
    "\002\022\014\n\007IAB18_6\020\245\002\022\n\n\005IAB19\020\246\002\022\014\n\007IAB19_1\020\247"
    "\002\022\014\n\007IAB19_2\020\250\002\022\014\n\007IAB19_3\020\251\002\022\014\n\007IAB19_4"
    "\020\252\002\022\014\n\007IAB19_5\020\253\002\022\014\n\007IAB19_6\020\254\002\022\014\n\007IAB19"
    "_7\020\255\002\022\014\n\007IAB19_8\020\256\002\022\014\n\007IAB19_9\020\257\002\022\r\n\010IAB"
    "19_10\020\260\002\022\r\n\010IAB19_11\020\261\002\022\r\n\010IAB19_12\020\262\002\022\r"
    "\n\010IAB19_13\020\263\002\022\r\n\010IAB19_14\020\264\002\022\r\n\010IAB19_15"
    "\020\265\002\022\r\n\010IAB19_16\020\266\002\022\r\n\010IAB19_17\020\267\002\022\r\n\010IAB"
    "19_18\020\270\002\022\r\n\010IAB19_19\020\271\002\022\r\n\010IAB19_20\020\272\002\022\r"
    "\n\010IAB19_21\020\273\002\022\r\n\010IAB19_22\020\274\002\022\r\n\010IAB19_23"
    "\020\275\002\022\r\n\010IAB19_24\020\276\002\022\r\n\010IAB19_25\020\277\002\022\r\n\010IAB"
    "19_26\020\300\002\022\r\n\010IAB19_27\020\301\002\022\r\n\010IAB19_28\020\302\002\022\r"
    "\n\010IAB19_29\020\303\002\022\r\n\010IAB19_30\020\304\002\022\r\n\010IAB19_31"
    "\020\305\002\022\r\n\010IAB19_32\020\306\002\022\r\n\010IAB19_33\020\307\002\022\r\n\010IAB"
    "19_34\020\310\002\022\r\n\010IAB19_35\020\311\002\022\r\n\010IAB19_36\020\312\002\022\n"
    "\n\005IAB20\020\313\002\022\014\n\007IAB20_1\020\314\002\022\014\n\007IAB20_2\020\315\002\022\014"
    "\n\007IAB20_3\020\316\002\022\014\n\007IAB20_4\020\317\002\022\014\n\007IAB20_5\020\320\002"
    "\022\014\n\007IAB20_6\020\321\002\022\014\n\007IAB20_7\020\322\002\022\014\n\007IAB20_8\020"
    "\323\002\022\014\n\007IAB20_9\020\324\002\022\r\n\010IAB20_10\020\325\002\022\r\n\010IAB20"
    "_11\020\326\002\022\r\n\010IAB20_12\020\327\002\022\r\n\010IAB20_13\020\330\002\022\r\n\010"
    "IAB20_14\020\331\002\022\r\n\010IAB20_15\020\332\002\022\r\n\010IAB20_16\020\333"
    "\002\022\r\n\010IAB20_17\020\334\002\022\r\n\010IAB20_18\020\335\002\022\r\n\010IAB20"
    "_19\020\336\002\022\r\n\010IAB20_20\020\337\002\022\r\n\010IAB20_21\020\340\002\022\r\n\010"
    "IAB20_22\020\341\002\022\r\n\010IAB20_23\020\342\002\022\r\n\010IAB20_24\020\343"
    "\002\022\r\n\010IAB20_25\020\344\002\022\r\n\010IAB20_26\020\345\002\022\r\n\010IAB20"
    "_27\020\346\002\022\n\n\005IAB21\020\347\002\022\014\n\007IAB21_1\020\350\002\022\014\n\007IAB2"
    "1_2\020\351\002\022\014\n\007IAB21_3\020\352\002\022\n\n\005IAB22\020\353\002\022\014\n\007IAB2"
    "2_1\020\354\002\022\014\n\007IAB22_2\020\355\002\022\014\n\007IAB22_3\020\356\002\022\014\n\007IA"
    "B22_4\020\357\002\022\n\n\005IAB23\020\360\002\022\014\n\007IAB23_1\020\361\002\022\014\n\007IA"
    "B23_2\020\362\002\022\014\n\007IAB23_3\020\363\002\022\014\n\007IAB23_4\020\364\002\022\014\n\007"
    "IAB23_5\020\365\002\022\014\n\007IAB23_6\020\366\002\022\014\n\007IAB23_7\020\367\002\022\014"
    "\n\007IAB23_8\020\370\002\022\014\n\007IAB23_9\020\371\002\022\r\n\010IAB23_10\020\372"
    "\002\022\n\n\005IAB24\020\373\002\022\n\n\005IAB25\020\374\002\022\014\n\007IAB25_1\020\375\002\022"
    "\014\n\007IAB25_2\020\376\002\022\014\n\007IAB25_3\020\377\002\022\014\n\007IAB25_4\020\200"
    "\003\022\014\n\007IAB25_5\020\201\003\022\014\n\007IAB25_6\020\202\003\022\014\n\007IAB25_7"
    "\020\203\003\022\n\n\005IAB26\020\204\003\022\014\n\007IAB26_1\020\205\003\022\014\n\007IAB26_2"
    "\020\206\003\022\014\n\007IAB26_3\020\207\003\022\014\n\007IAB26_4\020\210\003*\241\003\n\021Crea"
    "tiveAttribute\022\023\n\017AUDIO_AUTO_PLAY\020\001\022\030\n\024AU"
    "DIO_USER_INITIATED\020\002\022\030\n\024EXPANDABLE_AUTOM"
    "ATIC\020\003\022\036\n\032EXPANDABLE_CLICK_INITIATED\020\004\022!"
    "\n\035EXPANDABLE_ROLLOVER_INITIATED\020\005\022\035\n\031VID"
    "EO_IN_BANNER_AUTO_PLAY\020\006\022\"\n\036VIDEO_IN_BAN"
    "NER_USER_INITIATED\020\007\022\007\n\003POP\020\010\022\035\n\031PROVOCA"
    "TIVE_OR_SUGGESTIVE\020\t\022\014\n\010ANNOYING\020\n\022\013\n\007SU"
    "RVEYS\020\013\022\r\n\tTEXT_ONLY\020\014\022\024\n\020USER_INTERACTI"
    "VE\020\r\022!\n\035WINDOWS_DIALOG_OR_ALERT_STYLE\020\016\022"
    "\033\n\027HAS_AUDIO_ON_OFF_BUTTON\020\017\022\025\n\021AD_CAN_B"
    "E_SKIPPED\020\020B\tB\007OpenRtb", 16142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openrtb.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_default_oneof_instance_ = new BidRequestOneofInstance;
  BidRequest_Imp::_default_bidfloorcur_ =
      new ::std::string("USD", 3);
  BidRequest_Imp::default_instance_ = new BidRequest_Imp();
  BidRequest_Imp_Banner::default_instance_ = new BidRequest_Imp_Banner();
  BidRequest_Imp_Video::default_instance_ = new BidRequest_Imp_Video();
  BidRequest_Imp_Video_CompanionAd::default_instance_ = new BidRequest_Imp_Video_CompanionAd();
  BidRequest_Imp_Native::default_instance_ = new BidRequest_Imp_Native();
  BidRequest_Imp_Native_default_oneof_instance_ = new BidRequest_Imp_NativeOneofInstance;
  BidRequest_Imp_Pmp::default_instance_ = new BidRequest_Imp_Pmp();
  BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_ =
      new ::std::string("USD", 3);
  BidRequest_Imp_Pmp_Deal::default_instance_ = new BidRequest_Imp_Pmp_Deal();
  BidRequest_Site::default_instance_ = new BidRequest_Site();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidRequest_Publisher::default_instance_ = new BidRequest_Publisher();
  BidRequest_Content::default_instance_ = new BidRequest_Content();
  BidRequest_Producer::default_instance_ = new BidRequest_Producer();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidRequest_Data::default_instance_ = new BidRequest_Data();
  BidRequest_Data_Segment::default_instance_ = new BidRequest_Data_Segment();
  BidRequest_Regs::default_instance_ = new BidRequest_Regs();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidResponse_SeatBid_Bid::default_instance_ = new BidResponse_SeatBid_Bid();
  BidResponse_SeatBid_Bid_default_oneof_instance_ = new BidResponse_SeatBid_BidOneofInstance;
  NativeRequest::default_instance_ = new NativeRequest();
  NativeRequest_Asset::default_instance_ = new NativeRequest_Asset();
  NativeRequest_Asset_default_oneof_instance_ = new NativeRequest_AssetOneofInstance;
  NativeRequest_Asset_Title::default_instance_ = new NativeRequest_Asset_Title();
  NativeRequest_Asset_Image::default_instance_ = new NativeRequest_Asset_Image();
  NativeRequest_Asset_Data::default_instance_ = new NativeRequest_Asset_Data();
  NativeResponse::default_instance_ = new NativeResponse();
  NativeResponse_Link::default_instance_ = new NativeResponse_Link();
  NativeResponse_Asset::default_instance_ = new NativeResponse_Asset();
  NativeResponse_Asset_default_oneof_instance_ = new NativeResponse_AssetOneofInstance;
  NativeResponse_Asset_Title::default_instance_ = new NativeResponse_Asset_Title();
  NativeResponse_Asset_Image::default_instance_ = new NativeResponse_Asset_Image();
  NativeResponse_Asset_Data::default_instance_ = new NativeResponse_Asset_Data();
  NativeResponse_Asset_Video::default_instance_ = new NativeResponse_Asset_Video();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Banner::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Video_CompanionAd::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_Site::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidRequest_Publisher::default_instance_->InitAsDefaultInstance();
  BidRequest_Content::default_instance_->InitAsDefaultInstance();
  BidRequest_Producer::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidRequest_Data::default_instance_->InitAsDefaultInstance();
  BidRequest_Data_Segment::default_instance_->InitAsDefaultInstance();
  BidRequest_Regs::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid::default_instance_->InitAsDefaultInstance();
  NativeRequest::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Title::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Image::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Data::default_instance_->InitAsDefaultInstance();
  NativeResponse::default_instance_->InitAsDefaultInstance();
  NativeResponse_Link::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Title::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Image::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Data::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Video::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_openrtb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_openrtb_2eproto {
  StaticDescriptorInitializer_openrtb_2eproto() {
    protobuf_AddDesc_openrtb_2eproto();
  }
} static_descriptor_initializer_openrtb_2eproto_;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentCategory_descriptor_;
}
bool ContentCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreativeAttribute_descriptor_;
}
bool CreativeAttribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_AuctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AuctionType_descriptor_;
}
bool BidRequest_AuctionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AuctionType BidRequest::FIRST_PRICE;
const BidRequest_AuctionType BidRequest::SECOND_PRICE;
const BidRequest_AuctionType BidRequest::FIXED_PRICE;
const BidRequest_AuctionType BidRequest::AuctionType_MIN;
const BidRequest_AuctionType BidRequest::AuctionType_MAX;
const int BidRequest::AuctionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_AdPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_AdPosition_descriptor_;
}
bool BidRequest_Imp_AdPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_AdPosition BidRequest_Imp::UNKNOWN;
const BidRequest_Imp_AdPosition BidRequest_Imp::ABOVE_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::DEPRECATED_LIKELY_BELOW_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::BELOW_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::HEADER;
const BidRequest_Imp_AdPosition BidRequest_Imp::FOOTER;
const BidRequest_Imp_AdPosition BidRequest_Imp::SIDEBAR;
const BidRequest_Imp_AdPosition BidRequest_Imp::AD_POSITION_FULLSCREEN;
const BidRequest_Imp_AdPosition BidRequest_Imp::AdPosition_MIN;
const BidRequest_Imp_AdPosition BidRequest_Imp::AdPosition_MAX;
const int BidRequest_Imp::AdPosition_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_APIFramework_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_APIFramework_descriptor_;
}
bool BidRequest_Imp_APIFramework_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_APIFramework BidRequest_Imp::VPAID_1;
const BidRequest_Imp_APIFramework BidRequest_Imp::VPAID_2;
const BidRequest_Imp_APIFramework BidRequest_Imp::MRAID_1;
const BidRequest_Imp_APIFramework BidRequest_Imp::ORMMA;
const BidRequest_Imp_APIFramework BidRequest_Imp::MRAID_2;
const BidRequest_Imp_APIFramework BidRequest_Imp::APIFramework_MIN;
const BidRequest_Imp_APIFramework BidRequest_Imp::APIFramework_MAX;
const int BidRequest_Imp::APIFramework_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_BannerAdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_BannerAdType_descriptor_;
}
bool BidRequest_Imp_Banner_BannerAdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::XHTML_TEXT_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::XHTML_BANNER_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::JAVASCRIPT_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::IFRAME;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::BannerAdType_MIN;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::BannerAdType_MAX;
const int BidRequest_Imp_Banner::BannerAdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_ExpandableDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_ExpandableDirection_descriptor_;
}
bool BidRequest_Imp_Banner_ExpandableDirection_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::LEFT;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::RIGHT;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::UP;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::DOWN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::EXPANDABLE_FULLSCREEN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::ExpandableDirection_MIN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::ExpandableDirection_MAX;
const int BidRequest_Imp_Banner::ExpandableDirection_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Imp_Banner::kWFieldNumber;
const int BidRequest_Imp_Banner::kHFieldNumber;
const int BidRequest_Imp_Banner::kWmaxFieldNumber;
const int BidRequest_Imp_Banner::kHmaxFieldNumber;
const int BidRequest_Imp_Banner::kWminFieldNumber;
const int BidRequest_Imp_Banner::kHminFieldNumber;
const int BidRequest_Imp_Banner::kIdFieldNumber;
const int BidRequest_Imp_Banner::kPosFieldNumber;
const int BidRequest_Imp_Banner::kBtypeFieldNumber;
const int BidRequest_Imp_Banner::kBattrFieldNumber;
const int BidRequest_Imp_Banner::kMimesFieldNumber;
const int BidRequest_Imp_Banner::kTopframeFieldNumber;
const int BidRequest_Imp_Banner::kExpdirFieldNumber;
const int BidRequest_Imp_Banner::kApiFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Banner::BidRequest_Imp_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::InitAsDefaultInstance() {
}

BidRequest_Imp_Banner::BidRequest_Imp_Banner(const BidRequest_Imp_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  wmax_ = 0;
  hmax_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
  topframe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Banner::~BidRequest_Imp_Banner() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Banner)
  SharedDtor();
}

void BidRequest_Imp_Banner::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_descriptor_;
}

const BidRequest_Imp_Banner& BidRequest_Imp_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Banner* BidRequest_Imp_Banner::default_instance_ = NULL;

BidRequest_Imp_Banner* BidRequest_Imp_Banner::New() const {
  return new BidRequest_Imp_Banner;
}

void BidRequest_Imp_Banner::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Imp_Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(w_, hmin_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    pos_ = 0;
  }
  topframe_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  btype_.Clear();
  battr_.Clear();
  mimes_.Clear();
  expdir_.Clear();
  api_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // optional int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
      case 4: {
        if (tag == 32) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value)) {
            set_pos(static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_btype;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_btype:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value)) {
              add_btype(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 40) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value)) {
            add_btype(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 48) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 7;
      case 7: {
        if (tag == 58) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mimes;
        if (input->ExpectTag(64)) goto parse_topframe;
        break;
      }

      // optional bool topframe = 8;
      case 8: {
        if (tag == 64) {
         parse_topframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &topframe_)));
          set_has_topframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_expdir;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_expdir:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value)) {
              add_expdir(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 72) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value)) {
            add_expdir(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wmax;
        break;
      }

      // optional int32 wmax = 11;
      case 11: {
        if (tag == 88) {
         parse_wmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmax_)));
          set_has_wmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hmax;
        break;
      }

      // optional int32 hmax = 12;
      case 12: {
        if (tag == 96) {
         parse_hmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmax_)));
          set_has_hmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 13;
      case 13: {
        if (tag == 104) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 14;
      case 14: {
        if (tag == 112) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Banner)
  return false;
#undef DO_
}

void BidRequest_Imp_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pos(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  if (this->btype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_btype_cached_byte_size_);
  }
  for (int i = 0; i < this->btype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->btype(i), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // repeated string mimes = 7;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mimes(i), output);
  }

  // optional bool topframe = 8;
  if (has_topframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->topframe(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  if (this->expdir_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_expdir_cached_byte_size_);
  }
  for (int i = 0; i < this->expdir_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->expdir(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // optional int32 wmax = 11;
  if (has_wmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wmax(), output);
  }

  // optional int32 hmax = 12;
  if (has_hmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hmax(), output);
  }

  // optional int32 wmin = 13;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wmin(), output);
  }

  // optional int32 hmin = 14;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hmin(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Banner)
}

::google::protobuf::uint8* BidRequest_Imp_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pos(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  if (this->btype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _btype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->btype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->btype(i), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // repeated string mimes = 7;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->mimes(i), target);
  }

  // optional bool topframe = 8;
  if (has_topframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->topframe(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  if (this->expdir_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _expdir_cached_byte_size_, target);
  }
  for (int i = 0; i < this->expdir_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->expdir(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // optional int32 wmax = 11;
  if (has_wmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wmax(), target);
  }

  // optional int32 hmax = 12;
  if (has_hmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hmax(), target);
  }

  // optional int32 wmin = 13;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wmin(), target);
  }

  // optional int32 hmin = 14;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hmin(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Banner)
  return target;
}

int BidRequest_Imp_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmax = 11;
    if (has_wmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmax());
    }

    // optional int32 hmax = 12;
    if (has_hmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmax());
    }

    // optional int32 wmin = 13;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 14;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional bool topframe = 8;
    if (has_topframe()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->btype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->btype(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _btype_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string mimes = 7;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->expdir_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->expdir(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _expdir_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Banner::MergeFrom(const BidRequest_Imp_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  btype_.MergeFrom(from.btype_);
  battr_.MergeFrom(from.battr_);
  mimes_.MergeFrom(from.mimes_);
  expdir_.MergeFrom(from.expdir_);
  api_.MergeFrom(from.api_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmax()) {
      set_wmax(from.wmax());
    }
    if (from.has_hmax()) {
      set_hmax(from.hmax());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_topframe()) {
      set_topframe(from.topframe());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Banner::CopyFrom(const BidRequest_Imp_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Banner::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Banner::Swap(BidRequest_Imp_Banner* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(wmax_, other->wmax_);
    std::swap(hmax_, other->hmax_);
    std::swap(wmin_, other->wmin_);
    std::swap(hmin_, other->hmin_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    btype_.Swap(&other->btype_);
    battr_.Swap(&other->battr_);
    mimes_.Swap(&other->mimes_);
    std::swap(topframe_, other->topframe_);
    expdir_.Swap(&other->expdir_);
    api_.Swap(&other->api_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Banner_descriptor_;
  metadata.reflection = BidRequest_Imp_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoLinearity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoLinearity_descriptor_;
}
bool BidRequest_Imp_Video_VideoLinearity_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::LINEAR;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::NON_LINEAR;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::VideoLinearity_MIN;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::VideoLinearity_MAX;
const int BidRequest_Imp_Video::VideoLinearity_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_;
}
bool BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_1_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_2_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_3_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_1_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_2_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_3_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VideoBidResponseProtocol_MIN;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VideoBidResponseProtocol_MAX;
const int BidRequest_Imp_Video::VideoBidResponseProtocol_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoPlaybackMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_;
}
bool BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::AUTO_PLAY_SOUND_ON;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::AUTO_PLAY_SOUND_OFF;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::CLICK_TO_PLAY;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::MOUSE_OVER;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::VideoPlaybackMethod_MIN;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::VideoPlaybackMethod_MAX;
const int BidRequest_Imp_Video::VideoPlaybackMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoStartDelay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoStartDelay_descriptor_;
}
bool BidRequest_Imp_Video_VideoStartDelay_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::PRE_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::GENERIC_MID_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::GENERIC_POST_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::VideoStartDelay_MIN;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::VideoStartDelay_MAX;
const int BidRequest_Imp_Video::VideoStartDelay_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VASTCompanionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VASTCompanionType_descriptor_;
}
bool BidRequest_Imp_Video_VASTCompanionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::STATIC;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::HTML;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::COMPANION_IFRAME;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::VASTCompanionType_MIN;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::VASTCompanionType_MAX;
const int BidRequest_Imp_Video::VASTCompanionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_ContentDeliveryMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_;
}
bool BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::STREAMING;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::PROGRESSIVE;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::ContentDeliveryMethod_MIN;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::ContentDeliveryMethod_MAX;
const int BidRequest_Imp_Video::ContentDeliveryMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Imp_Video_CompanionAd::kBannerFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Video_CompanionAd::BidRequest_Imp_Video_CompanionAd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

void BidRequest_Imp_Video_CompanionAd::InitAsDefaultInstance() {
}

BidRequest_Imp_Video_CompanionAd::BidRequest_Imp_Video_CompanionAd(const BidRequest_Imp_Video_CompanionAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

void BidRequest_Imp_Video_CompanionAd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Video_CompanionAd::~BidRequest_Imp_Video_CompanionAd() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  SharedDtor();
}

void BidRequest_Imp_Video_CompanionAd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Video_CompanionAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_CompanionAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_CompanionAd_descriptor_;
}

const BidRequest_Imp_Video_CompanionAd& BidRequest_Imp_Video_CompanionAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video_CompanionAd::default_instance_ = NULL;

BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video_CompanionAd::New() const {
  return new BidRequest_Imp_Video_CompanionAd;
}

void BidRequest_Imp_Video_CompanionAd::Clear() {
  _extensions_.Clear();
  banner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Video_CompanionAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
      case 1: {
        if (tag == 10) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_banner;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return false;
#undef DO_
}

void BidRequest_Imp_Video_CompanionAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  for (int i = 0; i < this->banner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->banner(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

::google::protobuf::uint8* BidRequest_Imp_Video_CompanionAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  for (int i = 0; i < this->banner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->banner(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return target;
}

int BidRequest_Imp_Video_CompanionAd::ByteSize() const {
  int total_size = 0;

  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  total_size += 1 * this->banner_size();
  for (int i = 0; i < this->banner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banner(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Video_CompanionAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Video_CompanionAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Video_CompanionAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Video_CompanionAd::MergeFrom(const BidRequest_Imp_Video_CompanionAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  banner_.MergeFrom(from.banner_);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Video_CompanionAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Video_CompanionAd::CopyFrom(const BidRequest_Imp_Video_CompanionAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Video_CompanionAd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->banner())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Video_CompanionAd::Swap(BidRequest_Imp_Video_CompanionAd* other) {
  if (other != this) {
    banner_.Swap(&other->banner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Video_CompanionAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Video_CompanionAd_descriptor_;
  metadata.reflection = BidRequest_Imp_Video_CompanionAd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Imp_Video::kMimesFieldNumber;
const int BidRequest_Imp_Video::kLinearityFieldNumber;
const int BidRequest_Imp_Video::kMindurationFieldNumber;
const int BidRequest_Imp_Video::kMaxdurationFieldNumber;
const int BidRequest_Imp_Video::kProtocolFieldNumber;
const int BidRequest_Imp_Video::kProtocolsFieldNumber;
const int BidRequest_Imp_Video::kWFieldNumber;
const int BidRequest_Imp_Video::kHFieldNumber;
const int BidRequest_Imp_Video::kStartdelayFieldNumber;
const int BidRequest_Imp_Video::kSequenceFieldNumber;
const int BidRequest_Imp_Video::kBattrFieldNumber;
const int BidRequest_Imp_Video::kMaxextendedFieldNumber;
const int BidRequest_Imp_Video::kMinbitrateFieldNumber;
const int BidRequest_Imp_Video::kMaxbitrateFieldNumber;
const int BidRequest_Imp_Video::kBoxingallowedFieldNumber;
const int BidRequest_Imp_Video::kPlaybackmethodFieldNumber;
const int BidRequest_Imp_Video::kDeliveryFieldNumber;
const int BidRequest_Imp_Video::kPosFieldNumber;
const int BidRequest_Imp_Video::kCompanionadFieldNumber;
const int BidRequest_Imp_Video::kCompanionad21FieldNumber;
const int BidRequest_Imp_Video::kApiFieldNumber;
const int BidRequest_Imp_Video::kCompaniontypeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Video::BidRequest_Imp_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Video)
}

void BidRequest_Imp_Video::InitAsDefaultInstance() {
  companionad_21_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd*>(&::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::default_instance());
}

BidRequest_Imp_Video::BidRequest_Imp_Video(const BidRequest_Imp_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Video)
}

void BidRequest_Imp_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  linearity_ = 1;
  minduration_ = 0;
  maxduration_ = 0;
  protocol_ = 1;
  w_ = 0;
  h_ = 0;
  startdelay_ = 0;
  sequence_ = 1;
  maxextended_ = 0;
  minbitrate_ = 0;
  maxbitrate_ = 0;
  boxingallowed_ = true;
  pos_ = 0;
  companionad_21_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Video::~BidRequest_Imp_Video() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Video)
  SharedDtor();
}

void BidRequest_Imp_Video::SharedDtor() {
  if (this != default_instance_) {
    delete companionad_21_;
  }
}

void BidRequest_Imp_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_descriptor_;
}

const BidRequest_Imp_Video& BidRequest_Imp_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Video* BidRequest_Imp_Video::default_instance_ = NULL;

BidRequest_Imp_Video* BidRequest_Imp_Video::New() const {
  return new BidRequest_Imp_Video;
}

void BidRequest_Imp_Video::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Imp_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 222) {
    ZR_(minduration_, maxduration_);
    ZR_(w_, h_);
    linearity_ = 1;
    protocol_ = 1;
  }
  if (_has_bits_[8 / 32] & 31488) {
    ZR_(maxextended_, maxbitrate_);
    startdelay_ = 0;
    sequence_ = 1;
    boxingallowed_ = true;
  }
  if (_has_bits_[16 / 32] & 655360) {
    pos_ = 0;
    if (has_companionad_21()) {
      if (companionad_21_ != NULL) companionad_21_->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  protocols_.Clear();
  battr_.Clear();
  playbackmethod_.Clear();
  delivery_.Clear();
  companionad_.Clear();
  api_.Clear();
  companiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mimes = 1;
      case 1: {
        if (tag == 10) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mimes;
        if (input->ExpectTag(16)) goto parse_linearity;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
      case 2: {
        if (tag == 16) {
         parse_linearity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity_IsValid(value)) {
            set_linearity(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minduration;
        break;
      }

      // optional int32 minduration = 3;
      case 3: {
        if (tag == 24) {
         parse_minduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minduration_)));
          set_has_minduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxduration;
        break;
      }

      // optional int32 maxduration = 4;
      case 4: {
        if (tag == 32) {
         parse_maxduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxduration_)));
          set_has_maxduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_protocol;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
      case 5: {
        if (tag == 40) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
            set_protocol(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_w;
        break;
      }

      // optional int32 w = 6;
      case 6: {
        if (tag == 48) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_h;
        break;
      }

      // optional int32 h = 7;
      case 7: {
        if (tag == 56) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_startdelay;
        break;
      }

      // optional int32 startdelay = 8;
      case 8: {
        if (tag == 64) {
         parse_startdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdelay_)));
          set_has_startdelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence;
        break;
      }

      // optional int32 sequence = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxextended;
        break;
      }

      // optional int32 maxextended = 11;
      case 11: {
        if (tag == 88) {
         parse_maxextended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxextended_)));
          set_has_maxextended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_minbitrate;
        break;
      }

      // optional int32 minbitrate = 12;
      case 12: {
        if (tag == 96) {
         parse_minbitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbitrate_)));
          set_has_minbitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxbitrate;
        break;
      }

      // optional int32 maxbitrate = 13;
      case 13: {
        if (tag == 104) {
         parse_maxbitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbitrate_)));
          set_has_maxbitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_boxingallowed;
        break;
      }

      // optional bool boxingallowed = 14 [default = true];
      case 14: {
        if (tag == 112) {
         parse_boxingallowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boxingallowed_)));
          set_has_boxingallowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_playbackmethod;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
      case 15: {
        if (tag == 122) {
         parse_playbackmethod:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value)) {
              add_playbackmethod(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 120) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value)) {
            add_playbackmethod(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_delivery;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_delivery:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value)) {
              add_delivery(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 128) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value)) {
            add_delivery(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_pos;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
      case 17: {
        if (tag == 136) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value)) {
            set_pos(static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_companionad;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
      case 18: {
        if (tag == 146) {
         parse_companionad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_companionad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_companionad;
        if (input->ExpectTag(154)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
      case 19: {
        if (tag == 154) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 152) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_companiontype;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
      case 20: {
        if (tag == 162) {
         parse_companiontype:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value)) {
              add_companiontype(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 160) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value)) {
            add_companiontype(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_protocols;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
      case 21: {
        if (tag == 170) {
         parse_protocols:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
              add_protocols(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 168) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
            add_protocols(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_companionad_21;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
      case 22: {
        if (tag == 178) {
         parse_companionad_21:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_companionad_21()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Video)
  return false;
#undef DO_
}

void BidRequest_Imp_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Video)
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mimes(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
  if (has_linearity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->linearity(), output);
  }

  // optional int32 minduration = 3;
  if (has_minduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minduration(), output);
  }

  // optional int32 maxduration = 4;
  if (has_maxduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxduration(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->protocol(), output);
  }

  // optional int32 w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->w(), output);
  }

  // optional int32 h = 7;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->h(), output);
  }

  // optional int32 startdelay = 8;
  if (has_startdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->startdelay(), output);
  }

  // optional int32 sequence = 9 [default = 1];
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sequence(), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // optional int32 maxextended = 11;
  if (has_maxextended()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxextended(), output);
  }

  // optional int32 minbitrate = 12;
  if (has_minbitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minbitrate(), output);
  }

  // optional int32 maxbitrate = 13;
  if (has_maxbitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxbitrate(), output);
  }

  // optional bool boxingallowed = 14 [default = true];
  if (has_boxingallowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->boxingallowed(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  if (this->playbackmethod_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_playbackmethod_cached_byte_size_);
  }
  for (int i = 0; i < this->playbackmethod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->playbackmethod(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  if (this->delivery_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_delivery_cached_byte_size_);
  }
  for (int i = 0; i < this->delivery_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->delivery(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->pos(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  for (int i = 0; i < this->companionad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->companionad(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  if (this->companiontype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_companiontype_cached_byte_size_);
  }
  for (int i = 0; i < this->companiontype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->companiontype(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  if (this->protocols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_protocols_cached_byte_size_);
  }
  for (int i = 0; i < this->protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->protocols(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
  if (has_companionad_21()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->companionad_21(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Video)
}

::google::protobuf::uint8* BidRequest_Imp_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Video)
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mimes(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
  if (has_linearity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->linearity(), target);
  }

  // optional int32 minduration = 3;
  if (has_minduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minduration(), target);
  }

  // optional int32 maxduration = 4;
  if (has_maxduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxduration(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->protocol(), target);
  }

  // optional int32 w = 6;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->w(), target);
  }

  // optional int32 h = 7;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->h(), target);
  }

  // optional int32 startdelay = 8;
  if (has_startdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->startdelay(), target);
  }

  // optional int32 sequence = 9 [default = 1];
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sequence(), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // optional int32 maxextended = 11;
  if (has_maxextended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxextended(), target);
  }

  // optional int32 minbitrate = 12;
  if (has_minbitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minbitrate(), target);
  }

  // optional int32 maxbitrate = 13;
  if (has_maxbitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxbitrate(), target);
  }

  // optional bool boxingallowed = 14 [default = true];
  if (has_boxingallowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->boxingallowed(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  if (this->playbackmethod_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _playbackmethod_cached_byte_size_, target);
  }
  for (int i = 0; i < this->playbackmethod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->playbackmethod(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  if (this->delivery_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _delivery_cached_byte_size_, target);
  }
  for (int i = 0; i < this->delivery_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->delivery(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->pos(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  for (int i = 0; i < this->companionad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->companionad(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  if (this->companiontype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _companiontype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->companiontype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->companiontype(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  if (this->protocols_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _protocols_cached_byte_size_, target);
  }
  for (int i = 0; i < this->protocols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->protocols(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
  if (has_companionad_21()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->companionad_21(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Video)
  return target;
}

int BidRequest_Imp_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
    if (has_linearity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->linearity());
    }

    // optional int32 minduration = 3;
    if (has_minduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minduration());
    }

    // optional int32 maxduration = 4;
    if (has_maxduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxduration());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 7;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 startdelay = 8;
    if (has_startdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdelay());
    }

    // optional int32 sequence = 9 [default = 1];
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int32 maxextended = 11;
    if (has_maxextended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxextended());
    }

    // optional int32 minbitrate = 12;
    if (has_minbitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbitrate());
    }

    // optional int32 maxbitrate = 13;
    if (has_maxbitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbitrate());
    }

    // optional bool boxingallowed = 14 [default = true];
    if (has_boxingallowed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
    if (has_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
    if (has_companionad_21()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->companionad_21());
    }

  }
  // repeated string mimes = 1;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->protocols_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->protocols(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _protocols_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playbackmethod_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->playbackmethod(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playbackmethod_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delivery_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->delivery(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delivery_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  total_size += 2 * this->companionad_size();
  for (int i = 0; i < this->companionad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companionad(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->companiontype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->companiontype(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _companiontype_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Video::MergeFrom(const BidRequest_Imp_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  protocols_.MergeFrom(from.protocols_);
  battr_.MergeFrom(from.battr_);
  playbackmethod_.MergeFrom(from.playbackmethod_);
  delivery_.MergeFrom(from.delivery_);
  companionad_.MergeFrom(from.companionad_);
  api_.MergeFrom(from.api_);
  companiontype_.MergeFrom(from.companiontype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_linearity()) {
      set_linearity(from.linearity());
    }
    if (from.has_minduration()) {
      set_minduration(from.minduration());
    }
    if (from.has_maxduration()) {
      set_maxduration(from.maxduration());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startdelay()) {
      set_startdelay(from.startdelay());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_maxextended()) {
      set_maxextended(from.maxextended());
    }
    if (from.has_minbitrate()) {
      set_minbitrate(from.minbitrate());
    }
    if (from.has_maxbitrate()) {
      set_maxbitrate(from.maxbitrate());
    }
    if (from.has_boxingallowed()) {
      set_boxingallowed(from.boxingallowed());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_companionad_21()) {
      mutable_companionad_21()->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::MergeFrom(from.companionad_21());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Video::CopyFrom(const BidRequest_Imp_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Video::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->companionad())) return false;
  if (has_companionad_21()) {
    if (!this->companionad_21().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Video::Swap(BidRequest_Imp_Video* other) {
  if (other != this) {
    mimes_.Swap(&other->mimes_);
    std::swap(linearity_, other->linearity_);
    std::swap(minduration_, other->minduration_);
    std::swap(maxduration_, other->maxduration_);
    std::swap(protocol_, other->protocol_);
    protocols_.Swap(&other->protocols_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(startdelay_, other->startdelay_);
    std::swap(sequence_, other->sequence_);
    battr_.Swap(&other->battr_);
    std::swap(maxextended_, other->maxextended_);
    std::swap(minbitrate_, other->minbitrate_);
    std::swap(maxbitrate_, other->maxbitrate_);
    std::swap(boxingallowed_, other->boxingallowed_);
    playbackmethod_.Swap(&other->playbackmethod_);
    delivery_.Swap(&other->delivery_);
    std::swap(pos_, other->pos_);
    companionad_.Swap(&other->companionad_);
    std::swap(companionad_21_, other->companionad_21_);
    api_.Swap(&other->api_);
    companiontype_.Swap(&other->companiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Video_descriptor_;
  metadata.reflection = BidRequest_Imp_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Imp_Native::kRequestFieldNumber;
const int BidRequest_Imp_Native::kRequestNativeFieldNumber;
const int BidRequest_Imp_Native::kVerFieldNumber;
const int BidRequest_Imp_Native::kApiFieldNumber;
const int BidRequest_Imp_Native::kBattrFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Native::BidRequest_Imp_Native()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::InitAsDefaultInstance() {
  BidRequest_Imp_Native_default_oneof_instance_->request_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
  BidRequest_Imp_Native_default_oneof_instance_->request_native_ = const_cast< ::com::google::openrtb::NativeRequest*>(&::com::google::openrtb::NativeRequest::default_instance());
}

BidRequest_Imp_Native::BidRequest_Imp_Native(const BidRequest_Imp_Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_request_oneof();
}

BidRequest_Imp_Native::~BidRequest_Imp_Native() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Native)
  SharedDtor();
}

void BidRequest_Imp_Native::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (has_request_oneof()) {
    clear_request_oneof();
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_descriptor_;
}

const BidRequest_Imp_Native& BidRequest_Imp_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native* BidRequest_Imp_Native::default_instance_ = NULL;

BidRequest_Imp_Native* BidRequest_Imp_Native::New() const {
  return new BidRequest_Imp_Native;
}

void BidRequest_Imp_Native::clear_request_oneof() {
  switch(request_oneof_case()) {
    case kRequest: {
      delete request_oneof_.request_;
      break;
    }
    case kRequestNative: {
      delete request_oneof_.request_native_;
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_ONEOF_NOT_SET;
}


void BidRequest_Imp_Native::Clear() {
  _extensions_.Clear();
  if (has_ver()) {
    if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ver_->clear();
    }
  }
  api_.Clear();
  battr_.Clear();
  clear_request_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request().data(), this->request().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ver;
        break;
      }

      // optional string ver = 2;
      case 2: {
        if (tag == 18) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_request_native;
        break;
      }

      // optional .com.google.openrtb.NativeRequest request_native = 50;
      case 50: {
        if (tag == 402) {
         parse_request_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Native)
  return false;
#undef DO_
}

void BidRequest_Imp_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Native)
  // optional string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request(), output);
  }

  // optional string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ver(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // optional .com.google.openrtb.NativeRequest request_native = 50;
  if (has_request_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->request_native(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Native)
}

::google::protobuf::uint8* BidRequest_Imp_Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Native)
  // optional string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request(), target);
  }

  // optional string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ver(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // optional .com.google.openrtb.NativeRequest request_native = 50;
  if (has_request_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->request_native(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Native)
  return target;
}

int BidRequest_Imp_Native::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

  }
  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (request_oneof_case()) {
    // optional string request = 1;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request());
      break;
    }
    // optional .com.google.openrtb.NativeRequest request_native = 50;
    case kRequestNative: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_native());
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native::MergeFrom(const BidRequest_Imp_Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  api_.MergeFrom(from.api_);
  battr_.MergeFrom(from.battr_);
  switch (from.request_oneof_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kRequestNative: {
      mutable_request_native()->::com::google::openrtb::NativeRequest::MergeFrom(from.request_native());
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native::CopyFrom(const BidRequest_Imp_Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native::IsInitialized() const {

  if (has_request_native()) {
    if (!this->request_native().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Native::Swap(BidRequest_Imp_Native* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    api_.Swap(&other->api_);
    battr_.Swap(&other->battr_);
    std::swap(request_oneof_, other->request_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_ = NULL;
#ifndef _MSC_VER
const int BidRequest_Imp_Pmp_Deal::kIdFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kBidfloorFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kBidfloorcurFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kWseatFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kWadomainFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kAtFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal(const BidRequest_Imp_Pmp_Deal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
  at_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp_Deal::~BidRequest_Imp_Pmp_Deal() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  SharedDtor();
}

void BidRequest_Imp_Pmp_Deal::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidfloorcur_ != _default_bidfloorcur_) {
    delete bidfloorcur_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_Deal_descriptor_;
}

const BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::default_instance_ = NULL;

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::New() const {
  return new BidRequest_Imp_Pmp_Deal;
}

void BidRequest_Imp_Pmp_Deal::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 39) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    bidfloor_ = 0;
    if (has_bidfloorcur()) {
      if (bidfloorcur_ != _default_bidfloorcur_) {
        bidfloorcur_->assign(*_default_bidfloorcur_);
      }
    }
    at_ = 1;
  }
  wseat_.Clear();
  wadomain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Pmp_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bidfloorcur;
        break;
      }

      // optional string bidfloorcur = 3 [default = "USD"];
      case 3: {
        if (tag == 26) {
         parse_bidfloorcur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 4;
      case 4: {
        if (tag == 34) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wseat;
        if (input->ExpectTag(42)) goto parse_wadomain;
        break;
      }

      // repeated string wadomain = 5;
      case 5: {
        if (tag == 42) {
         parse_wadomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wadomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wadomain(this->wadomain_size() - 1).data(),
            this->wadomain(this->wadomain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wadomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wadomain;
        if (input->ExpectTag(48)) goto parse_at;
        break;
      }

      // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
      case 6: {
        if (tag == 48) {
         parse_at:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_AuctionType_IsValid(value)) {
            set_at(static_cast< ::com::google::openrtb::BidRequest_AuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double bidfloor = 2 [default = 0];
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bidfloor(), output);
  }

  // optional string bidfloorcur = 3 [default = "USD"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidfloorcur(), output);
  }

  // repeated string wseat = 4;
  for (int i = 0; i < this->wseat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->wseat(i).data(), this->wseat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wseat(i), output);
  }

  // repeated string wadomain = 5;
  for (int i = 0; i < this->wadomain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->wadomain(i).data(), this->wadomain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "wadomain");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wadomain(i), output);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->at(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp_Deal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double bidfloor = 2 [default = 0];
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bidfloor(), target);
  }

  // optional string bidfloorcur = 3 [default = "USD"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidfloorcur(), target);
  }

  // repeated string wseat = 4;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->wseat(i), target);
  }

  // repeated string wadomain = 5;
  for (int i = 0; i < this->wadomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wadomain(i).data(), this->wadomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wadomain");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wadomain(i), target);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->at(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return target;
}

int BidRequest_Imp_Pmp_Deal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double bidfloor = 2 [default = 0];
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

    // optional string bidfloorcur = 3 [default = "USD"];
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

    // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->at());
    }

  }
  // repeated string wseat = 4;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  // repeated string wadomain = 5;
  total_size += 1 * this->wadomain_size();
  for (int i = 0; i < this->wadomain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wadomain(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Pmp_Deal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Pmp_Deal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const BidRequest_Imp_Pmp_Deal& from) {
  GOOGLE_CHECK_NE(&from, this);
  wseat_.MergeFrom(from.wseat_);
  wadomain_.MergeFrom(from.wadomain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_bidfloorcur()) {
      set_bidfloorcur(from.bidfloorcur());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const BidRequest_Imp_Pmp_Deal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp_Deal::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Pmp_Deal::Swap(BidRequest_Imp_Pmp_Deal* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(bidfloorcur_, other->bidfloorcur_);
    wseat_.Swap(&other->wseat_);
    wadomain_.Swap(&other->wadomain_);
    std::swap(at_, other->at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Pmp_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_Deal_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Imp_Pmp::kPrivateAuctionFieldNumber;
const int BidRequest_Imp_Pmp::kDealsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp(const BidRequest_Imp_Pmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::SharedCtor() {
  _cached_size_ = 0;
  private_auction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp::~BidRequest_Imp_Pmp() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Pmp)
  SharedDtor();
}

void BidRequest_Imp_Pmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_descriptor_;
}

const BidRequest_Imp_Pmp& BidRequest_Imp_Pmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::default_instance_ = NULL;

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::New() const {
  return new BidRequest_Imp_Pmp;
}

void BidRequest_Imp_Pmp::Clear() {
  _extensions_.Clear();
  private_auction_ = false;
  deals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Pmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Pmp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool private_auction = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private_auction_)));
          set_has_private_auction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deals;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
      case 2: {
        if (tag == 18) {
         parse_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Pmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Pmp)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Pmp)
  // optional bool private_auction = 1;
  if (has_private_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->private_auction(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  for (int i = 0; i < this->deals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deals(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Pmp)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Pmp)
  // optional bool private_auction = 1;
  if (has_private_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->private_auction(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  for (int i = 0; i < this->deals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deals(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Pmp)
  return target;
}

int BidRequest_Imp_Pmp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool private_auction = 1;
    if (has_private_auction()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  total_size += 1 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Pmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Pmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp::MergeFrom(const BidRequest_Imp_Pmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  deals_.MergeFrom(from.deals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_auction()) {
      set_private_auction(from.private_auction());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Pmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp::CopyFrom(const BidRequest_Imp_Pmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->deals())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Pmp::Swap(BidRequest_Imp_Pmp* other) {
  if (other != this) {
    std::swap(private_auction_, other->private_auction_);
    deals_.Swap(&other->deals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Pmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidRequest_Imp::_default_bidfloorcur_ = NULL;
#ifndef _MSC_VER
const int BidRequest_Imp::kIdFieldNumber;
const int BidRequest_Imp::kBannerFieldNumber;
const int BidRequest_Imp::kVideoFieldNumber;
const int BidRequest_Imp::kDisplaymanagerFieldNumber;
const int BidRequest_Imp::kDisplaymanagerverFieldNumber;
const int BidRequest_Imp::kInstlFieldNumber;
const int BidRequest_Imp::kTagidFieldNumber;
const int BidRequest_Imp::kBidfloorFieldNumber;
const int BidRequest_Imp::kBidfloorcurFieldNumber;
const int BidRequest_Imp::kSecureFieldNumber;
const int BidRequest_Imp::kIframebusterFieldNumber;
const int BidRequest_Imp::kPmpFieldNumber;
const int BidRequest_Imp::kNativeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp::BidRequest_Imp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp)
}

void BidRequest_Imp::InitAsDefaultInstance() {
  banner_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Banner*>(&::com::google::openrtb::BidRequest_Imp_Banner::default_instance());
  video_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video*>(&::com::google::openrtb::BidRequest_Imp_Video::default_instance());
  pmp_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Pmp*>(&::com::google::openrtb::BidRequest_Imp_Pmp::default_instance());
  native_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Native*>(&::com::google::openrtb::BidRequest_Imp_Native::default_instance());
}

BidRequest_Imp::BidRequest_Imp(const BidRequest_Imp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp)
}

void BidRequest_Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = NULL;
  video_ = NULL;
  displaymanager_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaymanagerver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instl_ = false;
  tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
  secure_ = false;
  pmp_ = NULL;
  native_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp::~BidRequest_Imp() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp)
  SharedDtor();
}

void BidRequest_Imp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (displaymanager_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaymanager_;
  }
  if (displaymanagerver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaymanagerver_;
  }
  if (tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagid_;
  }
  if (bidfloorcur_ != _default_bidfloorcur_) {
    delete bidfloorcur_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete video_;
    delete pmp_;
    delete native_;
  }
}

void BidRequest_Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_descriptor_;
}

const BidRequest_Imp& BidRequest_Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp* BidRequest_Imp::default_instance_ = NULL;

BidRequest_Imp* BidRequest_Imp::New() const {
  return new BidRequest_Imp;
}

void BidRequest_Imp::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 255) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::com::google::openrtb::BidRequest_Imp_Banner::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::com::google::openrtb::BidRequest_Imp_Video::Clear();
    }
    if (has_displaymanager()) {
      if (displaymanager_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displaymanager_->clear();
      }
    }
    if (has_displaymanagerver()) {
      if (displaymanagerver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displaymanagerver_->clear();
      }
    }
    instl_ = false;
    if (has_tagid()) {
      if (tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tagid_->clear();
      }
    }
    bidfloor_ = 0;
  }
  if (_has_bits_[8 / 32] & 6912) {
    if (has_bidfloorcur()) {
      if (bidfloorcur_ != _default_bidfloorcur_) {
        bidfloorcur_->assign(*_default_bidfloorcur_);
      }
    }
    secure_ = false;
    if (has_pmp()) {
      if (pmp_ != NULL) pmp_->::com::google::openrtb::BidRequest_Imp_Pmp::Clear();
    }
    if (has_native()) {
      if (native_ != NULL) native_->::com::google::openrtb::BidRequest_Imp_Native::Clear();
    }
  }
  iframebuster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
      case 3: {
        if (tag == 26) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_displaymanager;
        break;
      }

      // optional string displaymanager = 4;
      case 4: {
        if (tag == 34) {
         parse_displaymanager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymanager()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymanager().data(), this->displaymanager().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "displaymanager");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_displaymanagerver;
        break;
      }

      // optional string displaymanagerver = 5;
      case 5: {
        if (tag == 42) {
         parse_displaymanagerver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymanagerver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymanagerver().data(), this->displaymanagerver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "displaymanagerver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_instl;
        break;
      }

      // optional bool instl = 6;
      case 6: {
        if (tag == 48) {
         parse_instl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instl_)));
          set_has_instl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tagid;
        break;
      }

      // optional string tagid = 7;
      case 7: {
        if (tag == 58) {
         parse_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagid().data(), this->tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bidfloorcur;
        break;
      }

      // optional string bidfloorcur = 9 [default = "USD"];
      case 9: {
        if (tag == 74) {
         parse_bidfloorcur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_iframebuster;
        break;
      }

      // repeated string iframebuster = 10;
      case 10: {
        if (tag == 82) {
         parse_iframebuster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iframebuster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iframebuster(this->iframebuster_size() - 1).data(),
            this->iframebuster(this->iframebuster_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iframebuster");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_iframebuster;
        if (input->ExpectTag(90)) goto parse_pmp;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
      case 11: {
        if (tag == 90) {
         parse_pmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_secure;
        break;
      }

      // optional bool secure = 12;
      case 12: {
        if (tag == 96) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_native;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
      case 13: {
        if (tag == 106) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp)
  return false;
#undef DO_
}

void BidRequest_Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->video(), output);
  }

  // optional string displaymanager = 4;
  if (has_displaymanager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanager().data(), this->displaymanager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymanager");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->displaymanager(), output);
  }

  // optional string displaymanagerver = 5;
  if (has_displaymanagerver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanagerver().data(), this->displaymanagerver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymanagerver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->displaymanagerver(), output);
  }

  // optional bool instl = 6;
  if (has_instl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->instl(), output);
  }

  // optional string tagid = 7;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tagid(), output);
  }

  // optional double bidfloor = 8 [default = 0];
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->bidfloor(), output);
  }

  // optional string bidfloorcur = 9 [default = "USD"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bidfloorcur(), output);
  }

  // repeated string iframebuster = 10;
  for (int i = 0; i < this->iframebuster_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->iframebuster(i).data(), this->iframebuster(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "iframebuster");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->iframebuster(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
  if (has_pmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pmp(), output);
  }

  // optional bool secure = 12;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->secure(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->native(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp)
}

::google::protobuf::uint8* BidRequest_Imp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->video(), target);
  }

  // optional string displaymanager = 4;
  if (has_displaymanager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanager().data(), this->displaymanager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymanager");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->displaymanager(), target);
  }

  // optional string displaymanagerver = 5;
  if (has_displaymanagerver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanagerver().data(), this->displaymanagerver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymanagerver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->displaymanagerver(), target);
  }

  // optional bool instl = 6;
  if (has_instl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->instl(), target);
  }

  // optional string tagid = 7;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tagid(), target);
  }

  // optional double bidfloor = 8 [default = 0];
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->bidfloor(), target);
  }

  // optional string bidfloorcur = 9 [default = "USD"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bidfloorcur(), target);
  }

  // repeated string iframebuster = 10;
  for (int i = 0; i < this->iframebuster_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iframebuster(i).data(), this->iframebuster(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iframebuster");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->iframebuster(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
  if (has_pmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pmp(), target);
  }

  // optional bool secure = 12;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->secure(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->native(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp)
  return target;
}

int BidRequest_Imp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional string displaymanager = 4;
    if (has_displaymanager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymanager());
    }

    // optional string displaymanagerver = 5;
    if (has_displaymanagerver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymanagerver());
    }

    // optional bool instl = 6;
    if (has_instl()) {
      total_size += 1 + 1;
    }

    // optional string tagid = 7;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagid());
    }

    // optional double bidfloor = 8 [default = 0];
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bidfloorcur = 9 [default = "USD"];
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

    // optional bool secure = 12;
    if (has_secure()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
    if (has_pmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pmp());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native());
    }

  }
  // repeated string iframebuster = 10;
  total_size += 1 * this->iframebuster_size();
  for (int i = 0; i < this->iframebuster_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iframebuster(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp::MergeFrom(const BidRequest_Imp& from) {
  GOOGLE_CHECK_NE(&from, this);
  iframebuster_.MergeFrom(from.iframebuster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_banner()) {
      mutable_banner()->::com::google::openrtb::BidRequest_Imp_Banner::MergeFrom(from.banner());
    }
    if (from.has_video()) {
      mutable_video()->::com::google::openrtb::BidRequest_Imp_Video::MergeFrom(from.video());
    }
    if (from.has_displaymanager()) {
      set_displaymanager(from.displaymanager());
    }
    if (from.has_displaymanagerver()) {
      set_displaymanagerver(from.displaymanagerver());
    }
    if (from.has_instl()) {
      set_instl(from.instl());
    }
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidfloorcur()) {
      set_bidfloorcur(from.bidfloorcur());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
    if (from.has_pmp()) {
      mutable_pmp()->::com::google::openrtb::BidRequest_Imp_Pmp::MergeFrom(from.pmp());
    }
    if (from.has_native()) {
      mutable_native()->::com::google::openrtb::BidRequest_Imp_Native::MergeFrom(from.native());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp::CopyFrom(const BidRequest_Imp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_banner()) {
    if (!this->banner().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_pmp()) {
    if (!this->pmp().IsInitialized()) return false;
  }
  if (has_native()) {
    if (!this->native().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp::Swap(BidRequest_Imp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(banner_, other->banner_);
    std::swap(video_, other->video_);
    std::swap(displaymanager_, other->displaymanager_);
    std::swap(displaymanagerver_, other->displaymanagerver_);
    std::swap(instl_, other->instl_);
    std::swap(tagid_, other->tagid_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(bidfloorcur_, other->bidfloorcur_);
    std::swap(secure_, other->secure_);
    iframebuster_.Swap(&other->iframebuster_);
    std::swap(pmp_, other->pmp_);
    std::swap(native_, other->native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_descriptor_;
  metadata.reflection = BidRequest_Imp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Site::kIdFieldNumber;
const int BidRequest_Site::kNameFieldNumber;
const int BidRequest_Site::kDomainFieldNumber;
const int BidRequest_Site::kCatFieldNumber;
const int BidRequest_Site::kSectioncatFieldNumber;
const int BidRequest_Site::kPagecatFieldNumber;
const int BidRequest_Site::kPageFieldNumber;
const int BidRequest_Site::kPrivacypolicyFieldNumber;
const int BidRequest_Site::kRefFieldNumber;
const int BidRequest_Site::kSearchFieldNumber;
const int BidRequest_Site::kPublisherFieldNumber;
const int BidRequest_Site::kContentFieldNumber;
const int BidRequest_Site::kKeywordsFieldNumber;
const int BidRequest_Site::kMobileFieldNumber;
#endif  // !_MSC_VER

BidRequest_Site::BidRequest_Site()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Site)
}

void BidRequest_Site::InitAsDefaultInstance() {
  publisher_ = const_cast< ::com::google::openrtb::BidRequest_Publisher*>(&::com::google::openrtb::BidRequest_Publisher::default_instance());
  content_ = const_cast< ::com::google::openrtb::BidRequest_Content*>(&::com::google::openrtb::BidRequest_Content::default_instance());
}

BidRequest_Site::BidRequest_Site(const BidRequest_Site& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Site)
}

void BidRequest_Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacypolicy_ = false;
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_ = NULL;
  content_ = NULL;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Site::~BidRequest_Site() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Site)
  SharedDtor();
}

void BidRequest_Site::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_;
  }
  if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_;
  }
  if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (this != default_instance_) {
    delete publisher_;
    delete content_;
  }
}

void BidRequest_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Site_descriptor_;
}

const BidRequest_Site& BidRequest_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Site* BidRequest_Site::default_instance_ = NULL;

BidRequest_Site* BidRequest_Site::New() const {
  return new BidRequest_Site;
}

void BidRequest_Site::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 199) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_page()) {
      if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_->clear();
      }
    }
    privacypolicy_ = false;
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_->clear();
      }
    }
    if (has_search()) {
      if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_->clear();
      }
    }
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    mobile_ = false;
  }
  cat_.Clear();
  sectioncat_.Clear();
  pagecat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        break;
      }

      // repeated string cat = 4;
      case 4: {
        if (tag == 34) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        if (input->ExpectTag(42)) goto parse_sectioncat;
        break;
      }

      // repeated string sectioncat = 5;
      case 5: {
        if (tag == 42) {
         parse_sectioncat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sectioncat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sectioncat(this->sectioncat_size() - 1).data(),
            this->sectioncat(this->sectioncat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sectioncat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sectioncat;
        if (input->ExpectTag(50)) goto parse_pagecat;
        break;
      }

      // repeated string pagecat = 6;
      case 6: {
        if (tag == 50) {
         parse_pagecat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pagecat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagecat(this->pagecat_size() - 1).data(),
            this->pagecat(this->pagecat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pagecat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pagecat;
        if (input->ExpectTag(58)) goto parse_page;
        break;
      }

      // optional string page = 7;
      case 7: {
        if (tag == 58) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_privacypolicy;
        break;
      }

      // optional bool privacypolicy = 8;
      case 8: {
        if (tag == 64) {
         parse_privacypolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacypolicy_)));
          set_has_privacypolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ref;
        break;
      }

      // optional string ref = 9;
      case 9: {
        if (tag == 74) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_search;
        break;
      }

      // optional string search = 10;
      case 10: {
        if (tag == 82) {
         parse_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content content = 12;
      case 12: {
        if (tag == 98) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // optional string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mobile;
        break;
      }

      // optional bool mobile = 15;
      case 15: {
        if (tag == 120) {
         parse_mobile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Site)
  return false;
#undef DO_
}

void BidRequest_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Site)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cat(i), output);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sectioncat(i).data(), this->sectioncat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sectioncat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sectioncat(i), output);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pagecat(i).data(), this->pagecat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pagecat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pagecat(i), output);
  }

  // optional string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page(), output);
  }

  // optional bool privacypolicy = 8;
  if (has_privacypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->privacypolicy(), output);
  }

  // optional string ref = 9;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ref(), output);
  }

  // optional string search = 10;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->search(), output);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->publisher(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->content(), output);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->keywords(), output);
  }

  // optional bool mobile = 15;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->mobile(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Site)
}

::google::protobuf::uint8* BidRequest_Site::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Site)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->cat(i), target);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sectioncat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->sectioncat(i), target);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pagecat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->pagecat(i), target);
  }

  // optional string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page(), target);
  }

  // optional bool privacypolicy = 8;
  if (has_privacypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->privacypolicy(), target);
  }

  // optional string ref = 9;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ref(), target);
  }

  // optional string search = 10;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->search(), target);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->publisher(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->content(), target);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->keywords(), target);
  }

  // optional bool mobile = 15;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->mobile(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Site)
  return target;
}

int BidRequest_Site::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string page = 7;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional bool privacypolicy = 8;
    if (has_privacypolicy()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ref = 9;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string search = 10;
    if (has_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search());
    }

    // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher());
    }

    // optional .com.google.openrtb.BidRequest.Content content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string keywords = 13;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional bool mobile = 15;
    if (has_mobile()) {
      total_size += 1 + 1;
    }

  }
  // repeated string cat = 4;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated string sectioncat = 5;
  total_size += 1 * this->sectioncat_size();
  for (int i = 0; i < this->sectioncat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sectioncat(i));
  }

  // repeated string pagecat = 6;
  total_size += 1 * this->pagecat_size();
  for (int i = 0; i < this->pagecat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pagecat(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Site::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Site* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Site*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Site::MergeFrom(const BidRequest_Site& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  sectioncat_.MergeFrom(from.sectioncat_);
  pagecat_.MergeFrom(from.pagecat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_privacypolicy()) {
      set_privacypolicy(from.privacypolicy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::com::google::openrtb::BidRequest_Publisher::MergeFrom(from.publisher());
    }
    if (from.has_content()) {
      mutable_content()->::com::google::openrtb::BidRequest_Content::MergeFrom(from.content());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Site::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Site::CopyFrom(const BidRequest_Site& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Site::IsInitialized() const {

  if (has_publisher()) {
    if (!this->publisher().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Site::Swap(BidRequest_Site* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    cat_.Swap(&other->cat_);
    sectioncat_.Swap(&other->sectioncat_);
    pagecat_.Swap(&other->pagecat_);
    std::swap(page_, other->page_);
    std::swap(privacypolicy_, other->privacypolicy_);
    std::swap(ref_, other->ref_);
    std::swap(search_, other->search_);
    std::swap(publisher_, other->publisher_);
    std::swap(content_, other->content_);
    std::swap(keywords_, other->keywords_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Site_descriptor_;
  metadata.reflection = BidRequest_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_App::kIdFieldNumber;
const int BidRequest_App::kNameFieldNumber;
const int BidRequest_App::kDomainFieldNumber;
const int BidRequest_App::kCatFieldNumber;
const int BidRequest_App::kSectioncatFieldNumber;
const int BidRequest_App::kPagecatFieldNumber;
const int BidRequest_App::kVerFieldNumber;
const int BidRequest_App::kBundleFieldNumber;
const int BidRequest_App::kPrivacypolicyFieldNumber;
const int BidRequest_App::kPaidFieldNumber;
const int BidRequest_App::kPublisherFieldNumber;
const int BidRequest_App::kContentFieldNumber;
const int BidRequest_App::kKeywordsFieldNumber;
const int BidRequest_App::kStoreurlFieldNumber;
#endif  // !_MSC_VER

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.App)
}

void BidRequest_App::InitAsDefaultInstance() {
  publisher_ = const_cast< ::com::google::openrtb::BidRequest_Publisher*>(&::com::google::openrtb::BidRequest_Publisher::default_instance());
  content_ = const_cast< ::com::google::openrtb::BidRequest_Content*>(&::com::google::openrtb::BidRequest_Content::default_instance());
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.App)
}

void BidRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacypolicy_ = false;
  paid_ = false;
  publisher_ = NULL;
  content_ = NULL;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.App)
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (this != default_instance_) {
    delete publisher_;
    delete content_;
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New() const {
  return new BidRequest_App;
}

void BidRequest_App::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_App*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 199) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(privacypolicy_, paid_);
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_storeurl()) {
      if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storeurl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cat_.Clear();
  sectioncat_.Clear();
  pagecat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        break;
      }

      // repeated string cat = 4;
      case 4: {
        if (tag == 34) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        if (input->ExpectTag(42)) goto parse_sectioncat;
        break;
      }

      // repeated string sectioncat = 5;
      case 5: {
        if (tag == 42) {
         parse_sectioncat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sectioncat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sectioncat(this->sectioncat_size() - 1).data(),
            this->sectioncat(this->sectioncat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sectioncat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sectioncat;
        if (input->ExpectTag(50)) goto parse_pagecat;
        break;
      }

      // repeated string pagecat = 6;
      case 6: {
        if (tag == 50) {
         parse_pagecat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pagecat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagecat(this->pagecat_size() - 1).data(),
            this->pagecat(this->pagecat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pagecat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pagecat;
        if (input->ExpectTag(58)) goto parse_ver;
        break;
      }

      // optional string ver = 7;
      case 7: {
        if (tag == 58) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bundle;
        break;
      }

      // optional string bundle = 8;
      case 8: {
        if (tag == 66) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_privacypolicy;
        break;
      }

      // optional bool privacypolicy = 9;
      case 9: {
        if (tag == 72) {
         parse_privacypolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacypolicy_)));
          set_has_privacypolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_paid;
        break;
      }

      // optional bool paid = 10;
      case 10: {
        if (tag == 80) {
         parse_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paid_)));
          set_has_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content content = 12;
      case 12: {
        if (tag == 98) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // optional string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 16;
      case 16: {
        if (tag == 130) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.App)
  return false;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cat(i), output);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sectioncat(i).data(), this->sectioncat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sectioncat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sectioncat(i), output);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pagecat(i).data(), this->pagecat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pagecat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pagecat(i), output);
  }

  // optional string ver = 7;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ver(), output);
  }

  // optional string bundle = 8;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bundle(), output);
  }

  // optional bool privacypolicy = 9;
  if (has_privacypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->privacypolicy(), output);
  }

  // optional bool paid = 10;
  if (has_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->paid(), output);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->publisher(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->content(), output);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->keywords(), output);
  }

  // optional string storeurl = 16;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->storeurl(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.App)
}

::google::protobuf::uint8* BidRequest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->cat(i), target);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sectioncat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->sectioncat(i), target);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pagecat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->pagecat(i), target);
  }

  // optional string ver = 7;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ver(), target);
  }

  // optional string bundle = 8;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bundle(), target);
  }

  // optional bool privacypolicy = 9;
  if (has_privacypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->privacypolicy(), target);
  }

  // optional bool paid = 10;
  if (has_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->paid(), target);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->publisher(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->content(), target);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->keywords(), target);
  }

  // optional string storeurl = 16;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->storeurl(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.App)
  return target;
}

int BidRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string ver = 7;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional string bundle = 8;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool privacypolicy = 9;
    if (has_privacypolicy()) {
      total_size += 1 + 1;
    }

    // optional bool paid = 10;
    if (has_paid()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher());
    }

    // optional .com.google.openrtb.BidRequest.Content content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string keywords = 13;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string storeurl = 16;
    if (has_storeurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

  }
  // repeated string cat = 4;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated string sectioncat = 5;
  total_size += 1 * this->sectioncat_size();
  for (int i = 0; i < this->sectioncat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sectioncat(i));
  }

  // repeated string pagecat = 6;
  total_size += 1 * this->pagecat_size();
  for (int i = 0; i < this->pagecat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pagecat(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  sectioncat_.MergeFrom(from.sectioncat_);
  pagecat_.MergeFrom(from.pagecat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_privacypolicy()) {
      set_privacypolicy(from.privacypolicy());
    }
    if (from.has_paid()) {
      set_paid(from.paid());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::com::google::openrtb::BidRequest_Publisher::MergeFrom(from.publisher());
    }
    if (from.has_content()) {
      mutable_content()->::com::google::openrtb::BidRequest_Content::MergeFrom(from.content());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_storeurl()) {
      set_storeurl(from.storeurl());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  if (has_publisher()) {
    if (!this->publisher().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    cat_.Swap(&other->cat_);
    sectioncat_.Swap(&other->sectioncat_);
    pagecat_.Swap(&other->pagecat_);
    std::swap(ver_, other->ver_);
    std::swap(bundle_, other->bundle_);
    std::swap(privacypolicy_, other->privacypolicy_);
    std::swap(paid_, other->paid_);
    std::swap(publisher_, other->publisher_);
    std::swap(content_, other->content_);
    std::swap(keywords_, other->keywords_);
    std::swap(storeurl_, other->storeurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Publisher::kIdFieldNumber;
const int BidRequest_Publisher::kNameFieldNumber;
const int BidRequest_Publisher::kCatFieldNumber;
const int BidRequest_Publisher::kDomainFieldNumber;
#endif  // !_MSC_VER

BidRequest_Publisher::BidRequest_Publisher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Publisher)
}

void BidRequest_Publisher::InitAsDefaultInstance() {
}

BidRequest_Publisher::BidRequest_Publisher(const BidRequest_Publisher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Publisher)
}

void BidRequest_Publisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Publisher::~BidRequest_Publisher() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Publisher)
  SharedDtor();
}

void BidRequest_Publisher::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Publisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Publisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Publisher_descriptor_;
}

const BidRequest_Publisher& BidRequest_Publisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Publisher* BidRequest_Publisher::default_instance_ = NULL;

BidRequest_Publisher* BidRequest_Publisher::New() const {
  return new BidRequest_Publisher;
}

void BidRequest_Publisher::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 11) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Publisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // repeated string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Publisher)
  return false;
#undef DO_
}

void BidRequest_Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Publisher)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cat(i), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Publisher)
}

::google::protobuf::uint8* BidRequest_Publisher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Publisher)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cat(i), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Publisher)
  return target;
}

int BidRequest_Publisher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  // repeated string cat = 3;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Publisher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Publisher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Publisher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Publisher::MergeFrom(const BidRequest_Publisher& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Publisher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Publisher::CopyFrom(const BidRequest_Publisher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Publisher::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Publisher::Swap(BidRequest_Publisher* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    cat_.Swap(&other->cat_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Publisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Publisher_descriptor_;
  metadata.reflection = BidRequest_Publisher_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Content_VideoQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_VideoQuality_descriptor_;
}
bool BidRequest_Content_VideoQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Content_VideoQuality BidRequest_Content::QUALITY_UNKNOWN;
const BidRequest_Content_VideoQuality BidRequest_Content::PROFESSIONAL;
const BidRequest_Content_VideoQuality BidRequest_Content::PROSUMER;
const BidRequest_Content_VideoQuality BidRequest_Content::USER_GENERATED;
const BidRequest_Content_VideoQuality BidRequest_Content::VideoQuality_MIN;
const BidRequest_Content_VideoQuality BidRequest_Content::VideoQuality_MAX;
const int BidRequest_Content::VideoQuality_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Content_ContentContext_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_ContentContext_descriptor_;
}
bool BidRequest_Content_ContentContext_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Content_ContentContext BidRequest_Content::VIDEO;
const BidRequest_Content_ContentContext BidRequest_Content::GAME;
const BidRequest_Content_ContentContext BidRequest_Content::MUSIC;
const BidRequest_Content_ContentContext BidRequest_Content::APPLICATION;
const BidRequest_Content_ContentContext BidRequest_Content::TEXT;
const BidRequest_Content_ContentContext BidRequest_Content::OTHER;
const BidRequest_Content_ContentContext BidRequest_Content::CONTEXT_UNKNOWN;
const BidRequest_Content_ContentContext BidRequest_Content::ContentContext_MIN;
const BidRequest_Content_ContentContext BidRequest_Content::ContentContext_MAX;
const int BidRequest_Content::ContentContext_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Content_QAGMediaRating_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_QAGMediaRating_descriptor_;
}
bool BidRequest_Content_QAGMediaRating_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Content_QAGMediaRating BidRequest_Content::ALL_AUDIENCES;
const BidRequest_Content_QAGMediaRating BidRequest_Content::EVERYONE_OVER_12;
const BidRequest_Content_QAGMediaRating BidRequest_Content::MATURE;
const BidRequest_Content_QAGMediaRating BidRequest_Content::QAGMediaRating_MIN;
const BidRequest_Content_QAGMediaRating BidRequest_Content::QAGMediaRating_MAX;
const int BidRequest_Content::QAGMediaRating_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Content::kIdFieldNumber;
const int BidRequest_Content::kEpisodeFieldNumber;
const int BidRequest_Content::kTitleFieldNumber;
const int BidRequest_Content::kSeriesFieldNumber;
const int BidRequest_Content::kSeasonFieldNumber;
const int BidRequest_Content::kUrlFieldNumber;
const int BidRequest_Content::kCatFieldNumber;
const int BidRequest_Content::kVideoqualityFieldNumber;
const int BidRequest_Content::kKeywordsFieldNumber;
const int BidRequest_Content::kContentratingFieldNumber;
const int BidRequest_Content::kUserratingFieldNumber;
const int BidRequest_Content::kContextFieldNumber;
const int BidRequest_Content::kContext22FieldNumber;
const int BidRequest_Content::kLivestreamFieldNumber;
const int BidRequest_Content::kSourcerelationshipFieldNumber;
const int BidRequest_Content::kProducerFieldNumber;
const int BidRequest_Content::kLenFieldNumber;
const int BidRequest_Content::kQagmediaratingFieldNumber;
const int BidRequest_Content::kEmbeddableFieldNumber;
const int BidRequest_Content::kLanguageFieldNumber;
#endif  // !_MSC_VER

BidRequest_Content::BidRequest_Content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Content)
}

void BidRequest_Content::InitAsDefaultInstance() {
  producer_ = const_cast< ::com::google::openrtb::BidRequest_Producer*>(&::com::google::openrtb::BidRequest_Producer::default_instance());
}

BidRequest_Content::BidRequest_Content(const BidRequest_Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Content)
}

void BidRequest_Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  episode_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  season_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoquality_ = 0;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = 1;
  context_22_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livestream_ = false;
  sourcerelationship_ = false;
  producer_ = NULL;
  len_ = 0;
  qagmediarating_ = 1;
  embeddable_ = false;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Content::~BidRequest_Content() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Content)
  SharedDtor();
}

void BidRequest_Content::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete series_;
  }
  if (season_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete season_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentrating_;
  }
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrating_;
  }
  if (context_22_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_22_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (this != default_instance_) {
    delete producer_;
  }
}

void BidRequest_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_descriptor_;
}

const BidRequest_Content& BidRequest_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Content* BidRequest_Content::default_instance_ = NULL;

BidRequest_Content* BidRequest_Content::New() const {
  return new BidRequest_Content;
}

void BidRequest_Content::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Content*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(episode_, videoquality_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_series()) {
      if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        series_->clear();
      }
    }
    if (has_season()) {
      if (season_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        season_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(livestream_, sourcerelationship_);
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_contentrating()) {
      if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contentrating_->clear();
      }
    }
    if (has_userrating()) {
      if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userrating_->clear();
      }
    }
    context_ = 1;
    if (has_context_22()) {
      if (context_22_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_22_->clear();
      }
    }
    if (has_producer()) {
      if (producer_ != NULL) producer_->::com::google::openrtb::BidRequest_Producer::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    len_ = 0;
    qagmediarating_ = 1;
    embeddable_ = false;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_episode;
        break;
      }

      // optional int32 episode = 2;
      case 2: {
        if (tag == 16) {
         parse_episode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
          set_has_episode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_series;
        break;
      }

      // optional string series = 4;
      case 4: {
        if (tag == 34) {
         parse_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_series()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->series().data(), this->series().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "series");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_season;
        break;
      }

      // optional string season = 5;
      case 5: {
        if (tag == 42) {
         parse_season:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->season().data(), this->season().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "season");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        break;
      }

      // repeated string cat = 7;
      case 7: {
        if (tag == 58) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        if (input->ExpectTag(64)) goto parse_videoquality;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
      case 8: {
        if (tag == 64) {
         parse_videoquality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_VideoQuality_IsValid(value)) {
            set_videoquality(static_cast< ::com::google::openrtb::BidRequest_Content_VideoQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_keywords;
        break;
      }

      // optional string keywords = 9;
      case 9: {
        if (tag == 74) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_contentrating;
        break;
      }

      // optional string contentrating = 10;
      case 10: {
        if (tag == 82) {
         parse_contentrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentrating().data(), this->contentrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contentrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_userrating;
        break;
      }

      // optional string userrating = 11;
      case 11: {
        if (tag == 90) {
         parse_userrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userrating().data(), this->userrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_context_22;
        break;
      }

      // optional string context_22 = 12;
      case 12: {
        if (tag == 98) {
         parse_context_22:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context_22()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context_22().data(), this->context_22().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "context_22");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_livestream;
        break;
      }

      // optional bool livestream = 13;
      case 13: {
        if (tag == 104) {
         parse_livestream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &livestream_)));
          set_has_livestream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sourcerelationship;
        break;
      }

      // optional bool sourcerelationship = 14;
      case 14: {
        if (tag == 112) {
         parse_sourcerelationship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sourcerelationship_)));
          set_has_sourcerelationship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_producer;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Producer producer = 15;
      case 15: {
        if (tag == 122) {
         parse_producer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_producer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_len;
        break;
      }

      // optional int32 len = 16;
      case 16: {
        if (tag == 128) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_qagmediarating;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
      case 17: {
        if (tag == 136) {
         parse_qagmediarating:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_QAGMediaRating_IsValid(value)) {
            set_qagmediarating(static_cast< ::com::google::openrtb::BidRequest_Content_QAGMediaRating >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_embeddable;
        break;
      }

      // optional bool embeddable = 18;
      case 18: {
        if (tag == 144) {
         parse_embeddable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &embeddable_)));
          set_has_embeddable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_language;
        break;
      }

      // optional string language = 19;
      case 19: {
        if (tag == 154) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_context;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
      case 20: {
        if (tag == 160) {
         parse_context:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_ContentContext_IsValid(value)) {
            set_context(static_cast< ::com::google::openrtb::BidRequest_Content_ContentContext >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Content)
  return false;
#undef DO_
}

void BidRequest_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Content)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 episode = 2;
  if (has_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->episode(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string series = 4;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "series");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->series(), output);
  }

  // optional string season = 5;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "season");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->season(), output);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cat(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
  if (has_videoquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->videoquality(), output);
  }

  // optional string keywords = 9;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->keywords(), output);
  }

  // optional string contentrating = 10;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contentrating(), output);
  }

  // optional string userrating = 11;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->userrating(), output);
  }

  // optional string context_22 = 12;
  if (has_context_22()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_22().data(), this->context_22().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context_22");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->context_22(), output);
  }

  // optional bool livestream = 13;
  if (has_livestream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->livestream(), output);
  }

  // optional bool sourcerelationship = 14;
  if (has_sourcerelationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->sourcerelationship(), output);
  }

  // optional .com.google.openrtb.BidRequest.Producer producer = 15;
  if (has_producer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->producer(), output);
  }

  // optional int32 len = 16;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->len(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
  if (has_qagmediarating()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->qagmediarating(), output);
  }

  // optional bool embeddable = 18;
  if (has_embeddable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->embeddable(), output);
  }

  // optional string language = 19;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->language(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->context(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Content)
}

::google::protobuf::uint8* BidRequest_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Content)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 episode = 2;
  if (has_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->episode(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string series = 4;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "series");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->series(), target);
  }

  // optional string season = 5;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "season");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->season(), target);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->cat(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
  if (has_videoquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->videoquality(), target);
  }

  // optional string keywords = 9;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->keywords(), target);
  }

  // optional string contentrating = 10;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contentrating(), target);
  }

  // optional string userrating = 11;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userrating(), target);
  }

  // optional string context_22 = 12;
  if (has_context_22()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_22().data(), this->context_22().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context_22");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->context_22(), target);
  }

  // optional bool livestream = 13;
  if (has_livestream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->livestream(), target);
  }

  // optional bool sourcerelationship = 14;
  if (has_sourcerelationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->sourcerelationship(), target);
  }

  // optional .com.google.openrtb.BidRequest.Producer producer = 15;
  if (has_producer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->producer(), target);
  }

  // optional int32 len = 16;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->len(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
  if (has_qagmediarating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->qagmediarating(), target);
  }

  // optional bool embeddable = 18;
  if (has_embeddable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->embeddable(), target);
  }

  // optional string language = 19;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->language(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->context(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Content)
  return target;
}

int BidRequest_Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 episode = 2;
    if (has_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string series = 4;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->series());
    }

    // optional string season = 5;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
    if (has_videoquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->videoquality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string keywords = 9;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string contentrating = 10;
    if (has_contentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentrating());
    }

    // optional string userrating = 11;
    if (has_userrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrating());
    }

    // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
    if (has_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->context());
    }

    // optional string context_22 = 12;
    if (has_context_22()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context_22());
    }

    // optional bool livestream = 13;
    if (has_livestream()) {
      total_size += 1 + 1;
    }

    // optional bool sourcerelationship = 14;
    if (has_sourcerelationship()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Producer producer = 15;
    if (has_producer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->producer());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 len = 16;
    if (has_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
    if (has_qagmediarating()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qagmediarating());
    }

    // optional bool embeddable = 18;
    if (has_embeddable()) {
      total_size += 2 + 1;
    }

    // optional string language = 19;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  // repeated string cat = 7;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Content::MergeFrom(const BidRequest_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_episode()) {
      set_episode(from.episode());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_videoquality()) {
      set_videoquality(from.videoquality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_contentrating()) {
      set_contentrating(from.contentrating());
    }
    if (from.has_userrating()) {
      set_userrating(from.userrating());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_context_22()) {
      set_context_22(from.context_22());
    }
    if (from.has_livestream()) {
      set_livestream(from.livestream());
    }
    if (from.has_sourcerelationship()) {
      set_sourcerelationship(from.sourcerelationship());
    }
    if (from.has_producer()) {
      mutable_producer()->::com::google::openrtb::BidRequest_Producer::MergeFrom(from.producer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_qagmediarating()) {
      set_qagmediarating(from.qagmediarating());
    }
    if (from.has_embeddable()) {
      set_embeddable(from.embeddable());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Content::CopyFrom(const BidRequest_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Content::IsInitialized() const {

  if (has_producer()) {
    if (!this->producer().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Content::Swap(BidRequest_Content* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(episode_, other->episode_);
    std::swap(title_, other->title_);
    std::swap(series_, other->series_);
    std::swap(season_, other->season_);
    std::swap(url_, other->url_);
    cat_.Swap(&other->cat_);
    std::swap(videoquality_, other->videoquality_);
    std::swap(keywords_, other->keywords_);
    std::swap(contentrating_, other->contentrating_);
    std::swap(userrating_, other->userrating_);
    std::swap(context_, other->context_);
    std::swap(context_22_, other->context_22_);
    std::swap(livestream_, other->livestream_);
    std::swap(sourcerelationship_, other->sourcerelationship_);
    std::swap(producer_, other->producer_);
    std::swap(len_, other->len_);
    std::swap(qagmediarating_, other->qagmediarating_);
    std::swap(embeddable_, other->embeddable_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Content_descriptor_;
  metadata.reflection = BidRequest_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Producer::kIdFieldNumber;
const int BidRequest_Producer::kNameFieldNumber;
const int BidRequest_Producer::kCatFieldNumber;
const int BidRequest_Producer::kDomainFieldNumber;
#endif  // !_MSC_VER

BidRequest_Producer::BidRequest_Producer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Producer)
}

void BidRequest_Producer::InitAsDefaultInstance() {
}

BidRequest_Producer::BidRequest_Producer(const BidRequest_Producer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Producer)
}

void BidRequest_Producer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Producer::~BidRequest_Producer() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Producer)
  SharedDtor();
}

void BidRequest_Producer::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Producer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Producer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Producer_descriptor_;
}

const BidRequest_Producer& BidRequest_Producer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Producer* BidRequest_Producer::default_instance_ = NULL;

BidRequest_Producer* BidRequest_Producer::New() const {
  return new BidRequest_Producer;
}

void BidRequest_Producer::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 11) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Producer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Producer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // repeated string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Producer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Producer)
  return false;
#undef DO_
}

void BidRequest_Producer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Producer)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cat(i), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Producer)
}

::google::protobuf::uint8* BidRequest_Producer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Producer)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cat(i), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Producer)
  return target;
}

int BidRequest_Producer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  // repeated string cat = 3;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Producer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Producer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Producer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Producer::MergeFrom(const BidRequest_Producer& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Producer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Producer::CopyFrom(const BidRequest_Producer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Producer::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Producer::Swap(BidRequest_Producer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    cat_.Swap(&other->cat_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Producer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Producer_descriptor_;
  metadata.reflection = BidRequest_Producer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_DeviceType_descriptor_;
}
bool BidRequest_Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Device_DeviceType BidRequest_Device::MOBILE;
const BidRequest_Device_DeviceType BidRequest_Device::PERSONAL_COMPUTER;
const BidRequest_Device_DeviceType BidRequest_Device::CONNECTED_TV;
const BidRequest_Device_DeviceType BidRequest_Device::PHONE;
const BidRequest_Device_DeviceType BidRequest_Device::TABLET;
const BidRequest_Device_DeviceType BidRequest_Device::CONNECTED_DEVICE;
const BidRequest_Device_DeviceType BidRequest_Device::SET_TOP_BOX;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MIN;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MAX;
const int BidRequest_Device::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_ConnectionType_descriptor_;
}
bool BidRequest_Device_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Device_ConnectionType BidRequest_Device::CONNECTION_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::ETHERNET;
const BidRequest_Device_ConnectionType BidRequest_Device::WIFI;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_2G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_3G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_4G;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MIN;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MAX;
const int BidRequest_Device::ConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Device::kDntFieldNumber;
const int BidRequest_Device::kUaFieldNumber;
const int BidRequest_Device::kIpFieldNumber;
const int BidRequest_Device::kGeoFieldNumber;
const int BidRequest_Device::kDidsha1FieldNumber;
const int BidRequest_Device::kDidmd5FieldNumber;
const int BidRequest_Device::kDpidsha1FieldNumber;
const int BidRequest_Device::kDpidmd5FieldNumber;
const int BidRequest_Device::kIpv6FieldNumber;
const int BidRequest_Device::kCarrierFieldNumber;
const int BidRequest_Device::kLanguageFieldNumber;
const int BidRequest_Device::kMakeFieldNumber;
const int BidRequest_Device::kModelFieldNumber;
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kOsvFieldNumber;
const int BidRequest_Device::kHwvFieldNumber;
const int BidRequest_Device::kWFieldNumber;
const int BidRequest_Device::kHFieldNumber;
const int BidRequest_Device::kPpiFieldNumber;
const int BidRequest_Device::kPxratioFieldNumber;
const int BidRequest_Device::kJsFieldNumber;
const int BidRequest_Device::kConnectiontypeFieldNumber;
const int BidRequest_Device::kDevicetypeFieldNumber;
const int BidRequest_Device::kFlashverFieldNumber;
const int BidRequest_Device::kIfaFieldNumber;
const int BidRequest_Device::kMacsha1FieldNumber;
const int BidRequest_Device::kMacmd5FieldNumber;
const int BidRequest_Device::kLmtFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::google::openrtb::BidRequest_Geo*>(&::com::google::openrtb::BidRequest_Geo::default_instance());
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dnt_ = false;
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  didsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ppi_ = 0;
  pxratio_ = 0;
  js_ = false;
  connectiontype_ = 0;
  devicetype_ = 1;
  flashver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ifa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (didsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didsha1_;
  }
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didmd5_;
  }
  if (dpidsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpidsha1_;
  }
  if (dpidmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpidmd5_;
  }
  if (ipv6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6_;
  }
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hwv_;
  }
  if (flashver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flashver_;
  }
  if (ifa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ifa_;
  }
  if (macsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macsha1_;
  }
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macmd5_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New() const {
  return new BidRequest_Device;
}

void BidRequest_Device::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    dnt_ = false;
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
    }
    if (has_didsha1()) {
      if (didsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        didsha1_->clear();
      }
    }
    if (has_didmd5()) {
      if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        didmd5_->clear();
      }
    }
    if (has_dpidsha1()) {
      if (dpidsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dpidsha1_->clear();
      }
    }
    if (has_dpidmd5()) {
      if (dpidmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dpidmd5_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_ipv6()) {
      if (ipv6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipv6_->clear();
      }
    }
    if (has_carrier()) {
      if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carrier_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_make()) {
      if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        make_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
    if (has_hwv()) {
      if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hwv_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(w_, connectiontype_);
    js_ = false;
    devicetype_ = 1;
    if (has_flashver()) {
      if (flashver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flashver_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 251658240) {
    if (has_ifa()) {
      if (ifa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ifa_->clear();
      }
    }
    if (has_macsha1()) {
      if (macsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        macsha1_->clear();
      }
    }
    if (has_macmd5()) {
      if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        macmd5_->clear();
      }
    }
    lmt_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dnt_)));
          set_has_dnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ua;
        break;
      }

      // optional string ua = 2;
      case 2: {
        if (tag == 18) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geo;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo geo = 4;
      case 4: {
        if (tag == 34) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_didsha1;
        break;
      }

      // optional string didsha1 = 5;
      case 5: {
        if (tag == 42) {
         parse_didsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_didsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->didsha1().data(), this->didsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "didsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_didmd5;
        break;
      }

      // optional string didmd5 = 6;
      case 6: {
        if (tag == 50) {
         parse_didmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_didmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->didmd5().data(), this->didmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "didmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dpidsha1;
        break;
      }

      // optional string dpidsha1 = 7;
      case 7: {
        if (tag == 58) {
         parse_dpidsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpidsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpidsha1().data(), this->dpidsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpidsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dpidmd5;
        break;
      }

      // optional string dpidmd5 = 8;
      case 8: {
        if (tag == 66) {
         parse_dpidmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpidmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpidmd5().data(), this->dpidmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpidmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ipv6;
        break;
      }

      // optional string ipv6 = 9;
      case 9: {
        if (tag == 74) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6().data(), this->ipv6().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipv6");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_carrier;
        break;
      }

      // optional string carrier = 10;
      case 10: {
        if (tag == 82) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_language;
        break;
      }

      // optional string language = 11;
      case 11: {
        if (tag == 90) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_make;
        break;
      }

      // optional string make = 12;
      case 12: {
        if (tag == 98) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_model;
        break;
      }

      // optional string model = 13;
      case 13: {
        if (tag == 106) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_os;
        break;
      }

      // optional string os = 14;
      case 14: {
        if (tag == 114) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_osv;
        break;
      }

      // optional string osv = 15;
      case 15: {
        if (tag == 122) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_js;
        break;
      }

      // optional bool js = 16;
      case 16: {
        if (tag == 128) {
         parse_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &js_)));
          set_has_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_connectiontype;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
      case 17: {
        if (tag == 136) {
         parse_connectiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Device_ConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::com::google::openrtb::BidRequest_Device_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_devicetype;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
      case 18: {
        if (tag == 144) {
         parse_devicetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Device_DeviceType_IsValid(value)) {
            set_devicetype(static_cast< ::com::google::openrtb::BidRequest_Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_flashver;
        break;
      }

      // optional string flashver = 19;
      case 19: {
        if (tag == 154) {
         parse_flashver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flashver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flashver().data(), this->flashver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flashver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ifa;
        break;
      }

      // optional string ifa = 20;
      case 20: {
        if (tag == 162) {
         parse_ifa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ifa().data(), this->ifa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ifa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_macsha1;
        break;
      }

      // optional string macsha1 = 21;
      case 21: {
        if (tag == 170) {
         parse_macsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macsha1().data(), this->macsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "macsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_macmd5;
        break;
      }

      // optional string macmd5 = 22;
      case 22: {
        if (tag == 178) {
         parse_macmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macmd5().data(), this->macmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "macmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_lmt;
        break;
      }

      // optional bool lmt = 23;
      case 23: {
        if (tag == 184) {
         parse_lmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lmt_)));
          set_has_lmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_hwv;
        break;
      }

      // optional string hwv = 24;
      case 24: {
        if (tag == 194) {
         parse_hwv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hwv().data(), this->hwv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hwv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_w;
        break;
      }

      // optional int32 w = 25;
      case 25: {
        if (tag == 200) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_h;
        break;
      }

      // optional int32 h = 26;
      case 26: {
        if (tag == 208) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ppi;
        break;
      }

      // optional int32 ppi = 27;
      case 27: {
        if (tag == 216) {
         parse_ppi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppi_)));
          set_has_ppi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_pxratio;
        break;
      }

      // optional double pxratio = 28;
      case 28: {
        if (tag == 225) {
         parse_pxratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxratio_)));
          set_has_pxratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Device)
  // optional bool dnt = 1;
  if (has_dnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dnt(), output);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ua(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 4;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->geo(), output);
  }

  // optional string didsha1 = 5;
  if (has_didsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didsha1().data(), this->didsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->didsha1(), output);
  }

  // optional string didmd5 = 6;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->didmd5(), output);
  }

  // optional string dpidsha1 = 7;
  if (has_dpidsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidsha1().data(), this->dpidsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpidsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dpidsha1(), output);
  }

  // optional string dpidmd5 = 8;
  if (has_dpidmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidmd5().data(), this->dpidmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpidmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dpidmd5(), output);
  }

  // optional string ipv6 = 9;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipv6(), output);
  }

  // optional string carrier = 10;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->carrier(), output);
  }

  // optional string language = 11;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language(), output);
  }

  // optional string make = 12;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->make(), output);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->model(), output);
  }

  // optional string os = 14;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->os(), output);
  }

  // optional string osv = 15;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->osv(), output);
  }

  // optional bool js = 16;
  if (has_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->js(), output);
  }

  // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->connectiontype(), output);
  }

  // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->devicetype(), output);
  }

  // optional string flashver = 19;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flashver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->flashver(), output);
  }

  // optional string ifa = 20;
  if (has_ifa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifa().data(), this->ifa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ifa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->ifa(), output);
  }

  // optional string macsha1 = 21;
  if (has_macsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macsha1().data(), this->macsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->macsha1(), output);
  }

  // optional string macmd5 = 22;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->macmd5(), output);
  }

  // optional bool lmt = 23;
  if (has_lmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->lmt(), output);
  }

  // optional string hwv = 24;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->hwv(), output);
  }

  // optional int32 w = 25;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->w(), output);
  }

  // optional int32 h = 26;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->h(), output);
  }

  // optional int32 ppi = 27;
  if (has_ppi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ppi(), output);
  }

  // optional double pxratio = 28;
  if (has_pxratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->pxratio(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Device)
  // optional bool dnt = 1;
  if (has_dnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dnt(), target);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ua(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 4;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->geo(), target);
  }

  // optional string didsha1 = 5;
  if (has_didsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didsha1().data(), this->didsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->didsha1(), target);
  }

  // optional string didmd5 = 6;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->didmd5(), target);
  }

  // optional string dpidsha1 = 7;
  if (has_dpidsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidsha1().data(), this->dpidsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpidsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dpidsha1(), target);
  }

  // optional string dpidmd5 = 8;
  if (has_dpidmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidmd5().data(), this->dpidmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpidmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dpidmd5(), target);
  }

  // optional string ipv6 = 9;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipv6(), target);
  }

  // optional string carrier = 10;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->carrier(), target);
  }

  // optional string language = 11;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language(), target);
  }

  // optional string make = 12;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->make(), target);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model(), target);
  }

  // optional string os = 14;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->os(), target);
  }

  // optional string osv = 15;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->osv(), target);
  }

  // optional bool js = 16;
  if (has_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->js(), target);
  }

  // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->connectiontype(), target);
  }

  // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->devicetype(), target);
  }

  // optional string flashver = 19;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flashver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->flashver(), target);
  }

  // optional string ifa = 20;
  if (has_ifa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifa().data(), this->ifa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ifa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ifa(), target);
  }

  // optional string macsha1 = 21;
  if (has_macsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macsha1().data(), this->macsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->macsha1(), target);
  }

  // optional string macmd5 = 22;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->macmd5(), target);
  }

  // optional bool lmt = 23;
  if (has_lmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->lmt(), target);
  }

  // optional string hwv = 24;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->hwv(), target);
  }

  // optional int32 w = 25;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->w(), target);
  }

  // optional int32 h = 26;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->h(), target);
  }

  // optional int32 ppi = 27;
  if (has_ppi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ppi(), target);
  }

  // optional double pxratio = 28;
  if (has_pxratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->pxratio(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Device)
  return target;
}

int BidRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dnt = 1;
    if (has_dnt()) {
      total_size += 1 + 1;
    }

    // optional string ua = 2;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .com.google.openrtb.BidRequest.Geo geo = 4;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional string didsha1 = 5;
    if (has_didsha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->didsha1());
    }

    // optional string didmd5 = 6;
    if (has_didmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->didmd5());
    }

    // optional string dpidsha1 = 7;
    if (has_dpidsha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpidsha1());
    }

    // optional string dpidmd5 = 8;
    if (has_dpidmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpidmd5());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ipv6 = 9;
    if (has_ipv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6());
    }

    // optional string carrier = 10;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string make = 12;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string model = 13;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 14;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string osv = 15;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional string hwv = 24;
    if (has_hwv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 w = 25;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 26;
    if (has_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 ppi = 27;
    if (has_ppi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppi());
    }

    // optional double pxratio = 28;
    if (has_pxratio()) {
      total_size += 2 + 8;
    }

    // optional bool js = 16;
    if (has_js()) {
      total_size += 2 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
    if (has_connectiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
    if (has_devicetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());
    }

    // optional string flashver = 19;
    if (has_flashver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flashver());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string ifa = 20;
    if (has_ifa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifa());
    }

    // optional string macsha1 = 21;
    if (has_macsha1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macsha1());
    }

    // optional string macmd5 = 22;
    if (has_macmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macmd5());
    }

    // optional bool lmt = 23;
    if (has_lmt()) {
      total_size += 2 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dnt()) {
      set_dnt(from.dnt());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_geo()) {
      mutable_geo()->::com::google::openrtb::BidRequest_Geo::MergeFrom(from.geo());
    }
    if (from.has_didsha1()) {
      set_didsha1(from.didsha1());
    }
    if (from.has_didmd5()) {
      set_didmd5(from.didmd5());
    }
    if (from.has_dpidsha1()) {
      set_dpidsha1(from.dpidsha1());
    }
    if (from.has_dpidmd5()) {
      set_dpidmd5(from.dpidmd5());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ipv6()) {
      set_ipv6(from.ipv6());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_make()) {
      set_make(from.make());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_hwv()) {
      set_hwv(from.hwv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_ppi()) {
      set_ppi(from.ppi());
    }
    if (from.has_pxratio()) {
      set_pxratio(from.pxratio());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_flashver()) {
      set_flashver(from.flashver());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ifa()) {
      set_ifa(from.ifa());
    }
    if (from.has_macsha1()) {
      set_macsha1(from.macsha1());
    }
    if (from.has_macmd5()) {
      set_macmd5(from.macmd5());
    }
    if (from.has_lmt()) {
      set_lmt(from.lmt());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other != this) {
    std::swap(dnt_, other->dnt_);
    std::swap(ua_, other->ua_);
    std::swap(ip_, other->ip_);
    std::swap(geo_, other->geo_);
    std::swap(didsha1_, other->didsha1_);
    std::swap(didmd5_, other->didmd5_);
    std::swap(dpidsha1_, other->dpidsha1_);
    std::swap(dpidmd5_, other->dpidmd5_);
    std::swap(ipv6_, other->ipv6_);
    std::swap(carrier_, other->carrier_);
    std::swap(language_, other->language_);
    std::swap(make_, other->make_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(hwv_, other->hwv_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(ppi_, other->ppi_);
    std::swap(pxratio_, other->pxratio_);
    std::swap(js_, other->js_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(flashver_, other->flashver_);
    std::swap(ifa_, other->ifa_);
    std::swap(macsha1_, other->macsha1_);
    std::swap(macmd5_, other->macmd5_);
    std::swap(lmt_, other->lmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Geo_LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_LocationType_descriptor_;
}
bool BidRequest_Geo_LocationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Geo_LocationType BidRequest_Geo::GPS_LOCATION;
const BidRequest_Geo_LocationType BidRequest_Geo::IP;
const BidRequest_Geo_LocationType BidRequest_Geo::USER_PROVIDED;
const BidRequest_Geo_LocationType BidRequest_Geo::LocationType_MIN;
const BidRequest_Geo_LocationType BidRequest_Geo::LocationType_MAX;
const int BidRequest_Geo::LocationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Geo::kLatFieldNumber;
const int BidRequest_Geo::kLonFieldNumber;
const int BidRequest_Geo::kCountryFieldNumber;
const int BidRequest_Geo::kRegionFieldNumber;
const int BidRequest_Geo::kRegionfips104FieldNumber;
const int BidRequest_Geo::kMetroFieldNumber;
const int BidRequest_Geo::kCityFieldNumber;
const int BidRequest_Geo::kZipFieldNumber;
const int BidRequest_Geo::kTypeFieldNumber;
const int BidRequest_Geo::kUtcoffsetFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regionfips104_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  utcoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (regionfips104_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regionfips104_;
  }
  if (metro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete metro_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zip_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New() const {
  return new BidRequest_Geo;
}

void BidRequest_Geo::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lat_, lon_);
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        region_->clear();
      }
    }
    if (has_regionfips104()) {
      if (regionfips104_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regionfips104_->clear();
      }
    }
    if (has_metro()) {
      if (metro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        metro_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_zip()) {
      if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    type_ = 1;
    utcoffset_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (tag == 26) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region;
        break;
      }

      // optional string region = 4;
      case 4: {
        if (tag == 34) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_regionfips104;
        break;
      }

      // optional string regionfips104 = 5;
      case 5: {
        if (tag == 42) {
         parse_regionfips104:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regionfips104()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regionfips104().data(), this->regionfips104().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regionfips104");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metro;
        break;
      }

      // optional string metro = 6;
      case 6: {
        if (tag == 50) {
         parse_metro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metro().data(), this->metro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // optional string city = 7;
      case 7: {
        if (tag == 58) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_zip;
        break;
      }

      // optional string zip = 8;
      case 8: {
        if (tag == 66) {
         parse_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip().data(), this->zip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Geo_LocationType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::BidRequest_Geo_LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_utcoffset;
        break;
      }

      // optional int32 utcoffset = 10;
      case 10: {
        if (tag == 80) {
         parse_utcoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utcoffset_)));
          set_has_utcoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // optional string regionfips104 = 5;
  if (has_regionfips104()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regionfips104().data(), this->regionfips104().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regionfips104");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->regionfips104(), output);
  }

  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metro(), output);
  }

  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->city(), output);
  }

  // optional string zip = 8;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->zip(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional int32 utcoffset = 10;
  if (has_utcoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->utcoffset(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // optional string regionfips104 = 5;
  if (has_regionfips104()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regionfips104().data(), this->regionfips104().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regionfips104");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->regionfips104(), target);
  }

  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metro(), target);
  }

  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->city(), target);
  }

  // optional string zip = 8;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zip(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional int32 utcoffset = 10;
  if (has_utcoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->utcoffset(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

    // optional string regionfips104 = 5;
    if (has_regionfips104()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regionfips104());
    }

    // optional string metro = 6;
    if (has_metro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metro());
    }

    // optional string city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string zip = 8;
    if (has_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 utcoffset = 10;
    if (has_utcoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utcoffset());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_regionfips104()) {
      set_regionfips104(from.regionfips104());
    }
    if (from.has_metro()) {
      set_metro(from.metro());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_zip()) {
      set_zip(from.zip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_utcoffset()) {
      set_utcoffset(from.utcoffset());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(country_, other->country_);
    std::swap(region_, other->region_);
    std::swap(regionfips104_, other->regionfips104_);
    std::swap(metro_, other->metro_);
    std::swap(city_, other->city_);
    std::swap(zip_, other->zip_);
    std::swap(type_, other->type_);
    std::swap(utcoffset_, other->utcoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Gender_descriptor_;
}
bool BidRequest_User_Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Gender BidRequest_User::MALE;
const BidRequest_User_Gender BidRequest_User::FEMALE;
const BidRequest_User_Gender BidRequest_User::OTHER;
const BidRequest_User_Gender BidRequest_User::Gender_MIN;
const BidRequest_User_Gender BidRequest_User::Gender_MAX;
const int BidRequest_User::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_User::kIdFieldNumber;
const int BidRequest_User::kBuyeruidFieldNumber;
const int BidRequest_User::kYobFieldNumber;
const int BidRequest_User::kGenderFieldNumber;
const int BidRequest_User::kKeywordsFieldNumber;
const int BidRequest_User::kCustomdataFieldNumber;
const int BidRequest_User::kGeoFieldNumber;
const int BidRequest_User::kDataFieldNumber;
#endif  // !_MSC_VER

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.User)
}

void BidRequest_User::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::google::openrtb::BidRequest_Geo*>(&::com::google::openrtb::BidRequest_Geo::default_instance());
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.User)
}

void BidRequest_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyeruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yob_ = 0;
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.User)
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (buyeruid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyeruid_;
  }
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gender_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdata_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New() const {
  return new BidRequest_User;
}

void BidRequest_User::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 127) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_buyeruid()) {
      if (buyeruid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyeruid_->clear();
      }
    }
    yob_ = 0;
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gender_->clear();
      }
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_customdata()) {
      if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdata_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyeruid;
        break;
      }

      // optional string buyeruid = 2;
      case 2: {
        if (tag == 18) {
         parse_buyeruid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyeruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyeruid().data(), this->buyeruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyeruid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }

      // optional string gender = 4;
      case 4: {
        if (tag == 34) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // optional string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_customdata;
        break;
      }

      // optional string customdata = 6;
      case 6: {
        if (tag == 50) {
         parse_customdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdata().data(), this->customdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_geo;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo geo = 7;
      case 7: {
        if (tag == 58) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Data data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.User)
  return false;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string buyeruid = 2;
  if (has_buyeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyeruid().data(), this->buyeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyeruid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyeruid(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gender(), output);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keywords(), output);
  }

  // optional string customdata = 6;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdata(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 7;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geo(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.User)
}

::google::protobuf::uint8* BidRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string buyeruid = 2;
  if (has_buyeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyeruid().data(), this->buyeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyeruid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyeruid(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gender(), target);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keywords(), target);
  }

  // optional string customdata = 6;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdata(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 7;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geo(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.User)
  return target;
}

int BidRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string buyeruid = 2;
    if (has_buyeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyeruid());
    }

    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional string keywords = 5;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string customdata = 6;
    if (has_customdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdata());
    }

    // optional .com.google.openrtb.BidRequest.Geo geo = 7;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buyeruid()) {
      set_buyeruid(from.buyeruid());
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_customdata()) {
      set_customdata(from.customdata());
    }
    if (from.has_geo()) {
      mutable_geo()->::com::google::openrtb::BidRequest_Geo::MergeFrom(from.geo());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buyeruid_, other->buyeruid_);
    std::swap(yob_, other->yob_);
    std::swap(gender_, other->gender_);
    std::swap(keywords_, other->keywords_);
    std::swap(customdata_, other->customdata_);
    std::swap(geo_, other->geo_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Data_Segment::kIdFieldNumber;
const int BidRequest_Data_Segment::kNameFieldNumber;
const int BidRequest_Data_Segment::kValueFieldNumber;
#endif  // !_MSC_VER

BidRequest_Data_Segment::BidRequest_Data_Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Data.Segment)
}

void BidRequest_Data_Segment::InitAsDefaultInstance() {
}

BidRequest_Data_Segment::BidRequest_Data_Segment(const BidRequest_Data_Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Data.Segment)
}

void BidRequest_Data_Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Data_Segment::~BidRequest_Data_Segment() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Data.Segment)
  SharedDtor();
}

void BidRequest_Data_Segment::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Data_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Data_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Data_Segment_descriptor_;
}

const BidRequest_Data_Segment& BidRequest_Data_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Data_Segment* BidRequest_Data_Segment::default_instance_ = NULL;

BidRequest_Data_Segment* BidRequest_Data_Segment::New() const {
  return new BidRequest_Data_Segment;
}

void BidRequest_Data_Segment::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Data_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Data.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Data.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Data.Segment)
  return false;
#undef DO_
}

void BidRequest_Data_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Data.Segment)
}

::google::protobuf::uint8* BidRequest_Data_Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Data.Segment)
  return target;
}

int BidRequest_Data_Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Data_Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Data_Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Data_Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Data_Segment::MergeFrom(const BidRequest_Data_Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Data_Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Data_Segment::CopyFrom(const BidRequest_Data_Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Data_Segment::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Data_Segment::Swap(BidRequest_Data_Segment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Data_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Data_Segment_descriptor_;
  metadata.reflection = BidRequest_Data_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Data::kIdFieldNumber;
const int BidRequest_Data::kNameFieldNumber;
const int BidRequest_Data::kSegmentFieldNumber;
#endif  // !_MSC_VER

BidRequest_Data::BidRequest_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Data)
}

void BidRequest_Data::InitAsDefaultInstance() {
}

BidRequest_Data::BidRequest_Data(const BidRequest_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Data)
}

void BidRequest_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Data::~BidRequest_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Data)
  SharedDtor();
}

void BidRequest_Data::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Data_descriptor_;
}

const BidRequest_Data& BidRequest_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Data* BidRequest_Data::default_instance_ = NULL;

BidRequest_Data* BidRequest_Data::New() const {
  return new BidRequest_Data;
}

void BidRequest_Data::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
      case 3: {
        if (tag == 26) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Data)
  return false;
#undef DO_
}

void BidRequest_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  for (int i = 0; i < this->segment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segment(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Data)
}

::google::protobuf::uint8* BidRequest_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  for (int i = 0; i < this->segment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->segment(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Data)
  return target;
}

int BidRequest_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Data::MergeFrom(const BidRequest_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Data::CopyFrom(const BidRequest_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Data::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->segment())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Data::Swap(BidRequest_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    segment_.Swap(&other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Data_descriptor_;
  metadata.reflection = BidRequest_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Regs::kCoppaFieldNumber;
#endif  // !_MSC_VER

BidRequest_Regs::BidRequest_Regs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Regs)
}

void BidRequest_Regs::InitAsDefaultInstance() {
}

BidRequest_Regs::BidRequest_Regs(const BidRequest_Regs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Regs)
}

void BidRequest_Regs::SharedCtor() {
  _cached_size_ = 0;
  coppa_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Regs::~BidRequest_Regs() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Regs)
  SharedDtor();
}

void BidRequest_Regs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Regs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Regs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Regs_descriptor_;
}

const BidRequest_Regs& BidRequest_Regs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Regs* BidRequest_Regs::default_instance_ = NULL;

BidRequest_Regs* BidRequest_Regs::New() const {
  return new BidRequest_Regs;
}

void BidRequest_Regs::Clear() {
  _extensions_.Clear();
  coppa_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Regs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Regs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool coppa = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coppa_)));
          set_has_coppa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Regs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Regs)
  return false;
#undef DO_
}

void BidRequest_Regs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Regs)
  // optional bool coppa = 1;
  if (has_coppa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->coppa(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Regs)
}

::google::protobuf::uint8* BidRequest_Regs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Regs)
  // optional bool coppa = 1;
  if (has_coppa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->coppa(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Regs)
  return target;
}

int BidRequest_Regs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool coppa = 1;
    if (has_coppa()) {
      total_size += 1 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Regs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Regs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Regs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Regs::MergeFrom(const BidRequest_Regs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coppa()) {
      set_coppa(from.coppa());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Regs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Regs::CopyFrom(const BidRequest_Regs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Regs::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Regs::Swap(BidRequest_Regs* other) {
  if (other != this) {
    std::swap(coppa_, other->coppa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest_Regs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Regs_descriptor_;
  metadata.reflection = BidRequest_Regs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kSiteFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kRegsFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kAtFieldNumber;
const int BidRequest::kTmaxFieldNumber;
const int BidRequest::kWseatFieldNumber;
const int BidRequest::kAllimpsFieldNumber;
const int BidRequest::kCurFieldNumber;
const int BidRequest::kBcatFieldNumber;
const int BidRequest::kBadvFieldNumber;
const int BidRequest::kTestFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  BidRequest_default_oneof_instance_->site_ = const_cast< ::com::google::openrtb::BidRequest_Site*>(&::com::google::openrtb::BidRequest_Site::default_instance());
  BidRequest_default_oneof_instance_->app_ = const_cast< ::com::google::openrtb::BidRequest_App*>(&::com::google::openrtb::BidRequest_App::default_instance());
  device_ = const_cast< ::com::google::openrtb::BidRequest_Device*>(&::com::google::openrtb::BidRequest_Device::default_instance());
  regs_ = const_cast< ::com::google::openrtb::BidRequest_Regs*>(&::com::google::openrtb::BidRequest_Regs::default_instance());
  user_ = const_cast< ::com::google::openrtb::BidRequest_User*>(&::com::google::openrtb::BidRequest_User::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  regs_ = NULL;
  user_ = NULL;
  at_ = 2;
  tmax_ = 0;
  allimps_ = false;
  test_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_distributionchannel_oneof();
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (has_distributionchannel_oneof()) {
    clear_distributionchannel_oneof();
  }
  if (this != default_instance_) {
    delete device_;
    delete regs_;
    delete user_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::clear_distributionchannel_oneof() {
  switch(distributionchannel_oneof_case()) {
    case kSite: {
      delete distributionchannel_oneof_.site_;
      break;
    }
    case kApp: {
      delete distributionchannel_oneof_.app_;
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}


void BidRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::com::google::openrtb::BidRequest_Device::Clear();
    }
    if (has_regs()) {
      if (regs_ != NULL) regs_->::com::google::openrtb::BidRequest_Regs::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::com::google::openrtb::BidRequest_User::Clear();
    }
    at_ = 2;
  }
  if (_has_bits_[8 / 32] & 17664) {
    ZR_(allimps_, test_);
    tmax_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imp_.Clear();
  wseat_.Clear();
  cur_.Clear();
  bcat_.Clear();
  badv_.Clear();
  clear_distributionchannel_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
      case 2: {
        if (tag == 18) {
         parse_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        if (input->ExpectTag(26)) goto parse_site;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Site site = 3;
      case 3: {
        if (tag == 26) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app;
        break;
      }

      // optional .com.google.openrtb.BidRequest.App app = 4;
      case 4: {
        if (tag == 34) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device device = 5;
      case 5: {
        if (tag == 42) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional .com.google.openrtb.BidRequest.User user = 6;
      case 6: {
        if (tag == 50) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_at;
        break;
      }

      // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
      case 7: {
        if (tag == 56) {
         parse_at:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_AuctionType_IsValid(value)) {
            set_at(static_cast< ::com::google::openrtb::BidRequest_AuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmax;
        break;
      }

      // optional int32 tmax = 8;
      case 8: {
        if (tag == 64) {
         parse_tmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmax_)));
          set_has_tmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 9;
      case 9: {
        if (tag == 74) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wseat;
        if (input->ExpectTag(80)) goto parse_allimps;
        break;
      }

      // optional bool allimps = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_allimps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allimps_)));
          set_has_allimps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cur;
        break;
      }

      // repeated string cur = 11;
      case 11: {
        if (tag == 90) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur(this->cur_size() - 1).data(),
            this->cur(this->cur_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cur;
        if (input->ExpectTag(98)) goto parse_bcat;
        break;
      }

      // repeated string bcat = 12;
      case 12: {
        if (tag == 98) {
         parse_bcat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bcat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bcat(this->bcat_size() - 1).data(),
            this->bcat(this->bcat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bcat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_bcat;
        if (input->ExpectTag(106)) goto parse_badv;
        break;
      }

      // repeated string badv = 13;
      case 13: {
        if (tag == 106) {
         parse_badv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_badv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->badv(this->badv_size() - 1).data(),
            this->badv(this->badv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "badv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_badv;
        if (input->ExpectTag(114)) goto parse_regs;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Regs regs = 14;
      case 14: {
        if (tag == 114) {
         parse_regs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_test;
        break;
      }

      // optional bool test = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->imp(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Site site = 3;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->site(), output);
  }

  // optional .com.google.openrtb.BidRequest.App app = 4;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->app(), output);
  }

  // optional .com.google.openrtb.BidRequest.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // optional .com.google.openrtb.BidRequest.User user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user(), output);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->at(), output);
  }

  // optional int32 tmax = 8;
  if (has_tmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmax(), output);
  }

  // repeated string wseat = 9;
  for (int i = 0; i < this->wseat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->wseat(i).data(), this->wseat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wseat(i), output);
  }

  // optional bool allimps = 10 [default = false];
  if (has_allimps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allimps(), output);
  }

  // repeated string cur = 11;
  for (int i = 0; i < this->cur_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cur(i).data(), this->cur(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cur");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cur(i), output);
  }

  // repeated string bcat = 12;
  for (int i = 0; i < this->bcat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bcat(i).data(), this->bcat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bcat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bcat(i), output);
  }

  // repeated string badv = 13;
  for (int i = 0; i < this->badv_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->badv(i).data(), this->badv(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "badv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->badv(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Regs regs = 14;
  if (has_regs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->regs(), output);
  }

  // optional bool test = 15 [default = false];
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->test(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->imp(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Site site = 3;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->site(), target);
  }

  // optional .com.google.openrtb.BidRequest.App app = 4;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->app(), target);
  }

  // optional .com.google.openrtb.BidRequest.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // optional .com.google.openrtb.BidRequest.User user = 6;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user(), target);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->at(), target);
  }

  // optional int32 tmax = 8;
  if (has_tmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tmax(), target);
  }

  // repeated string wseat = 9;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->wseat(i), target);
  }

  // optional bool allimps = 10 [default = false];
  if (has_allimps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allimps(), target);
  }

  // repeated string cur = 11;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur(i).data(), this->cur(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cur");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->cur(i), target);
  }

  // repeated string bcat = 12;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bcat(i).data(), this->bcat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bcat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->bcat(i), target);
  }

  // repeated string badv = 13;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "badv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->badv(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Regs regs = 14;
  if (has_regs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->regs(), target);
  }

  // optional bool test = 15 [default = false];
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->test(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.google.openrtb.BidRequest.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .com.google.openrtb.BidRequest.Regs regs = 14;
    if (has_regs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regs());
    }

    // optional .com.google.openrtb.BidRequest.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->at());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tmax = 8;
    if (has_tmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmax());
    }

    // optional bool allimps = 10 [default = false];
    if (has_allimps()) {
      total_size += 1 + 1;
    }

    // optional bool test = 15 [default = false];
    if (has_test()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated string wseat = 9;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  // repeated string cur = 11;
  total_size += 1 * this->cur_size();
  for (int i = 0; i < this->cur_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cur(i));
  }

  // repeated string bcat = 12;
  total_size += 1 * this->bcat_size();
  for (int i = 0; i < this->bcat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bcat(i));
  }

  // repeated string badv = 13;
  total_size += 1 * this->badv_size();
  for (int i = 0; i < this->badv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->badv(i));
  }

  switch (distributionchannel_oneof_case()) {
    // optional .com.google.openrtb.BidRequest.Site site = 3;
    case kSite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site());
      break;
    }
    // optional .com.google.openrtb.BidRequest.App app = 4;
    case kApp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  imp_.MergeFrom(from.imp_);
  wseat_.MergeFrom(from.wseat_);
  cur_.MergeFrom(from.cur_);
  bcat_.MergeFrom(from.bcat_);
  badv_.MergeFrom(from.badv_);
  switch (from.distributionchannel_oneof_case()) {
    case kSite: {
      mutable_site()->::com::google::openrtb::BidRequest_Site::MergeFrom(from.site());
      break;
    }
    case kApp: {
      mutable_app()->::com::google::openrtb::BidRequest_App::MergeFrom(from.app());
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device()) {
      mutable_device()->::com::google::openrtb::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_regs()) {
      mutable_regs()->::com::google::openrtb::BidRequest_Regs::MergeFrom(from.regs());
    }
    if (from.has_user()) {
      mutable_user()->::com::google::openrtb::BidRequest_User::MergeFrom(from.user());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tmax()) {
      set_tmax(from.tmax());
    }
    if (from.has_allimps()) {
      set_allimps(from.allimps());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_site()) {
    if (!this->site().IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  if (has_regs()) {
    if (!this->regs().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    imp_.Swap(&other->imp_);
    std::swap(device_, other->device_);
    std::swap(regs_, other->regs_);
    std::swap(user_, other->user_);
    std::swap(at_, other->at_);
    std::swap(tmax_, other->tmax_);
    wseat_.Swap(&other->wseat_);
    std::swap(allimps_, other->allimps_);
    cur_.Swap(&other->cur_);
    bcat_.Swap(&other->bcat_);
    badv_.Swap(&other->badv_);
    std::swap(test_, other->test_);
    std::swap(distributionchannel_oneof_, other->distributionchannel_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_NoBidReason_descriptor_;
}
bool BidResponse_NoBidReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidResponse_NoBidReason BidResponse::UNKNOWN_ERROR;
const BidResponse_NoBidReason BidResponse::TECHNICAL_ERROR;
const BidResponse_NoBidReason BidResponse::INVALID_REQUEST;
const BidResponse_NoBidReason BidResponse::KNOWN_WEB_SPIDER;
const BidResponse_NoBidReason BidResponse::SUSPECTED_NONHUMAN_TRAFFIC;
const BidResponse_NoBidReason BidResponse::CLOUD_DATACENTER_PROXYIP;
const BidResponse_NoBidReason BidResponse::UNSUPPORTED_DEVICE;
const BidResponse_NoBidReason BidResponse::BLOCKED_PUBLISHER;
const BidResponse_NoBidReason BidResponse::UNMATCHED_USER;
const BidResponse_NoBidReason BidResponse::NoBidReason_MIN;
const BidResponse_NoBidReason BidResponse::NoBidReason_MAX;
const int BidResponse::NoBidReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidResponse_SeatBid_Bid::kIdFieldNumber;
const int BidResponse_SeatBid_Bid::kImpidFieldNumber;
const int BidResponse_SeatBid_Bid::kPriceFieldNumber;
const int BidResponse_SeatBid_Bid::kAdidFieldNumber;
const int BidResponse_SeatBid_Bid::kNurlFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmNativeFieldNumber;
const int BidResponse_SeatBid_Bid::kAdomainFieldNumber;
const int BidResponse_SeatBid_Bid::kBundleFieldNumber;
const int BidResponse_SeatBid_Bid::kIurlFieldNumber;
const int BidResponse_SeatBid_Bid::kCidFieldNumber;
const int BidResponse_SeatBid_Bid::kCridFieldNumber;
const int BidResponse_SeatBid_Bid::kCatFieldNumber;
const int BidResponse_SeatBid_Bid::kAttrFieldNumber;
const int BidResponse_SeatBid_Bid::kDealidFieldNumber;
const int BidResponse_SeatBid_Bid::kWFieldNumber;
const int BidResponse_SeatBid_Bid::kHFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::InitAsDefaultInstance() {
  BidResponse_SeatBid_Bid_default_oneof_instance_->adm_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
  BidResponse_SeatBid_Bid_default_oneof_instance_->adm_native_ = const_cast< ::com::google::openrtb::NativeResponse*>(&::com::google::openrtb::NativeResponse::default_instance());
}

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_adm_oneof();
}

BidResponse_SeatBid_Bid::~BidResponse_SeatBid_Bid() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse.SeatBid.Bid)
  SharedDtor();
}

void BidResponse_SeatBid_Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iurl_;
  }
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (dealid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dealid_;
  }
  if (has_adm_oneof()) {
    clear_adm_oneof();
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_descriptor_;
}

const BidResponse_SeatBid_Bid& BidResponse_SeatBid_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::default_instance_ = NULL;

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::New() const {
  return new BidResponse_SeatBid_Bid;
}

void BidResponse_SeatBid_Bid::clear_adm_oneof() {
  switch(adm_oneof_case()) {
    case kAdm: {
      delete adm_oneof_.adm_;
      break;
    }
    case kAdmNative: {
      delete adm_oneof_.adm_native_;
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADM_ONEOF_NOT_SET;
}


void BidResponse_SeatBid_Bid::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 31) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impid_->clear();
      }
    }
    price_ = 0;
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adid_->clear();
      }
    }
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 52992) {
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_iurl()) {
      if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iurl_->clear();
      }
    }
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cid_->clear();
      }
    }
    if (has_crid()) {
      if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crid_->clear();
      }
    }
    if (has_dealid()) {
      if (dealid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dealid_->clear();
      }
    }
    w_ = 0;
  }
  h_ = 0;
  adomain_.Clear();
  cat_.Clear();
  attr_.Clear();
  clear_adm_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }

      // required double price = 3;
      case 3: {
        if (tag == 25) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adid;
        break;
      }

      // optional string adid = 4;
      case 4: {
        if (tag == 34) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nurl;
        break;
      }

      // optional string nurl = 5;
      case 5: {
        if (tag == 42) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adm;
        break;
      }

      // optional string adm = 6;
      case 6: {
        if (tag == 50) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adomain;
        break;
      }

      // repeated string adomain = 7;
      case 7: {
        if (tag == 58) {
         parse_adomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_adomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adomain(this->adomain_size() - 1).data(),
            this->adomain(this->adomain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adomain;
        if (input->ExpectTag(66)) goto parse_iurl;
        break;
      }

      // optional string iurl = 8;
      case 8: {
        if (tag == 66) {
         parse_iurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iurl().data(), this->iurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cid;
        break;
      }

      // optional string cid = 9;
      case 9: {
        if (tag == 74) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_crid;
        break;
      }

      // optional string crid = 10;
      case 10: {
        if (tag == 82) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_attr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_attr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_attr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 88) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_attr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_dealid;
        break;
      }

      // optional string dealid = 13;
      case 13: {
        if (tag == 106) {
         parse_dealid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dealid().data(), this->dealid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dealid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bundle;
        break;
      }

      // optional string bundle = 14;
      case 14: {
        if (tag == 114) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cat;
        break;
      }

      // repeated string cat = 15;
      case 15: {
        if (tag == 122) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cat;
        if (input->ExpectTag(128)) goto parse_w;
        break;
      }

      // optional int32 w = 16;
      case 16: {
        if (tag == 128) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_h;
        break;
      }

      // optional int32 h = 17;
      case 17: {
        if (tag == 136) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_adm_native;
        break;
      }

      // optional .com.google.openrtb.NativeResponse adm_native = 50;
      case 50: {
        if (tag == 402) {
         parse_adm_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adm_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse.SeatBid.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse.SeatBid.Bid)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->adid(), output);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nurl(), output);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->adm(), output);
  }

  // repeated string adomain = 7;
  for (int i = 0; i < this->adomain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->adomain(i).data(), this->adomain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "adomain");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->adomain(i), output);
  }

  // optional string iurl = 8;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->iurl(), output);
  }

  // optional string cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cid(), output);
  }

  // optional string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->crid(), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  if (this->attr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_attr_cached_byte_size_);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->attr(i), output);
  }

  // optional string dealid = 13;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dealid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->dealid(), output);
  }

  // optional string bundle = 14;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->bundle(), output);
  }

  // repeated string cat = 15;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->cat(i), output);
  }

  // optional int32 w = 16;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->w(), output);
  }

  // optional int32 h = 17;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->h(), output);
  }

  // optional .com.google.openrtb.NativeResponse adm_native = 50;
  if (has_adm_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->adm_native(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse.SeatBid.Bid)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->adid(), target);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nurl(), target);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->adm(), target);
  }

  // repeated string adomain = 7;
  for (int i = 0; i < this->adomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain(i).data(), this->adomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adomain");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->adomain(i), target);
  }

  // optional string iurl = 8;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->iurl(), target);
  }

  // optional string cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cid(), target);
  }

  // optional string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->crid(), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  if (this->attr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _attr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->attr(i), target);
  }

  // optional string dealid = 13;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dealid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->dealid(), target);
  }

  // optional string bundle = 14;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bundle(), target);
  }

  // repeated string cat = 15;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->cat(i), target);
  }

  // optional int32 w = 16;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->w(), target);
  }

  // optional int32 h = 17;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->h(), target);
  }

  // optional .com.google.openrtb.NativeResponse adm_native = 50;
  if (has_adm_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->adm_native(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse.SeatBid.Bid)
  return target;
}

int BidResponse_SeatBid_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string impid = 2;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // required double price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional string adid = 4;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string nurl = 5;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bundle = 14;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional string iurl = 8;
    if (has_iurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iurl());
    }

    // optional string cid = 9;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string crid = 10;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

    // optional string dealid = 13;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealid());
    }

    // optional int32 w = 16;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 h = 17;
    if (has_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  // repeated string adomain = 7;
  total_size += 1 * this->adomain_size();
  for (int i = 0; i < this->adomain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->adomain(i));
  }

  // repeated string cat = 15;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->attr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (adm_oneof_case()) {
    // optional string adm = 6;
    case kAdm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm());
      break;
    }
    // optional .com.google.openrtb.NativeResponse adm_native = 50;
    case kAdmNative: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adm_native());
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid::MergeFrom(const BidResponse_SeatBid_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  adomain_.MergeFrom(from.adomain_);
  cat_.MergeFrom(from.cat_);
  attr_.MergeFrom(from.attr_);
  switch (from.adm_oneof_case()) {
    case kAdm: {
      set_adm(from.adm());
      break;
    }
    case kAdmNative: {
      mutable_adm_native()->::com::google::openrtb::NativeResponse::MergeFrom(from.adm_native());
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_iurl()) {
      set_iurl(from.iurl());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_crid()) {
      set_crid(from.crid());
    }
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid::CopyFrom(const BidResponse_SeatBid_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_adm_native()) {
    if (!this->adm_native().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_SeatBid_Bid::Swap(BidResponse_SeatBid_Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impid_, other->impid_);
    std::swap(price_, other->price_);
    std::swap(adid_, other->adid_);
    std::swap(nurl_, other->nurl_);
    adomain_.Swap(&other->adomain_);
    std::swap(bundle_, other->bundle_);
    std::swap(iurl_, other->iurl_);
    std::swap(cid_, other->cid_);
    std::swap(crid_, other->crid_);
    cat_.Swap(&other->cat_);
    attr_.Swap(&other->attr_);
    std::swap(dealid_, other->dealid_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(adm_oneof_, other->adm_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid::kBidFieldNumber;
const int BidResponse_SeatBid::kSeatFieldNumber;
const int BidResponse_SeatBid::kGroupFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse.SeatBid)
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse.SeatBid)
}

void BidResponse_SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse.SeatBid)
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New() const {
  return new BidResponse_SeatBid;
}

void BidResponse_SeatBid::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 6) {
    if (has_seat()) {
      if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seat_->clear();
      }
    }
    group_ = false;
  }
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
      case 1: {
        if (tag == 10) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // optional string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional bool group = 3;
      case 3: {
        if (tag == 24) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse.SeatBid)
  return false;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse.SeatBid)
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  // optional bool group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->group(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse.SeatBid)
}

::google::protobuf::uint8* BidResponse_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse.SeatBid)
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  // optional bool group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->group(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse.SeatBid)
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

    // optional bool group = 3;
    if (has_group()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(seat_, other->seat_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kIdFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kBididFieldNumber;
const int BidResponse::kCurFieldNumber;
const int BidResponse::kCustomdataFieldNumber;
const int BidResponse::kNbrFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_;
  }
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdata_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 61) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
    if (has_cur()) {
      if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cur_->clear();
      }
    }
    if (has_customdata()) {
      if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdata_->clear();
      }
    }
    nbr_ = 0;
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        if (input->ExpectTag(26)) goto parse_bidid;
        break;
      }

      // optional string bidid = 3;
      case 3: {
        if (tag == 26) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cur;
        break;
      }

      // optional string cur = 4;
      case 4: {
        if (tag == 34) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur().data(), this->cur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_customdata;
        break;
      }

      // optional string customdata = 5;
      case 5: {
        if (tag == 42) {
         parse_customdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdata().data(), this->customdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nbr;
        break;
      }

      // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
      case 6: {
        if (tag == 48) {
         parse_nbr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidResponse_NoBidReason_IsValid(value)) {
            set_nbr(static_cast< ::com::google::openrtb::BidResponse_NoBidReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidid(), output);
  }

  // optional string cur = 4;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cur(), output);
  }

  // optional string customdata = 5;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->customdata(), output);
  }

  // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
  if (has_nbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->nbr(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seatbid(i), target);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidid(), target);
  }

  // optional string cur = 4;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cur(), target);
  }

  // optional string customdata = 5;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->customdata(), target);
  }

  // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
  if (has_nbr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->nbr(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string bidid = 3;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

    // optional string cur = 4;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur());
    }

    // optional string customdata = 5;
    if (has_customdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdata());
    }

    // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
    if (has_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbr());
    }

  }
  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_customdata()) {
      set_customdata(from.customdata());
    }
    if (from.has_nbr()) {
      set_nbr(from.nbr());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(bidid_, other->bidid_);
    std::swap(cur_, other->cur_);
    std::swap(customdata_, other->customdata_);
    std::swap(nbr_, other->nbr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NativeRequest_LayoutId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_LayoutId_descriptor_;
}
bool NativeRequest_LayoutId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NativeRequest_LayoutId NativeRequest::CONTENT_WALL;
const NativeRequest_LayoutId NativeRequest::APP_WALL;
const NativeRequest_LayoutId NativeRequest::NEWS_FEED;
const NativeRequest_LayoutId NativeRequest::CHAT_LIST;
const NativeRequest_LayoutId NativeRequest::CAROUSEL;
const NativeRequest_LayoutId NativeRequest::CONTENT_STREAM;
const NativeRequest_LayoutId NativeRequest::GRID;
const NativeRequest_LayoutId NativeRequest::LayoutId_MIN;
const NativeRequest_LayoutId NativeRequest::LayoutId_MAX;
const int NativeRequest::LayoutId_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NativeRequest_AdUnitId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_AdUnitId_descriptor_;
}
bool NativeRequest_AdUnitId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NativeRequest_AdUnitId NativeRequest::PAID_SEARCH_UNIT;
const NativeRequest_AdUnitId NativeRequest::RECOMMENDATION_WIDGET;
const NativeRequest_AdUnitId NativeRequest::PROMOTED_LISTING;
const NativeRequest_AdUnitId NativeRequest::IAB_IN_AD_NATIVE;
const NativeRequest_AdUnitId NativeRequest::CUSTOM;
const NativeRequest_AdUnitId NativeRequest::AdUnitId_MIN;
const NativeRequest_AdUnitId NativeRequest::AdUnitId_MAX;
const int NativeRequest::AdUnitId_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NativeRequest_Asset_Title::kLenFieldNumber;
#endif  // !_MSC_VER

NativeRequest_Asset_Title::NativeRequest_Asset_Title()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Title)
}

void NativeRequest_Asset_Title::InitAsDefaultInstance() {
}

NativeRequest_Asset_Title::NativeRequest_Asset_Title(const NativeRequest_Asset_Title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Title)
}

void NativeRequest_Asset_Title::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Title::~NativeRequest_Asset_Title() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Title)
  SharedDtor();
}

void NativeRequest_Asset_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Title_descriptor_;
}

const NativeRequest_Asset_Title& NativeRequest_Asset_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Title* NativeRequest_Asset_Title::default_instance_ = NULL;

NativeRequest_Asset_Title* NativeRequest_Asset_Title::New() const {
  return new NativeRequest_Asset_Title;
}

void NativeRequest_Asset_Title::Clear() {
  _extensions_.Clear();
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeRequest_Asset_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Title)
  return false;
#undef DO_
}

void NativeRequest_Asset_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Title)
  // required int32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Title)
}

::google::protobuf::uint8* NativeRequest_Asset_Title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Title)
  // required int32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Title)
  return target;
}

int NativeRequest_Asset_Title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeRequest_Asset_Title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeRequest_Asset_Title*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Title::MergeFrom(const NativeRequest_Asset_Title& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeRequest_Asset_Title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Title::CopyFrom(const NativeRequest_Asset_Title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Title::Swap(NativeRequest_Asset_Title* other) {
  if (other != this) {
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeRequest_Asset_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Title_descriptor_;
  metadata.reflection = NativeRequest_Asset_Title_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Image_ImageAssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Image_ImageAssetType_descriptor_;
}
bool NativeRequest_Asset_Image_ImageAssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ICON;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::LOGO;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::MAIN;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ImageAssetType_MIN;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ImageAssetType_MAX;
const int NativeRequest_Asset_Image::ImageAssetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NativeRequest_Asset_Image::kTypeFieldNumber;
const int NativeRequest_Asset_Image::kWFieldNumber;
const int NativeRequest_Asset_Image::kHFieldNumber;
const int NativeRequest_Asset_Image::kWminFieldNumber;
const int NativeRequest_Asset_Image::kHminFieldNumber;
const int NativeRequest_Asset_Image::kMimesFieldNumber;
#endif  // !_MSC_VER

NativeRequest_Asset_Image::NativeRequest_Asset_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Image)
}

void NativeRequest_Asset_Image::InitAsDefaultInstance() {
}

NativeRequest_Asset_Image::NativeRequest_Asset_Image(const NativeRequest_Asset_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Image)
}

void NativeRequest_Asset_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  w_ = 0;
  h_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Image::~NativeRequest_Asset_Image() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Image)
  SharedDtor();
}

void NativeRequest_Asset_Image::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Image_descriptor_;
}

const NativeRequest_Asset_Image& NativeRequest_Asset_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Image* NativeRequest_Asset_Image::default_instance_ = NULL;

NativeRequest_Asset_Image* NativeRequest_Asset_Image::New() const {
  return new NativeRequest_Asset_Image;
}

void NativeRequest_Asset_Image::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NativeRequest_Asset_Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(w_, wmin_);
    type_ = 1;
    hmin_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeRequest_Asset_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 4;
      case 4: {
        if (tag == 32) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 5;
      case 5: {
        if (tag == 40) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 6;
      case 6: {
        if (tag == 50) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Image)
  return false;
#undef DO_
}

void NativeRequest_Asset_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Image)
  // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // optional int32 wmin = 4;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wmin(), output);
  }

  // optional int32 hmin = 5;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hmin(), output);
  }

  // repeated string mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mimes(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Image)
}

::google::protobuf::uint8* NativeRequest_Asset_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Image)
  // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // optional int32 wmin = 4;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wmin(), target);
  }

  // optional int32 hmin = 5;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hmin(), target);
  }

  // repeated string mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->mimes(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Image)
  return target;
}

int NativeRequest_Asset_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmin = 4;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 5;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

  }
  // repeated string mimes = 6;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeRequest_Asset_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeRequest_Asset_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Image::MergeFrom(const NativeRequest_Asset_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeRequest_Asset_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Image::CopyFrom(const NativeRequest_Asset_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Image::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Image::Swap(NativeRequest_Asset_Image* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(wmin_, other->wmin_);
    std::swap(hmin_, other->hmin_);
    mimes_.Swap(&other->mimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeRequest_Asset_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Image_descriptor_;
  metadata.reflection = NativeRequest_Asset_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Data_DataAssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Data_DataAssetType_descriptor_;
}
bool NativeRequest_Asset_Data_DataAssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::SPONSORED;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DESC;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::RATING;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::LIKES;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DOWNLOADS;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::PRICE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::SALEPRICE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::PHONE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::ADDRESS;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DESC2;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DISPLAYURL;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::CTATEXT;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DataAssetType_MIN;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DataAssetType_MAX;
const int NativeRequest_Asset_Data::DataAssetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NativeRequest_Asset_Data::kTypeFieldNumber;
const int NativeRequest_Asset_Data::kLenFieldNumber;
#endif  // !_MSC_VER

NativeRequest_Asset_Data::NativeRequest_Asset_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Data)
}

void NativeRequest_Asset_Data::InitAsDefaultInstance() {
}

NativeRequest_Asset_Data::NativeRequest_Asset_Data(const NativeRequest_Asset_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Data)
}

void NativeRequest_Asset_Data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Data::~NativeRequest_Asset_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Data)
  SharedDtor();
}

void NativeRequest_Asset_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Data_descriptor_;
}

const NativeRequest_Asset_Data& NativeRequest_Asset_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Data* NativeRequest_Asset_Data::default_instance_ = NULL;

NativeRequest_Asset_Data* NativeRequest_Asset_Data::New() const {
  return new NativeRequest_Asset_Data;
}

void NativeRequest_Asset_Data::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    len_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeRequest_Asset_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional int32 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Data)
  return false;
#undef DO_
}

void NativeRequest_Asset_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Data)
  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Data)
}

::google::protobuf::uint8* NativeRequest_Asset_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Data)
  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Data)
  return target;
}

int NativeRequest_Asset_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeRequest_Asset_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeRequest_Asset_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Data::MergeFrom(const NativeRequest_Asset_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeRequest_Asset_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Data::CopyFrom(const NativeRequest_Asset_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Data::Swap(NativeRequest_Asset_Data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeRequest_Asset_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Data_descriptor_;
  metadata.reflection = NativeRequest_Asset_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeRequest_Asset::kIdFieldNumber;
const int NativeRequest_Asset::kRequiredFieldNumber;
const int NativeRequest_Asset::kTitleFieldNumber;
const int NativeRequest_Asset::kImgFieldNumber;
const int NativeRequest_Asset::kVideoFieldNumber;
const int NativeRequest_Asset::kDataFieldNumber;
#endif  // !_MSC_VER

NativeRequest_Asset::NativeRequest_Asset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset)
}

void NativeRequest_Asset::InitAsDefaultInstance() {
  NativeRequest_Asset_default_oneof_instance_->title_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Title*>(&::com::google::openrtb::NativeRequest_Asset_Title::default_instance());
  NativeRequest_Asset_default_oneof_instance_->img_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Image*>(&::com::google::openrtb::NativeRequest_Asset_Image::default_instance());
  NativeRequest_Asset_default_oneof_instance_->video_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video*>(&::com::google::openrtb::BidRequest_Imp_Video::default_instance());
  NativeRequest_Asset_default_oneof_instance_->data_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Data*>(&::com::google::openrtb::NativeRequest_Asset_Data::default_instance());
}

NativeRequest_Asset::NativeRequest_Asset(const NativeRequest_Asset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset)
}

void NativeRequest_Asset::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  required_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_asset_oneof();
}

NativeRequest_Asset::~NativeRequest_Asset() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset)
  SharedDtor();
}

void NativeRequest_Asset::SharedDtor() {
  if (has_asset_oneof()) {
    clear_asset_oneof();
  }
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_descriptor_;
}

const NativeRequest_Asset& NativeRequest_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset* NativeRequest_Asset::default_instance_ = NULL;

NativeRequest_Asset* NativeRequest_Asset::New() const {
  return new NativeRequest_Asset;
}

void NativeRequest_Asset::clear_asset_oneof() {
  switch(asset_oneof_case()) {
    case kTitle: {
      delete asset_oneof_.title_;
      break;
    }
    case kImg: {
      delete asset_oneof_.img_;
      break;
    }
    case kVideo: {
      delete asset_oneof_.video_;
      break;
    }
    case kData: {
      delete asset_oneof_.data_;
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}


void NativeRequest_Asset::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NativeRequest_Asset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, required_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_asset_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeRequest_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_required;
        break;
      }

      // optional bool required = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
      case 4: {
        if (tag == 34) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset)
  return false;
#undef DO_
}

void NativeRequest_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->required(), output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title(), output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video(), output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset)
}

::google::protobuf::uint8* NativeRequest_Asset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->required(), target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title(), target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video(), target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset)
  return target;
}

int NativeRequest_Asset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool required = 2 [default = false];
    if (has_required()) {
      total_size += 1 + 1;
    }

  }
  switch (asset_oneof_case()) {
    // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
    case kTitle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
      break;
    }
    // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
    case kImg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
      break;
    }
    // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
      break;
    }
    // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeRequest_Asset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeRequest_Asset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeRequest_Asset::MergeFrom(const NativeRequest_Asset& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.asset_oneof_case()) {
    case kTitle: {
      mutable_title()->::com::google::openrtb::NativeRequest_Asset_Title::MergeFrom(from.title());
      break;
    }
    case kImg: {
      mutable_img()->::com::google::openrtb::NativeRequest_Asset_Image::MergeFrom(from.img());
      break;
    }
    case kVideo: {
      mutable_video()->::com::google::openrtb::BidRequest_Imp_Video::MergeFrom(from.video());
      break;
    }
    case kData: {
      mutable_data()->::com::google::openrtb::NativeRequest_Asset_Data::MergeFrom(from.data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeRequest_Asset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset::CopyFrom(const NativeRequest_Asset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_img()) {
    if (!this->img().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset::Swap(NativeRequest_Asset* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(required_, other->required_);
    std::swap(asset_oneof_, other->asset_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeRequest_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_descriptor_;
  metadata.reflection = NativeRequest_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeRequest::kVerFieldNumber;
const int NativeRequest::kLayoutFieldNumber;
const int NativeRequest::kAdunitFieldNumber;
const int NativeRequest::kPlcmtcntFieldNumber;
const int NativeRequest::kSeqFieldNumber;
const int NativeRequest::kAssetsFieldNumber;
#endif  // !_MSC_VER

NativeRequest::NativeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest)
}

void NativeRequest::InitAsDefaultInstance() {
}

NativeRequest::NativeRequest(const NativeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest)
}

void NativeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_ = 1;
  adunit_ = 1;
  plcmtcnt_ = 1;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest::~NativeRequest() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest)
  SharedDtor();
}

void NativeRequest::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (this != default_instance_) {
  }
}

void NativeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_descriptor_;
}

const NativeRequest& NativeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest* NativeRequest::default_instance_ = NULL;

NativeRequest* NativeRequest::New() const {
  return new NativeRequest;
}

void NativeRequest::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 31) {
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    layout_ = 1;
    adunit_ = 1;
    plcmtcnt_ = 1;
    seq_ = 0;
  }
  assets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_layout;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
      case 2: {
        if (tag == 16) {
         parse_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_LayoutId_IsValid(value)) {
            set_layout(static_cast< ::com::google::openrtb::NativeRequest_LayoutId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adunit;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
      case 3: {
        if (tag == 24) {
         parse_adunit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_AdUnitId_IsValid(value)) {
            set_adunit(static_cast< ::com::google::openrtb::NativeRequest_AdUnitId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plcmtcnt;
        break;
      }

      // optional int32 plcmtcnt = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_plcmtcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plcmtcnt_)));
          set_has_plcmtcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // optional int32 seq = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assets;
        break;
      }

      // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
      case 6: {
        if (tag == 50) {
         parse_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest)
  return false;
#undef DO_
}

void NativeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ver(), output);
  }

  // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->layout(), output);
  }

  // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
  if (has_adunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adunit(), output);
  }

  // optional int32 plcmtcnt = 4 [default = 1];
  if (has_plcmtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plcmtcnt(), output);
  }

  // optional int32 seq = 5 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  for (int i = 0; i < this->assets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->assets(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest)
}

::google::protobuf::uint8* NativeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ver(), target);
  }

  // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
  if (has_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->layout(), target);
  }

  // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
  if (has_adunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adunit(), target);
  }

  // optional int32 plcmtcnt = 4 [default = 1];
  if (has_plcmtcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plcmtcnt(), target);
  }

  // optional int32 seq = 5 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  for (int i = 0; i < this->assets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->assets(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest)
  return target;
}

int NativeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->layout());
    }

    // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
    if (has_adunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adunit());
    }

    // optional int32 plcmtcnt = 4 [default = 1];
    if (has_plcmtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plcmtcnt());
    }

    // optional int32 seq = 5 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeRequest::MergeFrom(const NativeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  assets_.MergeFrom(from.assets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_adunit()) {
      set_adunit(from.adunit());
    }
    if (from.has_plcmtcnt()) {
      set_plcmtcnt(from.plcmtcnt());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest::CopyFrom(const NativeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest::Swap(NativeRequest* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(layout_, other->layout_);
    std::swap(adunit_, other->adunit_);
    std::swap(plcmtcnt_, other->plcmtcnt_);
    std::swap(seq_, other->seq_);
    assets_.Swap(&other->assets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_descriptor_;
  metadata.reflection = NativeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NativeResponse_Link::kUrlFieldNumber;
const int NativeResponse_Link::kClicktrackersFieldNumber;
const int NativeResponse_Link::kFallbackFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Link::NativeResponse_Link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Link)
}

void NativeResponse_Link::InitAsDefaultInstance() {
}

NativeResponse_Link::NativeResponse_Link(const NativeResponse_Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Link)
}

void NativeResponse_Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fallback_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Link::~NativeResponse_Link() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Link)
  SharedDtor();
}

void NativeResponse_Link::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (fallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fallback_;
  }
  if (this != default_instance_) {
  }
}

void NativeResponse_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Link_descriptor_;
}

const NativeResponse_Link& NativeResponse_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Link* NativeResponse_Link::default_instance_ = NULL;

NativeResponse_Link* NativeResponse_Link::New() const {
  return new NativeResponse_Link;
}

void NativeResponse_Link::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_fallback()) {
      if (fallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fallback_->clear();
      }
    }
  }
  clicktrackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clicktrackers;
        break;
      }

      // repeated string clicktrackers = 2;
      case 2: {
        if (tag == 18) {
         parse_clicktrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clicktrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clicktrackers(this->clicktrackers_size() - 1).data(),
            this->clicktrackers(this->clicktrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clicktrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clicktrackers;
        if (input->ExpectTag(26)) goto parse_fallback;
        break;
      }

      // optional string fallback = 3;
      case 3: {
        if (tag == 26) {
         parse_fallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fallback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fallback().data(), this->fallback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fallback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Link)
  return false;
#undef DO_
}

void NativeResponse_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Link)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string clicktrackers = 2;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->clicktrackers(i).data(), this->clicktrackers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "clicktrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clicktrackers(i), output);
  }

  // optional string fallback = 3;
  if (has_fallback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback().data(), this->fallback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fallback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fallback(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Link)
}

::google::protobuf::uint8* NativeResponse_Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Link)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string clicktrackers = 2;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clicktrackers(i).data(), this->clicktrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clicktrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->clicktrackers(i), target);
  }

  // optional string fallback = 3;
  if (has_fallback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback().data(), this->fallback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fallback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fallback(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Link)
  return target;
}

int NativeResponse_Link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string fallback = 3;
    if (has_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fallback());
    }

  }
  // repeated string clicktrackers = 2;
  total_size += 1 * this->clicktrackers_size();
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clicktrackers(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Link::MergeFrom(const NativeResponse_Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  clicktrackers_.MergeFrom(from.clicktrackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_fallback()) {
      set_fallback(from.fallback());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Link::CopyFrom(const NativeResponse_Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Link::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Link::Swap(NativeResponse_Link* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    clicktrackers_.Swap(&other->clicktrackers_);
    std::swap(fallback_, other->fallback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Link_descriptor_;
  metadata.reflection = NativeResponse_Link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse_Asset_Title::kTextFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Asset_Title::NativeResponse_Asset_Title()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Title)
}

void NativeResponse_Asset_Title::InitAsDefaultInstance() {
}

NativeResponse_Asset_Title::NativeResponse_Asset_Title(const NativeResponse_Asset_Title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Title)
}

void NativeResponse_Asset_Title::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Title::~NativeResponse_Asset_Title() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Title)
  SharedDtor();
}

void NativeResponse_Asset_Title::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Title_descriptor_;
}

const NativeResponse_Asset_Title& NativeResponse_Asset_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Title* NativeResponse_Asset_Title::default_instance_ = NULL;

NativeResponse_Asset_Title* NativeResponse_Asset_Title::New() const {
  return new NativeResponse_Asset_Title;
}

void NativeResponse_Asset_Title::Clear() {
  _extensions_.Clear();
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Asset_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Title)
  return false;
#undef DO_
}

void NativeResponse_Asset_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Title)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Title)
}

::google::protobuf::uint8* NativeResponse_Asset_Title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Title)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Title)
  return target;
}

int NativeResponse_Asset_Title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Asset_Title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Asset_Title*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Title::MergeFrom(const NativeResponse_Asset_Title& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Asset_Title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Title::CopyFrom(const NativeResponse_Asset_Title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Title::Swap(NativeResponse_Asset_Title* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Asset_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Title_descriptor_;
  metadata.reflection = NativeResponse_Asset_Title_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse_Asset_Image::kUrlFieldNumber;
const int NativeResponse_Asset_Image::kWFieldNumber;
const int NativeResponse_Asset_Image::kHFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Asset_Image::NativeResponse_Asset_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Image)
}

void NativeResponse_Asset_Image::InitAsDefaultInstance() {
}

NativeResponse_Asset_Image::NativeResponse_Asset_Image(const NativeResponse_Asset_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Image)
}

void NativeResponse_Asset_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Image::~NativeResponse_Asset_Image() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Image)
  SharedDtor();
}

void NativeResponse_Asset_Image::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Image_descriptor_;
}

const NativeResponse_Asset_Image& NativeResponse_Asset_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Image* NativeResponse_Asset_Image::default_instance_ = NULL;

NativeResponse_Asset_Image* NativeResponse_Asset_Image::New() const {
  return new NativeResponse_Asset_Image;
}

void NativeResponse_Asset_Image::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NativeResponse_Asset_Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(w_, h_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Asset_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Image)
  return false;
#undef DO_
}

void NativeResponse_Asset_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Image)
}

::google::protobuf::uint8* NativeResponse_Asset_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Image)
  return target;
}

int NativeResponse_Asset_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Asset_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Asset_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Image::MergeFrom(const NativeResponse_Asset_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Asset_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Image::CopyFrom(const NativeResponse_Asset_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Image::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Image::Swap(NativeResponse_Asset_Image* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Asset_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Image_descriptor_;
  metadata.reflection = NativeResponse_Asset_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse_Asset_Data::kLabelFieldNumber;
const int NativeResponse_Asset_Data::kValueFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Asset_Data::NativeResponse_Asset_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Data)
}

void NativeResponse_Asset_Data::InitAsDefaultInstance() {
}

NativeResponse_Asset_Data::NativeResponse_Asset_Data(const NativeResponse_Asset_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Data)
}

void NativeResponse_Asset_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Data::~NativeResponse_Asset_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Data)
  SharedDtor();
}

void NativeResponse_Asset_Data::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Data_descriptor_;
}

const NativeResponse_Asset_Data& NativeResponse_Asset_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Data* NativeResponse_Asset_Data::default_instance_ = NULL;

NativeResponse_Asset_Data* NativeResponse_Asset_Data::New() const {
  return new NativeResponse_Asset_Data;
}

void NativeResponse_Asset_Data::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Asset_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Data)
  return false;
#undef DO_
}

void NativeResponse_Asset_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Data)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Data)
}

::google::protobuf::uint8* NativeResponse_Asset_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Data)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Data)
  return target;
}

int NativeResponse_Asset_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Asset_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Asset_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Data::MergeFrom(const NativeResponse_Asset_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Asset_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Data::CopyFrom(const NativeResponse_Asset_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Data::Swap(NativeResponse_Asset_Data* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Asset_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Data_descriptor_;
  metadata.reflection = NativeResponse_Asset_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse_Asset_Video::kVasttagFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Asset_Video::NativeResponse_Asset_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Video)
}

void NativeResponse_Asset_Video::InitAsDefaultInstance() {
}

NativeResponse_Asset_Video::NativeResponse_Asset_Video(const NativeResponse_Asset_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Video)
}

void NativeResponse_Asset_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vasttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Video::~NativeResponse_Asset_Video() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Video)
  SharedDtor();
}

void NativeResponse_Asset_Video::SharedDtor() {
  if (vasttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vasttag_;
  }
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Video_descriptor_;
}

const NativeResponse_Asset_Video& NativeResponse_Asset_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Video* NativeResponse_Asset_Video::default_instance_ = NULL;

NativeResponse_Asset_Video* NativeResponse_Asset_Video::New() const {
  return new NativeResponse_Asset_Video;
}

void NativeResponse_Asset_Video::Clear() {
  _extensions_.Clear();
  if (has_vasttag()) {
    if (vasttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      vasttag_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Asset_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vasttag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vasttag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vasttag().data(), this->vasttag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vasttag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Video)
  return false;
#undef DO_
}

void NativeResponse_Asset_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Video)
  // optional string vasttag = 1;
  if (has_vasttag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vasttag().data(), this->vasttag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vasttag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vasttag(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Video)
}

::google::protobuf::uint8* NativeResponse_Asset_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Video)
  // optional string vasttag = 1;
  if (has_vasttag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vasttag().data(), this->vasttag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vasttag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vasttag(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Video)
  return target;
}

int NativeResponse_Asset_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vasttag = 1;
    if (has_vasttag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vasttag());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Asset_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Asset_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Video::MergeFrom(const NativeResponse_Asset_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vasttag()) {
      set_vasttag(from.vasttag());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Asset_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Video::CopyFrom(const NativeResponse_Asset_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Video::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Video::Swap(NativeResponse_Asset_Video* other) {
  if (other != this) {
    std::swap(vasttag_, other->vasttag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Asset_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Video_descriptor_;
  metadata.reflection = NativeResponse_Asset_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse_Asset::kIdFieldNumber;
const int NativeResponse_Asset::kRequiredFieldNumber;
const int NativeResponse_Asset::kTitleFieldNumber;
const int NativeResponse_Asset::kImgFieldNumber;
const int NativeResponse_Asset::kVideoFieldNumber;
const int NativeResponse_Asset::kDataFieldNumber;
const int NativeResponse_Asset::kLinkFieldNumber;
#endif  // !_MSC_VER

NativeResponse_Asset::NativeResponse_Asset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset)
}

void NativeResponse_Asset::InitAsDefaultInstance() {
  NativeResponse_Asset_default_oneof_instance_->title_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Title*>(&::com::google::openrtb::NativeResponse_Asset_Title::default_instance());
  NativeResponse_Asset_default_oneof_instance_->img_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Image*>(&::com::google::openrtb::NativeResponse_Asset_Image::default_instance());
  NativeResponse_Asset_default_oneof_instance_->video_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Video*>(&::com::google::openrtb::NativeResponse_Asset_Video::default_instance());
  NativeResponse_Asset_default_oneof_instance_->data_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Data*>(&::com::google::openrtb::NativeResponse_Asset_Data::default_instance());
  link_ = const_cast< ::com::google::openrtb::NativeResponse_Link*>(&::com::google::openrtb::NativeResponse_Link::default_instance());
}

NativeResponse_Asset::NativeResponse_Asset(const NativeResponse_Asset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset)
}

void NativeResponse_Asset::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  required_ = false;
  link_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_asset_oneof();
}

NativeResponse_Asset::~NativeResponse_Asset() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset)
  SharedDtor();
}

void NativeResponse_Asset::SharedDtor() {
  if (has_asset_oneof()) {
    clear_asset_oneof();
  }
  if (this != default_instance_) {
    delete link_;
  }
}

void NativeResponse_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_descriptor_;
}

const NativeResponse_Asset& NativeResponse_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset* NativeResponse_Asset::default_instance_ = NULL;

NativeResponse_Asset* NativeResponse_Asset::New() const {
  return new NativeResponse_Asset;
}

void NativeResponse_Asset::clear_asset_oneof() {
  switch(asset_oneof_case()) {
    case kTitle: {
      delete asset_oneof_.title_;
      break;
    }
    case kImg: {
      delete asset_oneof_.img_;
      break;
    }
    case kVideo: {
      delete asset_oneof_.video_;
      break;
    }
    case kData: {
      delete asset_oneof_.data_;
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}


void NativeResponse_Asset::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NativeResponse_Asset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 67) {
    ZR_(id_, required_);
    if (has_link()) {
      if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_asset_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_required;
        break;
      }

      // optional bool required = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
      case 4: {
        if (tag == 34) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_link;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Link link = 7;
      case 7: {
        if (tag == 58) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset)
  return false;
#undef DO_
}

void NativeResponse_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->required(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Link link = 7;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->link(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset)
}

::google::protobuf::uint8* NativeResponse_Asset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->required(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Link link = 7;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->link(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset)
  return target;
}

int NativeResponse_Asset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool required = 2 [default = false];
    if (has_required()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.NativeResponse.Link link = 7;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

  }
  switch (asset_oneof_case()) {
    // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
    case kTitle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
    case kImg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse_Asset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse_Asset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse_Asset::MergeFrom(const NativeResponse_Asset& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.asset_oneof_case()) {
    case kTitle: {
      mutable_title()->::com::google::openrtb::NativeResponse_Asset_Title::MergeFrom(from.title());
      break;
    }
    case kImg: {
      mutable_img()->::com::google::openrtb::NativeResponse_Asset_Image::MergeFrom(from.img());
      break;
    }
    case kVideo: {
      mutable_video()->::com::google::openrtb::NativeResponse_Asset_Video::MergeFrom(from.video());
      break;
    }
    case kData: {
      mutable_data()->::com::google::openrtb::NativeResponse_Asset_Data::MergeFrom(from.data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
    if (from.has_link()) {
      mutable_link()->::com::google::openrtb::NativeResponse_Link::MergeFrom(from.link());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse_Asset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset::CopyFrom(const NativeResponse_Asset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_img()) {
    if (!this->img().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_link()) {
    if (!this->link().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset::Swap(NativeResponse_Asset* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(required_, other->required_);
    std::swap(link_, other->link_);
    std::swap(asset_oneof_, other->asset_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_descriptor_;
  metadata.reflection = NativeResponse_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NativeResponse::kVerFieldNumber;
const int NativeResponse::kAssetsFieldNumber;
const int NativeResponse::kLinkFieldNumber;
const int NativeResponse::kImptrackersFieldNumber;
const int NativeResponse::kJstrackerFieldNumber;
#endif  // !_MSC_VER

NativeResponse::NativeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse)
}

void NativeResponse::InitAsDefaultInstance() {
  link_ = const_cast< ::com::google::openrtb::NativeResponse_Link*>(&::com::google::openrtb::NativeResponse_Link::default_instance());
}

NativeResponse::NativeResponse(const NativeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse)
}

void NativeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_ = NULL;
  jstracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse::~NativeResponse() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse)
  SharedDtor();
}

void NativeResponse::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (jstracker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jstracker_;
  }
  if (this != default_instance_) {
    delete link_;
  }
}

void NativeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_descriptor_;
}

const NativeResponse& NativeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse* NativeResponse::default_instance_ = NULL;

NativeResponse* NativeResponse::New() const {
  return new NativeResponse;
}

void NativeResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 21) {
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    if (has_link()) {
      if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
    }
    if (has_jstracker()) {
      if (jstracker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jstracker_->clear();
      }
    }
  }
  assets_.Clear();
  imptrackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_assets;
        break;
      }

      // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
      case 2: {
        if (tag == 18) {
         parse_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_assets;
        if (input->ExpectTag(26)) goto parse_link;
        break;
      }

      // required .com.google.openrtb.NativeResponse.Link link = 3;
      case 3: {
        if (tag == 26) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imptrackers;
        break;
      }

      // repeated string imptrackers = 4;
      case 4: {
        if (tag == 34) {
         parse_imptrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imptrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imptrackers(this->imptrackers_size() - 1).data(),
            this->imptrackers(this->imptrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imptrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imptrackers;
        if (input->ExpectTag(42)) goto parse_jstracker;
        break;
      }

      // optional string jstracker = 5;
      case 5: {
        if (tag == 42) {
         parse_jstracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jstracker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jstracker().data(), this->jstracker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jstracker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse)
  return false;
#undef DO_
}

void NativeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ver(), output);
  }

  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  for (int i = 0; i < this->assets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assets(i), output);
  }

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->link(), output);
  }

  // repeated string imptrackers = 4;
  for (int i = 0; i < this->imptrackers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->imptrackers(i).data(), this->imptrackers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "imptrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imptrackers(i), output);
  }

  // optional string jstracker = 5;
  if (has_jstracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jstracker().data(), this->jstracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jstracker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->jstracker(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse)
}

::google::protobuf::uint8* NativeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ver(), target);
  }

  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  for (int i = 0; i < this->assets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->assets(i), target);
  }

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->link(), target);
  }

  // repeated string imptrackers = 4;
  for (int i = 0; i < this->imptrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imptrackers(i).data(), this->imptrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imptrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->imptrackers(i), target);
  }

  // optional string jstracker = 5;
  if (has_jstracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jstracker().data(), this->jstracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jstracker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jstracker(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse)
  return target;
}

int NativeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // required .com.google.openrtb.NativeResponse.Link link = 3;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

    // optional string jstracker = 5;
    if (has_jstracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jstracker());
    }

  }
  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  // repeated string imptrackers = 4;
  total_size += 1 * this->imptrackers_size();
  for (int i = 0; i < this->imptrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imptrackers(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeResponse::MergeFrom(const NativeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  assets_.MergeFrom(from.assets_);
  imptrackers_.MergeFrom(from.imptrackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_link()) {
      mutable_link()->::com::google::openrtb::NativeResponse_Link::MergeFrom(from.link());
    }
    if (from.has_jstracker()) {
      set_jstracker(from.jstracker());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse::CopyFrom(const NativeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;
  if (has_link()) {
    if (!this->link().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse::Swap(NativeResponse* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    assets_.Swap(&other->assets_);
    std::swap(link_, other->link_);
    imptrackers_.Swap(&other->imptrackers_);
    std::swap(jstracker_, other->jstracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NativeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_descriptor_;
  metadata.reflection = NativeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openrtb
}  // namespace google
}  // namespace com

// @@protoc_insertion_point(global_scope)
