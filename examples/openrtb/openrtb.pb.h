// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtb.proto

#ifndef PROTOBUF_openrtb_2eproto__INCLUDED
#define PROTOBUF_openrtb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace google {
namespace openrtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_openrtb_2eproto();
void protobuf_AssignDesc_openrtb_2eproto();
void protobuf_ShutdownFile_openrtb_2eproto();

class BidRequest;
class BidRequest_Imp;
class BidRequest_Imp_Banner;
class BidRequest_Imp_Video;
class BidRequest_Imp_Video_CompanionAd;
class BidRequest_Imp_Native;
class BidRequest_Imp_Pmp;
class BidRequest_Imp_Pmp_Deal;
class BidRequest_Site;
class BidRequest_App;
class BidRequest_Publisher;
class BidRequest_Content;
class BidRequest_Producer;
class BidRequest_Device;
class BidRequest_Geo;
class BidRequest_User;
class BidRequest_Data;
class BidRequest_Data_Segment;
class BidRequest_Regs;
class BidResponse;
class BidResponse_SeatBid;
class BidResponse_SeatBid_Bid;
class NativeRequest;
class NativeRequest_Asset;
class NativeRequest_Asset_Title;
class NativeRequest_Asset_Image;
class NativeRequest_Asset_Data;
class NativeResponse;
class NativeResponse_Link;
class NativeResponse_Asset;
class NativeResponse_Asset_Title;
class NativeResponse_Asset_Image;
class NativeResponse_Asset_Data;
class NativeResponse_Asset_Video;

enum BidRequest_Imp_Banner_BannerAdType {
  BidRequest_Imp_Banner_BannerAdType_XHTML_TEXT_AD = 1,
  BidRequest_Imp_Banner_BannerAdType_XHTML_BANNER_AD = 2,
  BidRequest_Imp_Banner_BannerAdType_JAVASCRIPT_AD = 3,
  BidRequest_Imp_Banner_BannerAdType_IFRAME = 4
};
bool BidRequest_Imp_Banner_BannerAdType_IsValid(int value);
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner_BannerAdType_BannerAdType_MIN = BidRequest_Imp_Banner_BannerAdType_XHTML_TEXT_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner_BannerAdType_BannerAdType_MAX = BidRequest_Imp_Banner_BannerAdType_IFRAME;
const int BidRequest_Imp_Banner_BannerAdType_BannerAdType_ARRAYSIZE = BidRequest_Imp_Banner_BannerAdType_BannerAdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_BannerAdType_descriptor();
inline const ::std::string& BidRequest_Imp_Banner_BannerAdType_Name(BidRequest_Imp_Banner_BannerAdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Banner_BannerAdType_descriptor(), value);
}
inline bool BidRequest_Imp_Banner_BannerAdType_Parse(
    const ::std::string& name, BidRequest_Imp_Banner_BannerAdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Banner_BannerAdType>(
    BidRequest_Imp_Banner_BannerAdType_descriptor(), name, value);
}
enum BidRequest_Imp_Banner_ExpandableDirection {
  BidRequest_Imp_Banner_ExpandableDirection_LEFT = 1,
  BidRequest_Imp_Banner_ExpandableDirection_RIGHT = 2,
  BidRequest_Imp_Banner_ExpandableDirection_UP = 3,
  BidRequest_Imp_Banner_ExpandableDirection_DOWN = 4,
  BidRequest_Imp_Banner_ExpandableDirection_EXPANDABLE_FULLSCREEN = 5
};
bool BidRequest_Imp_Banner_ExpandableDirection_IsValid(int value);
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_MIN = BidRequest_Imp_Banner_ExpandableDirection_LEFT;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_MAX = BidRequest_Imp_Banner_ExpandableDirection_EXPANDABLE_FULLSCREEN;
const int BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_ARRAYSIZE = BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_ExpandableDirection_descriptor();
inline const ::std::string& BidRequest_Imp_Banner_ExpandableDirection_Name(BidRequest_Imp_Banner_ExpandableDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Banner_ExpandableDirection_descriptor(), value);
}
inline bool BidRequest_Imp_Banner_ExpandableDirection_Parse(
    const ::std::string& name, BidRequest_Imp_Banner_ExpandableDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Banner_ExpandableDirection>(
    BidRequest_Imp_Banner_ExpandableDirection_descriptor(), name, value);
}
enum BidRequest_Imp_Video_VideoLinearity {
  BidRequest_Imp_Video_VideoLinearity_LINEAR = 1,
  BidRequest_Imp_Video_VideoLinearity_NON_LINEAR = 2
};
bool BidRequest_Imp_Video_VideoLinearity_IsValid(int value);
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video_VideoLinearity_VideoLinearity_MIN = BidRequest_Imp_Video_VideoLinearity_LINEAR;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video_VideoLinearity_VideoLinearity_MAX = BidRequest_Imp_Video_VideoLinearity_NON_LINEAR;
const int BidRequest_Imp_Video_VideoLinearity_VideoLinearity_ARRAYSIZE = BidRequest_Imp_Video_VideoLinearity_VideoLinearity_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoLinearity_descriptor();
inline const ::std::string& BidRequest_Imp_Video_VideoLinearity_Name(BidRequest_Imp_Video_VideoLinearity value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_VideoLinearity_descriptor(), value);
}
inline bool BidRequest_Imp_Video_VideoLinearity_Parse(
    const ::std::string& name, BidRequest_Imp_Video_VideoLinearity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_VideoLinearity>(
    BidRequest_Imp_Video_VideoLinearity_descriptor(), name, value);
}
enum BidRequest_Imp_Video_VideoBidResponseProtocol {
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_1_0 = 1,
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_2_0 = 2,
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_3_0 = 3,
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_1_0_WRAPPER = 4,
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_2_0_WRAPPER = 5,
  BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_3_0_WRAPPER = 6
};
bool BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(int value);
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_MIN = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_1_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_MAX = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_3_0_WRAPPER;
const int BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_ARRAYSIZE = BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor();
inline const ::std::string& BidRequest_Imp_Video_VideoBidResponseProtocol_Name(BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor(), value);
}
inline bool BidRequest_Imp_Video_VideoBidResponseProtocol_Parse(
    const ::std::string& name, BidRequest_Imp_Video_VideoBidResponseProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_VideoBidResponseProtocol>(
    BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor(), name, value);
}
enum BidRequest_Imp_Video_VideoPlaybackMethod {
  BidRequest_Imp_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_ON = 1,
  BidRequest_Imp_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_OFF = 2,
  BidRequest_Imp_Video_VideoPlaybackMethod_CLICK_TO_PLAY = 3,
  BidRequest_Imp_Video_VideoPlaybackMethod_MOUSE_OVER = 4
};
bool BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(int value);
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_MIN = BidRequest_Imp_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_ON;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX = BidRequest_Imp_Video_VideoPlaybackMethod_MOUSE_OVER;
const int BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_ARRAYSIZE = BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoPlaybackMethod_descriptor();
inline const ::std::string& BidRequest_Imp_Video_VideoPlaybackMethod_Name(BidRequest_Imp_Video_VideoPlaybackMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_VideoPlaybackMethod_descriptor(), value);
}
inline bool BidRequest_Imp_Video_VideoPlaybackMethod_Parse(
    const ::std::string& name, BidRequest_Imp_Video_VideoPlaybackMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_VideoPlaybackMethod>(
    BidRequest_Imp_Video_VideoPlaybackMethod_descriptor(), name, value);
}
enum BidRequest_Imp_Video_VideoStartDelay {
  BidRequest_Imp_Video_VideoStartDelay_PRE_ROLL = 0,
  BidRequest_Imp_Video_VideoStartDelay_GENERIC_MID_ROLL = -1,
  BidRequest_Imp_Video_VideoStartDelay_GENERIC_POST_ROLL = -2
};
bool BidRequest_Imp_Video_VideoStartDelay_IsValid(int value);
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_MIN = BidRequest_Imp_Video_VideoStartDelay_GENERIC_POST_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_MAX = BidRequest_Imp_Video_VideoStartDelay_PRE_ROLL;
const int BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_ARRAYSIZE = BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoStartDelay_descriptor();
inline const ::std::string& BidRequest_Imp_Video_VideoStartDelay_Name(BidRequest_Imp_Video_VideoStartDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_VideoStartDelay_descriptor(), value);
}
inline bool BidRequest_Imp_Video_VideoStartDelay_Parse(
    const ::std::string& name, BidRequest_Imp_Video_VideoStartDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_VideoStartDelay>(
    BidRequest_Imp_Video_VideoStartDelay_descriptor(), name, value);
}
enum BidRequest_Imp_Video_VASTCompanionType {
  BidRequest_Imp_Video_VASTCompanionType_STATIC = 1,
  BidRequest_Imp_Video_VASTCompanionType_HTML = 2,
  BidRequest_Imp_Video_VASTCompanionType_COMPANION_IFRAME = 3
};
bool BidRequest_Imp_Video_VASTCompanionType_IsValid(int value);
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_MIN = BidRequest_Imp_Video_VASTCompanionType_STATIC;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_MAX = BidRequest_Imp_Video_VASTCompanionType_COMPANION_IFRAME;
const int BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_ARRAYSIZE = BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VASTCompanionType_descriptor();
inline const ::std::string& BidRequest_Imp_Video_VASTCompanionType_Name(BidRequest_Imp_Video_VASTCompanionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_VASTCompanionType_descriptor(), value);
}
inline bool BidRequest_Imp_Video_VASTCompanionType_Parse(
    const ::std::string& name, BidRequest_Imp_Video_VASTCompanionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_VASTCompanionType>(
    BidRequest_Imp_Video_VASTCompanionType_descriptor(), name, value);
}
enum BidRequest_Imp_Video_ContentDeliveryMethod {
  BidRequest_Imp_Video_ContentDeliveryMethod_STREAMING = 1,
  BidRequest_Imp_Video_ContentDeliveryMethod_PROGRESSIVE = 2
};
bool BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(int value);
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_MIN = BidRequest_Imp_Video_ContentDeliveryMethod_STREAMING;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_MAX = BidRequest_Imp_Video_ContentDeliveryMethod_PROGRESSIVE;
const int BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_ARRAYSIZE = BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_ContentDeliveryMethod_descriptor();
inline const ::std::string& BidRequest_Imp_Video_ContentDeliveryMethod_Name(BidRequest_Imp_Video_ContentDeliveryMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_Video_ContentDeliveryMethod_descriptor(), value);
}
inline bool BidRequest_Imp_Video_ContentDeliveryMethod_Parse(
    const ::std::string& name, BidRequest_Imp_Video_ContentDeliveryMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_Video_ContentDeliveryMethod>(
    BidRequest_Imp_Video_ContentDeliveryMethod_descriptor(), name, value);
}
enum BidRequest_Imp_AdPosition {
  BidRequest_Imp_AdPosition_UNKNOWN = 0,
  BidRequest_Imp_AdPosition_ABOVE_THE_FOLD = 1,
  BidRequest_Imp_AdPosition_DEPRECATED_LIKELY_BELOW_THE_FOLD = 2,
  BidRequest_Imp_AdPosition_BELOW_THE_FOLD = 3,
  BidRequest_Imp_AdPosition_HEADER = 4,
  BidRequest_Imp_AdPosition_FOOTER = 5,
  BidRequest_Imp_AdPosition_SIDEBAR = 6,
  BidRequest_Imp_AdPosition_AD_POSITION_FULLSCREEN = 7
};
bool BidRequest_Imp_AdPosition_IsValid(int value);
const BidRequest_Imp_AdPosition BidRequest_Imp_AdPosition_AdPosition_MIN = BidRequest_Imp_AdPosition_UNKNOWN;
const BidRequest_Imp_AdPosition BidRequest_Imp_AdPosition_AdPosition_MAX = BidRequest_Imp_AdPosition_AD_POSITION_FULLSCREEN;
const int BidRequest_Imp_AdPosition_AdPosition_ARRAYSIZE = BidRequest_Imp_AdPosition_AdPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_AdPosition_descriptor();
inline const ::std::string& BidRequest_Imp_AdPosition_Name(BidRequest_Imp_AdPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_AdPosition_descriptor(), value);
}
inline bool BidRequest_Imp_AdPosition_Parse(
    const ::std::string& name, BidRequest_Imp_AdPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_AdPosition>(
    BidRequest_Imp_AdPosition_descriptor(), name, value);
}
enum BidRequest_Imp_APIFramework {
  BidRequest_Imp_APIFramework_VPAID_1 = 1,
  BidRequest_Imp_APIFramework_VPAID_2 = 2,
  BidRequest_Imp_APIFramework_MRAID_1 = 3,
  BidRequest_Imp_APIFramework_ORMMA = 4,
  BidRequest_Imp_APIFramework_MRAID_2 = 5
};
bool BidRequest_Imp_APIFramework_IsValid(int value);
const BidRequest_Imp_APIFramework BidRequest_Imp_APIFramework_APIFramework_MIN = BidRequest_Imp_APIFramework_VPAID_1;
const BidRequest_Imp_APIFramework BidRequest_Imp_APIFramework_APIFramework_MAX = BidRequest_Imp_APIFramework_MRAID_2;
const int BidRequest_Imp_APIFramework_APIFramework_ARRAYSIZE = BidRequest_Imp_APIFramework_APIFramework_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_APIFramework_descriptor();
inline const ::std::string& BidRequest_Imp_APIFramework_Name(BidRequest_Imp_APIFramework value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Imp_APIFramework_descriptor(), value);
}
inline bool BidRequest_Imp_APIFramework_Parse(
    const ::std::string& name, BidRequest_Imp_APIFramework* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Imp_APIFramework>(
    BidRequest_Imp_APIFramework_descriptor(), name, value);
}
enum BidRequest_Content_VideoQuality {
  BidRequest_Content_VideoQuality_QUALITY_UNKNOWN = 0,
  BidRequest_Content_VideoQuality_PROFESSIONAL = 1,
  BidRequest_Content_VideoQuality_PROSUMER = 2,
  BidRequest_Content_VideoQuality_USER_GENERATED = 3
};
bool BidRequest_Content_VideoQuality_IsValid(int value);
const BidRequest_Content_VideoQuality BidRequest_Content_VideoQuality_VideoQuality_MIN = BidRequest_Content_VideoQuality_QUALITY_UNKNOWN;
const BidRequest_Content_VideoQuality BidRequest_Content_VideoQuality_VideoQuality_MAX = BidRequest_Content_VideoQuality_USER_GENERATED;
const int BidRequest_Content_VideoQuality_VideoQuality_ARRAYSIZE = BidRequest_Content_VideoQuality_VideoQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Content_VideoQuality_descriptor();
inline const ::std::string& BidRequest_Content_VideoQuality_Name(BidRequest_Content_VideoQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Content_VideoQuality_descriptor(), value);
}
inline bool BidRequest_Content_VideoQuality_Parse(
    const ::std::string& name, BidRequest_Content_VideoQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Content_VideoQuality>(
    BidRequest_Content_VideoQuality_descriptor(), name, value);
}
enum BidRequest_Content_ContentContext {
  BidRequest_Content_ContentContext_VIDEO = 1,
  BidRequest_Content_ContentContext_GAME = 2,
  BidRequest_Content_ContentContext_MUSIC = 3,
  BidRequest_Content_ContentContext_APPLICATION = 4,
  BidRequest_Content_ContentContext_TEXT = 5,
  BidRequest_Content_ContentContext_OTHER = 6,
  BidRequest_Content_ContentContext_CONTEXT_UNKNOWN = 7
};
bool BidRequest_Content_ContentContext_IsValid(int value);
const BidRequest_Content_ContentContext BidRequest_Content_ContentContext_ContentContext_MIN = BidRequest_Content_ContentContext_VIDEO;
const BidRequest_Content_ContentContext BidRequest_Content_ContentContext_ContentContext_MAX = BidRequest_Content_ContentContext_CONTEXT_UNKNOWN;
const int BidRequest_Content_ContentContext_ContentContext_ARRAYSIZE = BidRequest_Content_ContentContext_ContentContext_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Content_ContentContext_descriptor();
inline const ::std::string& BidRequest_Content_ContentContext_Name(BidRequest_Content_ContentContext value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Content_ContentContext_descriptor(), value);
}
inline bool BidRequest_Content_ContentContext_Parse(
    const ::std::string& name, BidRequest_Content_ContentContext* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Content_ContentContext>(
    BidRequest_Content_ContentContext_descriptor(), name, value);
}
enum BidRequest_Content_QAGMediaRating {
  BidRequest_Content_QAGMediaRating_ALL_AUDIENCES = 1,
  BidRequest_Content_QAGMediaRating_EVERYONE_OVER_12 = 2,
  BidRequest_Content_QAGMediaRating_MATURE = 3
};
bool BidRequest_Content_QAGMediaRating_IsValid(int value);
const BidRequest_Content_QAGMediaRating BidRequest_Content_QAGMediaRating_QAGMediaRating_MIN = BidRequest_Content_QAGMediaRating_ALL_AUDIENCES;
const BidRequest_Content_QAGMediaRating BidRequest_Content_QAGMediaRating_QAGMediaRating_MAX = BidRequest_Content_QAGMediaRating_MATURE;
const int BidRequest_Content_QAGMediaRating_QAGMediaRating_ARRAYSIZE = BidRequest_Content_QAGMediaRating_QAGMediaRating_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Content_QAGMediaRating_descriptor();
inline const ::std::string& BidRequest_Content_QAGMediaRating_Name(BidRequest_Content_QAGMediaRating value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Content_QAGMediaRating_descriptor(), value);
}
inline bool BidRequest_Content_QAGMediaRating_Parse(
    const ::std::string& name, BidRequest_Content_QAGMediaRating* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Content_QAGMediaRating>(
    BidRequest_Content_QAGMediaRating_descriptor(), name, value);
}
enum BidRequest_Device_DeviceType {
  BidRequest_Device_DeviceType_MOBILE = 1,
  BidRequest_Device_DeviceType_PERSONAL_COMPUTER = 2,
  BidRequest_Device_DeviceType_CONNECTED_TV = 3,
  BidRequest_Device_DeviceType_PHONE = 4,
  BidRequest_Device_DeviceType_TABLET = 5,
  BidRequest_Device_DeviceType_CONNECTED_DEVICE = 6,
  BidRequest_Device_DeviceType_SET_TOP_BOX = 7
};
bool BidRequest_Device_DeviceType_IsValid(int value);
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MIN = BidRequest_Device_DeviceType_MOBILE;
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MAX = BidRequest_Device_DeviceType_SET_TOP_BOX;
const int BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE = BidRequest_Device_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor();
inline const ::std::string& BidRequest_Device_DeviceType_Name(BidRequest_Device_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_DeviceType_descriptor(), value);
}
inline bool BidRequest_Device_DeviceType_Parse(
    const ::std::string& name, BidRequest_Device_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_DeviceType>(
    BidRequest_Device_DeviceType_descriptor(), name, value);
}
enum BidRequest_Device_ConnectionType {
  BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN = 0,
  BidRequest_Device_ConnectionType_ETHERNET = 1,
  BidRequest_Device_ConnectionType_WIFI = 2,
  BidRequest_Device_ConnectionType_CELL_UNKNOWN = 3,
  BidRequest_Device_ConnectionType_CELL_2G = 4,
  BidRequest_Device_ConnectionType_CELL_3G = 5,
  BidRequest_Device_ConnectionType_CELL_4G = 6
};
bool BidRequest_Device_ConnectionType_IsValid(int value);
const BidRequest_Device_ConnectionType BidRequest_Device_ConnectionType_ConnectionType_MIN = BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device_ConnectionType_ConnectionType_MAX = BidRequest_Device_ConnectionType_CELL_4G;
const int BidRequest_Device_ConnectionType_ConnectionType_ARRAYSIZE = BidRequest_Device_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor();
inline const ::std::string& BidRequest_Device_ConnectionType_Name(BidRequest_Device_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_ConnectionType_descriptor(), value);
}
inline bool BidRequest_Device_ConnectionType_Parse(
    const ::std::string& name, BidRequest_Device_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_ConnectionType>(
    BidRequest_Device_ConnectionType_descriptor(), name, value);
}
enum BidRequest_Geo_LocationType {
  BidRequest_Geo_LocationType_GPS_LOCATION = 1,
  BidRequest_Geo_LocationType_IP = 2,
  BidRequest_Geo_LocationType_USER_PROVIDED = 3
};
bool BidRequest_Geo_LocationType_IsValid(int value);
const BidRequest_Geo_LocationType BidRequest_Geo_LocationType_LocationType_MIN = BidRequest_Geo_LocationType_GPS_LOCATION;
const BidRequest_Geo_LocationType BidRequest_Geo_LocationType_LocationType_MAX = BidRequest_Geo_LocationType_USER_PROVIDED;
const int BidRequest_Geo_LocationType_LocationType_ARRAYSIZE = BidRequest_Geo_LocationType_LocationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Geo_LocationType_descriptor();
inline const ::std::string& BidRequest_Geo_LocationType_Name(BidRequest_Geo_LocationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Geo_LocationType_descriptor(), value);
}
inline bool BidRequest_Geo_LocationType_Parse(
    const ::std::string& name, BidRequest_Geo_LocationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Geo_LocationType>(
    BidRequest_Geo_LocationType_descriptor(), name, value);
}
enum BidRequest_User_Gender {
  BidRequest_User_Gender_MALE = 1,
  BidRequest_User_Gender_FEMALE = 2,
  BidRequest_User_Gender_OTHER = 3
};
bool BidRequest_User_Gender_IsValid(int value);
const BidRequest_User_Gender BidRequest_User_Gender_Gender_MIN = BidRequest_User_Gender_MALE;
const BidRequest_User_Gender BidRequest_User_Gender_Gender_MAX = BidRequest_User_Gender_OTHER;
const int BidRequest_User_Gender_Gender_ARRAYSIZE = BidRequest_User_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor();
inline const ::std::string& BidRequest_User_Gender_Name(BidRequest_User_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_User_Gender_descriptor(), value);
}
inline bool BidRequest_User_Gender_Parse(
    const ::std::string& name, BidRequest_User_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_User_Gender>(
    BidRequest_User_Gender_descriptor(), name, value);
}
enum BidRequest_AuctionType {
  BidRequest_AuctionType_FIRST_PRICE = 1,
  BidRequest_AuctionType_SECOND_PRICE = 2,
  BidRequest_AuctionType_FIXED_PRICE = 3
};
bool BidRequest_AuctionType_IsValid(int value);
const BidRequest_AuctionType BidRequest_AuctionType_AuctionType_MIN = BidRequest_AuctionType_FIRST_PRICE;
const BidRequest_AuctionType BidRequest_AuctionType_AuctionType_MAX = BidRequest_AuctionType_FIXED_PRICE;
const int BidRequest_AuctionType_AuctionType_ARRAYSIZE = BidRequest_AuctionType_AuctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AuctionType_descriptor();
inline const ::std::string& BidRequest_AuctionType_Name(BidRequest_AuctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AuctionType_descriptor(), value);
}
inline bool BidRequest_AuctionType_Parse(
    const ::std::string& name, BidRequest_AuctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AuctionType>(
    BidRequest_AuctionType_descriptor(), name, value);
}
enum BidResponse_NoBidReason {
  BidResponse_NoBidReason_UNKNOWN_ERROR = 0,
  BidResponse_NoBidReason_TECHNICAL_ERROR = 1,
  BidResponse_NoBidReason_INVALID_REQUEST = 2,
  BidResponse_NoBidReason_KNOWN_WEB_SPIDER = 3,
  BidResponse_NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC = 4,
  BidResponse_NoBidReason_CLOUD_DATACENTER_PROXYIP = 5,
  BidResponse_NoBidReason_UNSUPPORTED_DEVICE = 6,
  BidResponse_NoBidReason_BLOCKED_PUBLISHER = 7,
  BidResponse_NoBidReason_UNMATCHED_USER = 8
};
bool BidResponse_NoBidReason_IsValid(int value);
const BidResponse_NoBidReason BidResponse_NoBidReason_NoBidReason_MIN = BidResponse_NoBidReason_UNKNOWN_ERROR;
const BidResponse_NoBidReason BidResponse_NoBidReason_NoBidReason_MAX = BidResponse_NoBidReason_UNMATCHED_USER;
const int BidResponse_NoBidReason_NoBidReason_ARRAYSIZE = BidResponse_NoBidReason_NoBidReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor();
inline const ::std::string& BidResponse_NoBidReason_Name(BidResponse_NoBidReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidResponse_NoBidReason_descriptor(), value);
}
inline bool BidResponse_NoBidReason_Parse(
    const ::std::string& name, BidResponse_NoBidReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidResponse_NoBidReason>(
    BidResponse_NoBidReason_descriptor(), name, value);
}
enum NativeRequest_Asset_Image_ImageAssetType {
  NativeRequest_Asset_Image_ImageAssetType_ICON = 1,
  NativeRequest_Asset_Image_ImageAssetType_LOGO = 2,
  NativeRequest_Asset_Image_ImageAssetType_MAIN = 3
};
bool NativeRequest_Asset_Image_ImageAssetType_IsValid(int value);
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_MIN = NativeRequest_Asset_Image_ImageAssetType_ICON;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_MAX = NativeRequest_Asset_Image_ImageAssetType_MAIN;
const int NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_ARRAYSIZE = NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Image_ImageAssetType_descriptor();
inline const ::std::string& NativeRequest_Asset_Image_ImageAssetType_Name(NativeRequest_Asset_Image_ImageAssetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NativeRequest_Asset_Image_ImageAssetType_descriptor(), value);
}
inline bool NativeRequest_Asset_Image_ImageAssetType_Parse(
    const ::std::string& name, NativeRequest_Asset_Image_ImageAssetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NativeRequest_Asset_Image_ImageAssetType>(
    NativeRequest_Asset_Image_ImageAssetType_descriptor(), name, value);
}
enum NativeRequest_Asset_Data_DataAssetType {
  NativeRequest_Asset_Data_DataAssetType_SPONSORED = 1,
  NativeRequest_Asset_Data_DataAssetType_DESC = 2,
  NativeRequest_Asset_Data_DataAssetType_RATING = 3,
  NativeRequest_Asset_Data_DataAssetType_LIKES = 4,
  NativeRequest_Asset_Data_DataAssetType_DOWNLOADS = 5,
  NativeRequest_Asset_Data_DataAssetType_PRICE = 6,
  NativeRequest_Asset_Data_DataAssetType_SALEPRICE = 7,
  NativeRequest_Asset_Data_DataAssetType_PHONE = 8,
  NativeRequest_Asset_Data_DataAssetType_ADDRESS = 9,
  NativeRequest_Asset_Data_DataAssetType_DESC2 = 10,
  NativeRequest_Asset_Data_DataAssetType_DISPLAYURL = 11,
  NativeRequest_Asset_Data_DataAssetType_CTATEXT = 12
};
bool NativeRequest_Asset_Data_DataAssetType_IsValid(int value);
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data_DataAssetType_DataAssetType_MIN = NativeRequest_Asset_Data_DataAssetType_SPONSORED;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data_DataAssetType_DataAssetType_MAX = NativeRequest_Asset_Data_DataAssetType_CTATEXT;
const int NativeRequest_Asset_Data_DataAssetType_DataAssetType_ARRAYSIZE = NativeRequest_Asset_Data_DataAssetType_DataAssetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Data_DataAssetType_descriptor();
inline const ::std::string& NativeRequest_Asset_Data_DataAssetType_Name(NativeRequest_Asset_Data_DataAssetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NativeRequest_Asset_Data_DataAssetType_descriptor(), value);
}
inline bool NativeRequest_Asset_Data_DataAssetType_Parse(
    const ::std::string& name, NativeRequest_Asset_Data_DataAssetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NativeRequest_Asset_Data_DataAssetType>(
    NativeRequest_Asset_Data_DataAssetType_descriptor(), name, value);
}
enum NativeRequest_LayoutId {
  NativeRequest_LayoutId_CONTENT_WALL = 1,
  NativeRequest_LayoutId_APP_WALL = 2,
  NativeRequest_LayoutId_NEWS_FEED = 3,
  NativeRequest_LayoutId_CHAT_LIST = 4,
  NativeRequest_LayoutId_CAROUSEL = 5,
  NativeRequest_LayoutId_CONTENT_STREAM = 6,
  NativeRequest_LayoutId_GRID = 7
};
bool NativeRequest_LayoutId_IsValid(int value);
const NativeRequest_LayoutId NativeRequest_LayoutId_LayoutId_MIN = NativeRequest_LayoutId_CONTENT_WALL;
const NativeRequest_LayoutId NativeRequest_LayoutId_LayoutId_MAX = NativeRequest_LayoutId_GRID;
const int NativeRequest_LayoutId_LayoutId_ARRAYSIZE = NativeRequest_LayoutId_LayoutId_MAX + 1;

const ::google::protobuf::EnumDescriptor* NativeRequest_LayoutId_descriptor();
inline const ::std::string& NativeRequest_LayoutId_Name(NativeRequest_LayoutId value) {
  return ::google::protobuf::internal::NameOfEnum(
    NativeRequest_LayoutId_descriptor(), value);
}
inline bool NativeRequest_LayoutId_Parse(
    const ::std::string& name, NativeRequest_LayoutId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NativeRequest_LayoutId>(
    NativeRequest_LayoutId_descriptor(), name, value);
}
enum NativeRequest_AdUnitId {
  NativeRequest_AdUnitId_PAID_SEARCH_UNIT = 1,
  NativeRequest_AdUnitId_RECOMMENDATION_WIDGET = 2,
  NativeRequest_AdUnitId_PROMOTED_LISTING = 3,
  NativeRequest_AdUnitId_IAB_IN_AD_NATIVE = 4,
  NativeRequest_AdUnitId_CUSTOM = 5
};
bool NativeRequest_AdUnitId_IsValid(int value);
const NativeRequest_AdUnitId NativeRequest_AdUnitId_AdUnitId_MIN = NativeRequest_AdUnitId_PAID_SEARCH_UNIT;
const NativeRequest_AdUnitId NativeRequest_AdUnitId_AdUnitId_MAX = NativeRequest_AdUnitId_CUSTOM;
const int NativeRequest_AdUnitId_AdUnitId_ARRAYSIZE = NativeRequest_AdUnitId_AdUnitId_MAX + 1;

const ::google::protobuf::EnumDescriptor* NativeRequest_AdUnitId_descriptor();
inline const ::std::string& NativeRequest_AdUnitId_Name(NativeRequest_AdUnitId value) {
  return ::google::protobuf::internal::NameOfEnum(
    NativeRequest_AdUnitId_descriptor(), value);
}
inline bool NativeRequest_AdUnitId_Parse(
    const ::std::string& name, NativeRequest_AdUnitId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NativeRequest_AdUnitId>(
    NativeRequest_AdUnitId_descriptor(), name, value);
}
enum ContentCategory {
  IAB1 = 1,
  IAB1_1 = 2,
  IAB1_2 = 3,
  IAB1_3 = 4,
  IAB1_4 = 5,
  IAB1_5 = 6,
  IAB1_6 = 7,
  IAB1_7 = 8,
  IAB2 = 9,
  IAB2_1 = 10,
  IAB2_2 = 11,
  IAB2_3 = 12,
  IAB2_4 = 13,
  IAB2_5 = 14,
  IAB2_6 = 15,
  IAB2_7 = 16,
  IAB2_8 = 17,
  IAB2_9 = 18,
  IAB2_10 = 19,
  IAB2_11 = 20,
  IAB2_12 = 21,
  IAB2_13 = 22,
  IAB2_14 = 23,
  IAB2_15 = 24,
  IAB2_16 = 25,
  IAB2_17 = 26,
  IAB2_18 = 27,
  IAB2_19 = 28,
  IAB2_20 = 29,
  IAB2_21 = 30,
  IAB2_22 = 31,
  IAB2_23 = 32,
  IAB3 = 33,
  IAB3_1 = 34,
  IAB3_2 = 35,
  IAB3_3 = 36,
  IAB3_4 = 37,
  IAB3_5 = 38,
  IAB3_6 = 39,
  IAB3_7 = 40,
  IAB3_8 = 41,
  IAB3_9 = 42,
  IAB3_10 = 43,
  IAB3_11 = 44,
  IAB3_12 = 45,
  IAB4 = 46,
  IAB4_1 = 47,
  IAB4_2 = 48,
  IAB4_3 = 49,
  IAB4_4 = 50,
  IAB4_5 = 51,
  IAB4_6 = 52,
  IAB4_7 = 53,
  IAB4_8 = 54,
  IAB4_9 = 55,
  IAB4_10 = 56,
  IAB4_11 = 57,
  IAB5 = 58,
  IAB5_1 = 59,
  IAB5_2 = 60,
  IAB5_3 = 61,
  IAB5_4 = 62,
  IAB5_5 = 63,
  IAB5_6 = 64,
  IAB5_7 = 65,
  IAB5_8 = 66,
  IAB5_9 = 67,
  IAB5_10 = 68,
  IAB5_11 = 69,
  IAB5_12 = 70,
  IAB5_13 = 71,
  IAB5_14 = 72,
  IAB5_15 = 73,
  IAB6 = 74,
  IAB6_1 = 75,
  IAB6_2 = 76,
  IAB6_3 = 77,
  IAB6_4 = 78,
  IAB6_5 = 79,
  IAB6_6 = 80,
  IAB6_7 = 81,
  IAB6_8 = 82,
  IAB6_9 = 83,
  IAB7 = 84,
  IAB7_1 = 85,
  IAB7_2 = 86,
  IAB7_3 = 87,
  IAB7_4 = 88,
  IAB7_5 = 89,
  IAB7_6 = 90,
  IAB7_7 = 91,
  IAB7_8 = 92,
  IAB7_9 = 93,
  IAB7_10 = 94,
  IAB7_11 = 95,
  IAB7_12 = 96,
  IAB7_13 = 97,
  IAB7_14 = 98,
  IAB7_15 = 99,
  IAB7_16 = 100,
  IAB7_17 = 101,
  IAB7_18 = 102,
  IAB7_19 = 103,
  IAB7_20 = 104,
  IAB7_21 = 105,
  IAB7_22 = 106,
  IAB7_23 = 107,
  IAB7_24 = 108,
  IAB7_25 = 109,
  IAB7_26 = 110,
  IAB7_27 = 111,
  IAB7_28 = 112,
  IAB7_29 = 113,
  IAB7_30 = 114,
  IAB7_31 = 115,
  IAB7_32 = 116,
  IAB7_33 = 117,
  IAB7_34 = 118,
  IAB7_35 = 119,
  IAB7_36 = 120,
  IAB7_37 = 121,
  IAB7_38 = 122,
  IAB7_39 = 123,
  IAB7_40 = 124,
  IAB7_41 = 125,
  IAB7_42 = 126,
  IAB7_43 = 127,
  IAB7_44 = 128,
  IAB7_45 = 129,
  IAB8 = 130,
  IAB8_1 = 131,
  IAB8_2 = 132,
  IAB8_3 = 133,
  IAB8_4 = 134,
  IAB8_5 = 135,
  IAB8_6 = 136,
  IAB8_7 = 137,
  IAB8_8 = 138,
  IAB8_9 = 139,
  IAB8_10 = 140,
  IAB8_11 = 141,
  IAB8_12 = 142,
  IAB8_13 = 143,
  IAB8_14 = 144,
  IAB8_15 = 145,
  IAB8_16 = 146,
  IAB8_17 = 147,
  IAB8_18 = 148,
  IAB9 = 149,
  IAB9_1 = 150,
  IAB9_2 = 151,
  IAB9_3 = 152,
  IAB9_4 = 153,
  IAB9_5 = 154,
  IAB9_6 = 155,
  IAB9_7 = 156,
  IAB9_8 = 157,
  IAB9_9 = 158,
  IAB9_10 = 159,
  IAB9_11 = 160,
  IAB9_12 = 161,
  IAB9_13 = 162,
  IAB9_14 = 163,
  IAB9_15 = 164,
  IAB9_16 = 165,
  IAB9_17 = 166,
  IAB9_18 = 167,
  IAB9_19 = 168,
  IAB9_20 = 169,
  IAB9_21 = 170,
  IAB9_22 = 171,
  IAB9_23 = 172,
  IAB9_24 = 173,
  IAB9_25 = 174,
  IAB9_26 = 175,
  IAB9_27 = 176,
  IAB9_28 = 177,
  IAB9_29 = 178,
  IAB9_30 = 179,
  IAB9_31 = 180,
  IAB10 = 181,
  IAB10_1 = 182,
  IAB10_2 = 183,
  IAB10_3 = 184,
  IAB10_4 = 185,
  IAB10_5 = 186,
  IAB10_6 = 187,
  IAB10_7 = 188,
  IAB10_8 = 189,
  IAB10_9 = 190,
  IAB11 = 191,
  IAB11_1 = 192,
  IAB11_2 = 193,
  IAB11_3 = 194,
  IAB11_4 = 195,
  IAB11_5 = 196,
  IAB12 = 197,
  IAB12_1 = 198,
  IAB12_2 = 199,
  IAB12_3 = 200,
  IAB13 = 201,
  IAB13_1 = 202,
  IAB13_2 = 203,
  IAB13_3 = 204,
  IAB13_4 = 205,
  IAB13_5 = 206,
  IAB13_6 = 207,
  IAB13_7 = 208,
  IAB13_8 = 209,
  IAB13_9 = 210,
  IAB13_10 = 211,
  IAB13_11 = 212,
  IAB13_12 = 213,
  IAB14 = 214,
  IAB14_1 = 215,
  IAB14_2 = 216,
  IAB14_3 = 217,
  IAB14_4 = 218,
  IAB14_5 = 219,
  IAB14_6 = 220,
  IAB14_7 = 221,
  IAB14_8 = 222,
  IAB15 = 223,
  IAB15_1 = 224,
  IAB15_2 = 225,
  IAB15_3 = 226,
  IAB15_4 = 227,
  IAB15_5 = 228,
  IAB15_6 = 229,
  IAB15_7 = 230,
  IAB15_8 = 231,
  IAB15_9 = 232,
  IAB15_10 = 233,
  IAB16 = 234,
  IAB16_1 = 235,
  IAB16_2 = 236,
  IAB16_3 = 237,
  IAB16_4 = 238,
  IAB16_5 = 239,
  IAB16_6 = 240,
  IAB16_7 = 241,
  IAB17 = 242,
  IAB17_1 = 243,
  IAB17_2 = 244,
  IAB17_3 = 245,
  IAB17_4 = 246,
  IAB17_5 = 247,
  IAB17_6 = 248,
  IAB17_7 = 249,
  IAB17_8 = 250,
  IAB17_9 = 251,
  IAB17_10 = 252,
  IAB17_11 = 253,
  IAB17_12 = 254,
  IAB17_13 = 255,
  IAB17_14 = 256,
  IAB17_15 = 257,
  IAB17_16 = 258,
  IAB17_17 = 259,
  IAB17_18 = 260,
  IAB17_19 = 261,
  IAB17_20 = 262,
  IAB17_21 = 263,
  IAB17_22 = 264,
  IAB17_23 = 265,
  IAB17_24 = 266,
  IAB17_25 = 267,
  IAB17_26 = 268,
  IAB17_27 = 269,
  IAB17_28 = 270,
  IAB17_29 = 271,
  IAB17_30 = 272,
  IAB17_31 = 273,
  IAB17_32 = 274,
  IAB17_33 = 275,
  IAB17_34 = 276,
  IAB17_35 = 277,
  IAB17_36 = 278,
  IAB17_37 = 279,
  IAB17_38 = 280,
  IAB17_39 = 281,
  IAB17_40 = 282,
  IAB17_41 = 283,
  IAB17_42 = 284,
  IAB17_43 = 285,
  IAB17_44 = 286,
  IAB18 = 287,
  IAB18_1 = 288,
  IAB18_2 = 289,
  IAB18_3 = 290,
  IAB18_4 = 291,
  IAB18_5 = 292,
  IAB18_6 = 293,
  IAB19 = 294,
  IAB19_1 = 295,
  IAB19_2 = 296,
  IAB19_3 = 297,
  IAB19_4 = 298,
  IAB19_5 = 299,
  IAB19_6 = 300,
  IAB19_7 = 301,
  IAB19_8 = 302,
  IAB19_9 = 303,
  IAB19_10 = 304,
  IAB19_11 = 305,
  IAB19_12 = 306,
  IAB19_13 = 307,
  IAB19_14 = 308,
  IAB19_15 = 309,
  IAB19_16 = 310,
  IAB19_17 = 311,
  IAB19_18 = 312,
  IAB19_19 = 313,
  IAB19_20 = 314,
  IAB19_21 = 315,
  IAB19_22 = 316,
  IAB19_23 = 317,
  IAB19_24 = 318,
  IAB19_25 = 319,
  IAB19_26 = 320,
  IAB19_27 = 321,
  IAB19_28 = 322,
  IAB19_29 = 323,
  IAB19_30 = 324,
  IAB19_31 = 325,
  IAB19_32 = 326,
  IAB19_33 = 327,
  IAB19_34 = 328,
  IAB19_35 = 329,
  IAB19_36 = 330,
  IAB20 = 331,
  IAB20_1 = 332,
  IAB20_2 = 333,
  IAB20_3 = 334,
  IAB20_4 = 335,
  IAB20_5 = 336,
  IAB20_6 = 337,
  IAB20_7 = 338,
  IAB20_8 = 339,
  IAB20_9 = 340,
  IAB20_10 = 341,
  IAB20_11 = 342,
  IAB20_12 = 343,
  IAB20_13 = 344,
  IAB20_14 = 345,
  IAB20_15 = 346,
  IAB20_16 = 347,
  IAB20_17 = 348,
  IAB20_18 = 349,
  IAB20_19 = 350,
  IAB20_20 = 351,
  IAB20_21 = 352,
  IAB20_22 = 353,
  IAB20_23 = 354,
  IAB20_24 = 355,
  IAB20_25 = 356,
  IAB20_26 = 357,
  IAB20_27 = 358,
  IAB21 = 359,
  IAB21_1 = 360,
  IAB21_2 = 361,
  IAB21_3 = 362,
  IAB22 = 363,
  IAB22_1 = 364,
  IAB22_2 = 365,
  IAB22_3 = 366,
  IAB22_4 = 367,
  IAB23 = 368,
  IAB23_1 = 369,
  IAB23_2 = 370,
  IAB23_3 = 371,
  IAB23_4 = 372,
  IAB23_5 = 373,
  IAB23_6 = 374,
  IAB23_7 = 375,
  IAB23_8 = 376,
  IAB23_9 = 377,
  IAB23_10 = 378,
  IAB24 = 379,
  IAB25 = 380,
  IAB25_1 = 381,
  IAB25_2 = 382,
  IAB25_3 = 383,
  IAB25_4 = 384,
  IAB25_5 = 385,
  IAB25_6 = 386,
  IAB25_7 = 387,
  IAB26 = 388,
  IAB26_1 = 389,
  IAB26_2 = 390,
  IAB26_3 = 391,
  IAB26_4 = 392
};
bool ContentCategory_IsValid(int value);
const ContentCategory ContentCategory_MIN = IAB1;
const ContentCategory ContentCategory_MAX = IAB26_4;
const int ContentCategory_ARRAYSIZE = ContentCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor();
inline const ::std::string& ContentCategory_Name(ContentCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContentCategory_descriptor(), value);
}
inline bool ContentCategory_Parse(
    const ::std::string& name, ContentCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentCategory>(
    ContentCategory_descriptor(), name, value);
}
enum CreativeAttribute {
  AUDIO_AUTO_PLAY = 1,
  AUDIO_USER_INITIATED = 2,
  EXPANDABLE_AUTOMATIC = 3,
  EXPANDABLE_CLICK_INITIATED = 4,
  EXPANDABLE_ROLLOVER_INITIATED = 5,
  VIDEO_IN_BANNER_AUTO_PLAY = 6,
  VIDEO_IN_BANNER_USER_INITIATED = 7,
  POP = 8,
  PROVOCATIVE_OR_SUGGESTIVE = 9,
  ANNOYING = 10,
  SURVEYS = 11,
  TEXT_ONLY = 12,
  USER_INTERACTIVE = 13,
  WINDOWS_DIALOG_OR_ALERT_STYLE = 14,
  HAS_AUDIO_ON_OFF_BUTTON = 15,
  AD_CAN_BE_SKIPPED = 16
};
bool CreativeAttribute_IsValid(int value);
const CreativeAttribute CreativeAttribute_MIN = AUDIO_AUTO_PLAY;
const CreativeAttribute CreativeAttribute_MAX = AD_CAN_BE_SKIPPED;
const int CreativeAttribute_ARRAYSIZE = CreativeAttribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor();
inline const ::std::string& CreativeAttribute_Name(CreativeAttribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreativeAttribute_descriptor(), value);
}
inline bool CreativeAttribute_Parse(
    const ::std::string& name, CreativeAttribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreativeAttribute>(
    CreativeAttribute_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Imp_Banner : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Banner();
  virtual ~BidRequest_Imp_Banner();

  BidRequest_Imp_Banner(const BidRequest_Imp_Banner& from);

  inline BidRequest_Imp_Banner& operator=(const BidRequest_Imp_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Banner& default_instance();

  void Swap(BidRequest_Imp_Banner* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Banner& from);
  void MergeFrom(const BidRequest_Imp_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Banner_BannerAdType BannerAdType;
  static const BannerAdType XHTML_TEXT_AD = BidRequest_Imp_Banner_BannerAdType_XHTML_TEXT_AD;
  static const BannerAdType XHTML_BANNER_AD = BidRequest_Imp_Banner_BannerAdType_XHTML_BANNER_AD;
  static const BannerAdType JAVASCRIPT_AD = BidRequest_Imp_Banner_BannerAdType_JAVASCRIPT_AD;
  static const BannerAdType IFRAME = BidRequest_Imp_Banner_BannerAdType_IFRAME;
  static inline bool BannerAdType_IsValid(int value) {
    return BidRequest_Imp_Banner_BannerAdType_IsValid(value);
  }
  static const BannerAdType BannerAdType_MIN =
    BidRequest_Imp_Banner_BannerAdType_BannerAdType_MIN;
  static const BannerAdType BannerAdType_MAX =
    BidRequest_Imp_Banner_BannerAdType_BannerAdType_MAX;
  static const int BannerAdType_ARRAYSIZE =
    BidRequest_Imp_Banner_BannerAdType_BannerAdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BannerAdType_descriptor() {
    return BidRequest_Imp_Banner_BannerAdType_descriptor();
  }
  static inline const ::std::string& BannerAdType_Name(BannerAdType value) {
    return BidRequest_Imp_Banner_BannerAdType_Name(value);
  }
  static inline bool BannerAdType_Parse(const ::std::string& name,
      BannerAdType* value) {
    return BidRequest_Imp_Banner_BannerAdType_Parse(name, value);
  }

  typedef BidRequest_Imp_Banner_ExpandableDirection ExpandableDirection;
  static const ExpandableDirection LEFT = BidRequest_Imp_Banner_ExpandableDirection_LEFT;
  static const ExpandableDirection RIGHT = BidRequest_Imp_Banner_ExpandableDirection_RIGHT;
  static const ExpandableDirection UP = BidRequest_Imp_Banner_ExpandableDirection_UP;
  static const ExpandableDirection DOWN = BidRequest_Imp_Banner_ExpandableDirection_DOWN;
  static const ExpandableDirection EXPANDABLE_FULLSCREEN = BidRequest_Imp_Banner_ExpandableDirection_EXPANDABLE_FULLSCREEN;
  static inline bool ExpandableDirection_IsValid(int value) {
    return BidRequest_Imp_Banner_ExpandableDirection_IsValid(value);
  }
  static const ExpandableDirection ExpandableDirection_MIN =
    BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_MIN;
  static const ExpandableDirection ExpandableDirection_MAX =
    BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_MAX;
  static const int ExpandableDirection_ARRAYSIZE =
    BidRequest_Imp_Banner_ExpandableDirection_ExpandableDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExpandableDirection_descriptor() {
    return BidRequest_Imp_Banner_ExpandableDirection_descriptor();
  }
  static inline const ::std::string& ExpandableDirection_Name(ExpandableDirection value) {
    return BidRequest_Imp_Banner_ExpandableDirection_Name(value);
  }
  static inline bool ExpandableDirection_Parse(const ::std::string& name,
      ExpandableDirection* value) {
    return BidRequest_Imp_Banner_ExpandableDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 wmax = 11;
  inline bool has_wmax() const;
  inline void clear_wmax();
  static const int kWmaxFieldNumber = 11;
  inline ::google::protobuf::int32 wmax() const;
  inline void set_wmax(::google::protobuf::int32 value);

  // optional int32 hmax = 12;
  inline bool has_hmax() const;
  inline void clear_hmax();
  static const int kHmaxFieldNumber = 12;
  inline ::google::protobuf::int32 hmax() const;
  inline void set_hmax(::google::protobuf::int32 value);

  // optional int32 wmin = 13;
  inline bool has_wmin() const;
  inline void clear_wmin();
  static const int kWminFieldNumber = 13;
  inline ::google::protobuf::int32 wmin() const;
  inline void set_wmin(::google::protobuf::int32 value);

  // optional int32 hmin = 14;
  inline bool has_hmin() const;
  inline void clear_hmin();
  static const int kHminFieldNumber = 14;
  inline ::google::protobuf::int32 hmin() const;
  inline void set_hmin(::google::protobuf::int32 value);

  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::com::google::openrtb::BidRequest_Imp_AdPosition pos() const;
  inline void set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value);

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  inline int btype_size() const;
  inline void clear_btype();
  static const int kBtypeFieldNumber = 5;
  inline ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType btype(int index) const;
  inline void set_btype(int index, ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value);
  inline void add_btype(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value);
  inline const ::google::protobuf::RepeatedField<int>& btype() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_btype();

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 6;
  inline ::com::google::openrtb::CreativeAttribute battr(int index) const;
  inline void set_battr(int index, ::com::google::openrtb::CreativeAttribute value);
  inline void add_battr(::com::google::openrtb::CreativeAttribute value);
  inline const ::google::protobuf::RepeatedField<int>& battr() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_battr();

  // repeated string mimes = 7;
  inline int mimes_size() const;
  inline void clear_mimes();
  static const int kMimesFieldNumber = 7;
  inline const ::std::string& mimes(int index) const;
  inline ::std::string* mutable_mimes(int index);
  inline void set_mimes(int index, const ::std::string& value);
  inline void set_mimes(int index, const char* value);
  inline void set_mimes(int index, const char* value, size_t size);
  inline ::std::string* add_mimes();
  inline void add_mimes(const ::std::string& value);
  inline void add_mimes(const char* value);
  inline void add_mimes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mimes();

  // optional bool topframe = 8;
  inline bool has_topframe() const;
  inline void clear_topframe();
  static const int kTopframeFieldNumber = 8;
  inline bool topframe() const;
  inline void set_topframe(bool value);

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  inline int expdir_size() const;
  inline void clear_expdir();
  static const int kExpdirFieldNumber = 9;
  inline ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection expdir(int index) const;
  inline void set_expdir(int index, ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value);
  inline void add_expdir(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value);
  inline const ::google::protobuf::RepeatedField<int>& expdir() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_expdir();

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  inline int api_size() const;
  inline void clear_api();
  static const int kApiFieldNumber = 10;
  inline ::com::google::openrtb::BidRequest_Imp_APIFramework api(int index) const;
  inline void set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline void add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline const ::google::protobuf::RepeatedField<int>& api() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_api();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Banner)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Banner)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_wmax();
  inline void clear_has_wmax();
  inline void set_has_hmax();
  inline void clear_has_hmax();
  inline void set_has_wmin();
  inline void clear_has_wmin();
  inline void set_has_hmin();
  inline void clear_has_hmin();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_topframe();
  inline void clear_has_topframe();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 wmax_;
  ::google::protobuf::int32 hmax_;
  ::google::protobuf::int32 wmin_;
  ::google::protobuf::int32 hmin_;
  ::std::string* id_;
  ::google::protobuf::RepeatedField<int> btype_;
  mutable int _btype_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> battr_;
  mutable int _battr_cached_byte_size_;
  int pos_;
  bool topframe_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mimes_;
  ::google::protobuf::RepeatedField<int> expdir_;
  mutable int _expdir_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> api_;
  mutable int _api_cached_byte_size_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Banner* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Video_CompanionAd : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Video_CompanionAd();
  virtual ~BidRequest_Imp_Video_CompanionAd();

  BidRequest_Imp_Video_CompanionAd(const BidRequest_Imp_Video_CompanionAd& from);

  inline BidRequest_Imp_Video_CompanionAd& operator=(const BidRequest_Imp_Video_CompanionAd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Video_CompanionAd& default_instance();

  void Swap(BidRequest_Imp_Video_CompanionAd* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Video_CompanionAd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Video_CompanionAd& from);
  void MergeFrom(const BidRequest_Imp_Video_CompanionAd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  inline int banner_size() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 1;
  inline const ::com::google::openrtb::BidRequest_Imp_Banner& banner(int index) const;
  inline ::com::google::openrtb::BidRequest_Imp_Banner* mutable_banner(int index);
  inline ::com::google::openrtb::BidRequest_Imp_Banner* add_banner();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
      banner() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
      mutable_banner();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Video_CompanionAd)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner > banner_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Video_CompanionAd* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Video : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Video();
  virtual ~BidRequest_Imp_Video();

  BidRequest_Imp_Video(const BidRequest_Imp_Video& from);

  inline BidRequest_Imp_Video& operator=(const BidRequest_Imp_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Video& default_instance();

  void Swap(BidRequest_Imp_Video* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Video& from);
  void MergeFrom(const BidRequest_Imp_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Video_CompanionAd CompanionAd;

  typedef BidRequest_Imp_Video_VideoLinearity VideoLinearity;
  static const VideoLinearity LINEAR = BidRequest_Imp_Video_VideoLinearity_LINEAR;
  static const VideoLinearity NON_LINEAR = BidRequest_Imp_Video_VideoLinearity_NON_LINEAR;
  static inline bool VideoLinearity_IsValid(int value) {
    return BidRequest_Imp_Video_VideoLinearity_IsValid(value);
  }
  static const VideoLinearity VideoLinearity_MIN =
    BidRequest_Imp_Video_VideoLinearity_VideoLinearity_MIN;
  static const VideoLinearity VideoLinearity_MAX =
    BidRequest_Imp_Video_VideoLinearity_VideoLinearity_MAX;
  static const int VideoLinearity_ARRAYSIZE =
    BidRequest_Imp_Video_VideoLinearity_VideoLinearity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoLinearity_descriptor() {
    return BidRequest_Imp_Video_VideoLinearity_descriptor();
  }
  static inline const ::std::string& VideoLinearity_Name(VideoLinearity value) {
    return BidRequest_Imp_Video_VideoLinearity_Name(value);
  }
  static inline bool VideoLinearity_Parse(const ::std::string& name,
      VideoLinearity* value) {
    return BidRequest_Imp_Video_VideoLinearity_Parse(name, value);
  }

  typedef BidRequest_Imp_Video_VideoBidResponseProtocol VideoBidResponseProtocol;
  static const VideoBidResponseProtocol VAST_1_0 = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_1_0;
  static const VideoBidResponseProtocol VAST_2_0 = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_2_0;
  static const VideoBidResponseProtocol VAST_3_0 = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_3_0;
  static const VideoBidResponseProtocol VAST_1_0_WRAPPER = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_1_0_WRAPPER;
  static const VideoBidResponseProtocol VAST_2_0_WRAPPER = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_2_0_WRAPPER;
  static const VideoBidResponseProtocol VAST_3_0_WRAPPER = BidRequest_Imp_Video_VideoBidResponseProtocol_VAST_3_0_WRAPPER;
  static inline bool VideoBidResponseProtocol_IsValid(int value) {
    return BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value);
  }
  static const VideoBidResponseProtocol VideoBidResponseProtocol_MIN =
    BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_MIN;
  static const VideoBidResponseProtocol VideoBidResponseProtocol_MAX =
    BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_MAX;
  static const int VideoBidResponseProtocol_ARRAYSIZE =
    BidRequest_Imp_Video_VideoBidResponseProtocol_VideoBidResponseProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoBidResponseProtocol_descriptor() {
    return BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor();
  }
  static inline const ::std::string& VideoBidResponseProtocol_Name(VideoBidResponseProtocol value) {
    return BidRequest_Imp_Video_VideoBidResponseProtocol_Name(value);
  }
  static inline bool VideoBidResponseProtocol_Parse(const ::std::string& name,
      VideoBidResponseProtocol* value) {
    return BidRequest_Imp_Video_VideoBidResponseProtocol_Parse(name, value);
  }

  typedef BidRequest_Imp_Video_VideoPlaybackMethod VideoPlaybackMethod;
  static const VideoPlaybackMethod AUTO_PLAY_SOUND_ON = BidRequest_Imp_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_ON;
  static const VideoPlaybackMethod AUTO_PLAY_SOUND_OFF = BidRequest_Imp_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_OFF;
  static const VideoPlaybackMethod CLICK_TO_PLAY = BidRequest_Imp_Video_VideoPlaybackMethod_CLICK_TO_PLAY;
  static const VideoPlaybackMethod MOUSE_OVER = BidRequest_Imp_Video_VideoPlaybackMethod_MOUSE_OVER;
  static inline bool VideoPlaybackMethod_IsValid(int value) {
    return BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value);
  }
  static const VideoPlaybackMethod VideoPlaybackMethod_MIN =
    BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_MIN;
  static const VideoPlaybackMethod VideoPlaybackMethod_MAX =
    BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX;
  static const int VideoPlaybackMethod_ARRAYSIZE =
    BidRequest_Imp_Video_VideoPlaybackMethod_VideoPlaybackMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoPlaybackMethod_descriptor() {
    return BidRequest_Imp_Video_VideoPlaybackMethod_descriptor();
  }
  static inline const ::std::string& VideoPlaybackMethod_Name(VideoPlaybackMethod value) {
    return BidRequest_Imp_Video_VideoPlaybackMethod_Name(value);
  }
  static inline bool VideoPlaybackMethod_Parse(const ::std::string& name,
      VideoPlaybackMethod* value) {
    return BidRequest_Imp_Video_VideoPlaybackMethod_Parse(name, value);
  }

  typedef BidRequest_Imp_Video_VideoStartDelay VideoStartDelay;
  static const VideoStartDelay PRE_ROLL = BidRequest_Imp_Video_VideoStartDelay_PRE_ROLL;
  static const VideoStartDelay GENERIC_MID_ROLL = BidRequest_Imp_Video_VideoStartDelay_GENERIC_MID_ROLL;
  static const VideoStartDelay GENERIC_POST_ROLL = BidRequest_Imp_Video_VideoStartDelay_GENERIC_POST_ROLL;
  static inline bool VideoStartDelay_IsValid(int value) {
    return BidRequest_Imp_Video_VideoStartDelay_IsValid(value);
  }
  static const VideoStartDelay VideoStartDelay_MIN =
    BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_MIN;
  static const VideoStartDelay VideoStartDelay_MAX =
    BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_MAX;
  static const int VideoStartDelay_ARRAYSIZE =
    BidRequest_Imp_Video_VideoStartDelay_VideoStartDelay_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoStartDelay_descriptor() {
    return BidRequest_Imp_Video_VideoStartDelay_descriptor();
  }
  static inline const ::std::string& VideoStartDelay_Name(VideoStartDelay value) {
    return BidRequest_Imp_Video_VideoStartDelay_Name(value);
  }
  static inline bool VideoStartDelay_Parse(const ::std::string& name,
      VideoStartDelay* value) {
    return BidRequest_Imp_Video_VideoStartDelay_Parse(name, value);
  }

  typedef BidRequest_Imp_Video_VASTCompanionType VASTCompanionType;
  static const VASTCompanionType STATIC = BidRequest_Imp_Video_VASTCompanionType_STATIC;
  static const VASTCompanionType HTML = BidRequest_Imp_Video_VASTCompanionType_HTML;
  static const VASTCompanionType COMPANION_IFRAME = BidRequest_Imp_Video_VASTCompanionType_COMPANION_IFRAME;
  static inline bool VASTCompanionType_IsValid(int value) {
    return BidRequest_Imp_Video_VASTCompanionType_IsValid(value);
  }
  static const VASTCompanionType VASTCompanionType_MIN =
    BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_MIN;
  static const VASTCompanionType VASTCompanionType_MAX =
    BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_MAX;
  static const int VASTCompanionType_ARRAYSIZE =
    BidRequest_Imp_Video_VASTCompanionType_VASTCompanionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VASTCompanionType_descriptor() {
    return BidRequest_Imp_Video_VASTCompanionType_descriptor();
  }
  static inline const ::std::string& VASTCompanionType_Name(VASTCompanionType value) {
    return BidRequest_Imp_Video_VASTCompanionType_Name(value);
  }
  static inline bool VASTCompanionType_Parse(const ::std::string& name,
      VASTCompanionType* value) {
    return BidRequest_Imp_Video_VASTCompanionType_Parse(name, value);
  }

  typedef BidRequest_Imp_Video_ContentDeliveryMethod ContentDeliveryMethod;
  static const ContentDeliveryMethod STREAMING = BidRequest_Imp_Video_ContentDeliveryMethod_STREAMING;
  static const ContentDeliveryMethod PROGRESSIVE = BidRequest_Imp_Video_ContentDeliveryMethod_PROGRESSIVE;
  static inline bool ContentDeliveryMethod_IsValid(int value) {
    return BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value);
  }
  static const ContentDeliveryMethod ContentDeliveryMethod_MIN =
    BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_MIN;
  static const ContentDeliveryMethod ContentDeliveryMethod_MAX =
    BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_MAX;
  static const int ContentDeliveryMethod_ARRAYSIZE =
    BidRequest_Imp_Video_ContentDeliveryMethod_ContentDeliveryMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentDeliveryMethod_descriptor() {
    return BidRequest_Imp_Video_ContentDeliveryMethod_descriptor();
  }
  static inline const ::std::string& ContentDeliveryMethod_Name(ContentDeliveryMethod value) {
    return BidRequest_Imp_Video_ContentDeliveryMethod_Name(value);
  }
  static inline bool ContentDeliveryMethod_Parse(const ::std::string& name,
      ContentDeliveryMethod* value) {
    return BidRequest_Imp_Video_ContentDeliveryMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string mimes = 1;
  inline int mimes_size() const;
  inline void clear_mimes();
  static const int kMimesFieldNumber = 1;
  inline const ::std::string& mimes(int index) const;
  inline ::std::string* mutable_mimes(int index);
  inline void set_mimes(int index, const ::std::string& value);
  inline void set_mimes(int index, const char* value);
  inline void set_mimes(int index, const char* value, size_t size);
  inline ::std::string* add_mimes();
  inline void add_mimes(const ::std::string& value);
  inline void add_mimes(const char* value);
  inline void add_mimes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mimes();

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
  inline bool has_linearity() const;
  inline void clear_linearity();
  static const int kLinearityFieldNumber = 2;
  inline ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity linearity() const;
  inline void set_linearity(::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity value);

  // optional int32 minduration = 3;
  inline bool has_minduration() const;
  inline void clear_minduration();
  static const int kMindurationFieldNumber = 3;
  inline ::google::protobuf::int32 minduration() const;
  inline void set_minduration(::google::protobuf::int32 value);

  // optional int32 maxduration = 4;
  inline bool has_maxduration() const;
  inline void clear_maxduration();
  static const int kMaxdurationFieldNumber = 4;
  inline ::google::protobuf::int32 maxduration() const;
  inline void set_maxduration(::google::protobuf::int32 value);

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
  inline bool has_protocol() const PROTOBUF_DEPRECATED;
  inline void clear_protocol() PROTOBUF_DEPRECATED;
  static const int kProtocolFieldNumber = 5;
  inline ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol protocol() const PROTOBUF_DEPRECATED;
  inline void set_protocol(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) PROTOBUF_DEPRECATED;

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  inline int protocols_size() const;
  inline void clear_protocols();
  static const int kProtocolsFieldNumber = 21;
  inline ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol protocols(int index) const;
  inline void set_protocols(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value);
  inline void add_protocols(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value);
  inline const ::google::protobuf::RepeatedField<int>& protocols() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_protocols();

  // optional int32 w = 6;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 6;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 7;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 7;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 startdelay = 8;
  inline bool has_startdelay() const;
  inline void clear_startdelay();
  static const int kStartdelayFieldNumber = 8;
  inline ::google::protobuf::int32 startdelay() const;
  inline void set_startdelay(::google::protobuf::int32 value);

  // optional int32 sequence = 9 [default = 1];
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 9;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 10;
  inline ::com::google::openrtb::CreativeAttribute battr(int index) const;
  inline void set_battr(int index, ::com::google::openrtb::CreativeAttribute value);
  inline void add_battr(::com::google::openrtb::CreativeAttribute value);
  inline const ::google::protobuf::RepeatedField<int>& battr() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_battr();

  // optional int32 maxextended = 11;
  inline bool has_maxextended() const;
  inline void clear_maxextended();
  static const int kMaxextendedFieldNumber = 11;
  inline ::google::protobuf::int32 maxextended() const;
  inline void set_maxextended(::google::protobuf::int32 value);

  // optional int32 minbitrate = 12;
  inline bool has_minbitrate() const;
  inline void clear_minbitrate();
  static const int kMinbitrateFieldNumber = 12;
  inline ::google::protobuf::int32 minbitrate() const;
  inline void set_minbitrate(::google::protobuf::int32 value);

  // optional int32 maxbitrate = 13;
  inline bool has_maxbitrate() const;
  inline void clear_maxbitrate();
  static const int kMaxbitrateFieldNumber = 13;
  inline ::google::protobuf::int32 maxbitrate() const;
  inline void set_maxbitrate(::google::protobuf::int32 value);

  // optional bool boxingallowed = 14 [default = true];
  inline bool has_boxingallowed() const;
  inline void clear_boxingallowed();
  static const int kBoxingallowedFieldNumber = 14;
  inline bool boxingallowed() const;
  inline void set_boxingallowed(bool value);

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  inline int playbackmethod_size() const;
  inline void clear_playbackmethod();
  static const int kPlaybackmethodFieldNumber = 15;
  inline ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod playbackmethod(int index) const;
  inline void set_playbackmethod(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value);
  inline void add_playbackmethod(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value);
  inline const ::google::protobuf::RepeatedField<int>& playbackmethod() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_playbackmethod();

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  inline int delivery_size() const;
  inline void clear_delivery();
  static const int kDeliveryFieldNumber = 16;
  inline ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod delivery(int index) const;
  inline void set_delivery(int index, ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value);
  inline void add_delivery(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value);
  inline const ::google::protobuf::RepeatedField<int>& delivery() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_delivery();

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 17;
  inline ::com::google::openrtb::BidRequest_Imp_AdPosition pos() const;
  inline void set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value);

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  inline int companionad_size() const;
  inline void clear_companionad();
  static const int kCompanionadFieldNumber = 18;
  inline const ::com::google::openrtb::BidRequest_Imp_Banner& companionad(int index) const;
  inline ::com::google::openrtb::BidRequest_Imp_Banner* mutable_companionad(int index);
  inline ::com::google::openrtb::BidRequest_Imp_Banner* add_companionad();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
      companionad() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
      mutable_companionad();

  // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
  inline bool has_companionad_21() const PROTOBUF_DEPRECATED;
  inline void clear_companionad_21() PROTOBUF_DEPRECATED;
  static const int kCompanionad21FieldNumber = 22;
  inline const ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd& companionad_21() const PROTOBUF_DEPRECATED;
  inline ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* mutable_companionad_21() PROTOBUF_DEPRECATED;
  inline ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* release_companionad_21() PROTOBUF_DEPRECATED;
  inline void set_allocated_companionad_21(::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* companionad_21) PROTOBUF_DEPRECATED;

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  inline int api_size() const;
  inline void clear_api();
  static const int kApiFieldNumber = 19;
  inline ::com::google::openrtb::BidRequest_Imp_APIFramework api(int index) const;
  inline void set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline void add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline const ::google::protobuf::RepeatedField<int>& api() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_api();

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  inline int companiontype_size() const;
  inline void clear_companiontype();
  static const int kCompaniontypeFieldNumber = 20;
  inline ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType companiontype(int index) const;
  inline void set_companiontype(int index, ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value);
  inline void add_companiontype(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value);
  inline const ::google::protobuf::RepeatedField<int>& companiontype() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_companiontype();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Video)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Video)
 private:
  inline void set_has_linearity();
  inline void clear_has_linearity();
  inline void set_has_minduration();
  inline void clear_has_minduration();
  inline void set_has_maxduration();
  inline void clear_has_maxduration();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_startdelay();
  inline void clear_has_startdelay();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_maxextended();
  inline void clear_has_maxextended();
  inline void set_has_minbitrate();
  inline void clear_has_minbitrate();
  inline void set_has_maxbitrate();
  inline void clear_has_maxbitrate();
  inline void set_has_boxingallowed();
  inline void clear_has_boxingallowed();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_companionad_21();
  inline void clear_has_companionad_21();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mimes_;
  int linearity_;
  ::google::protobuf::int32 minduration_;
  ::google::protobuf::int32 maxduration_;
  int protocol_;
  ::google::protobuf::RepeatedField<int> protocols_;
  mutable int _protocols_cached_byte_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 startdelay_;
  ::google::protobuf::int32 sequence_;
  ::google::protobuf::RepeatedField<int> battr_;
  mutable int _battr_cached_byte_size_;
  ::google::protobuf::int32 maxextended_;
  ::google::protobuf::int32 minbitrate_;
  ::google::protobuf::int32 maxbitrate_;
  bool boxingallowed_;
  ::google::protobuf::RepeatedField<int> playbackmethod_;
  mutable int _playbackmethod_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> delivery_;
  mutable int _delivery_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner > companionad_;
  ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* companionad_21_;
  ::google::protobuf::RepeatedField<int> api_;
  mutable int _api_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> companiontype_;
  mutable int _companiontype_cached_byte_size_;
  int pos_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Native : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Native();
  virtual ~BidRequest_Imp_Native();

  BidRequest_Imp_Native(const BidRequest_Imp_Native& from);

  inline BidRequest_Imp_Native& operator=(const BidRequest_Imp_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native& default_instance();

  enum RequestOneofCase {
    kRequest = 1,
    kRequestNative = 50,
    REQUEST_ONEOF_NOT_SET = 0,
  };

  void Swap(BidRequest_Imp_Native* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Native* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native& from);
  void MergeFrom(const BidRequest_Imp_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const char* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // optional .com.google.openrtb.NativeRequest request_native = 50;
  inline bool has_request_native() const;
  inline void clear_request_native();
  static const int kRequestNativeFieldNumber = 50;
  inline const ::com::google::openrtb::NativeRequest& request_native() const;
  inline ::com::google::openrtb::NativeRequest* mutable_request_native();
  inline ::com::google::openrtb::NativeRequest* release_request_native();
  inline void set_allocated_request_native(::com::google::openrtb::NativeRequest* request_native);

  // optional string ver = 2;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 2;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  inline int api_size() const;
  inline void clear_api();
  static const int kApiFieldNumber = 3;
  inline ::com::google::openrtb::BidRequest_Imp_APIFramework api(int index) const;
  inline void set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline void add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value);
  inline const ::google::protobuf::RepeatedField<int>& api() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_api();

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 4;
  inline ::com::google::openrtb::CreativeAttribute battr(int index) const;
  inline void set_battr(int index, ::com::google::openrtb::CreativeAttribute value);
  inline void add_battr(::com::google::openrtb::CreativeAttribute value);
  inline const ::google::protobuf::RepeatedField<int>& battr() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_battr();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Native)
  inline RequestOneofCase request_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Native)
 private:
  inline void set_has_request();
  inline void set_has_request_native();
  inline void set_has_ver();
  inline void clear_has_ver();

  inline bool has_request_oneof();
  void clear_request_oneof();
  inline void clear_has_request_oneof();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ver_;
  ::google::protobuf::RepeatedField<int> api_;
  mutable int _api_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> battr_;
  mutable int _battr_cached_byte_size_;
  union RequestOneofUnion {
    ::std::string* request_;
    ::com::google::openrtb::NativeRequest* request_native_;
  } request_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Pmp_Deal : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Pmp_Deal();
  virtual ~BidRequest_Imp_Pmp_Deal();

  BidRequest_Imp_Pmp_Deal(const BidRequest_Imp_Pmp_Deal& from);

  inline BidRequest_Imp_Pmp_Deal& operator=(const BidRequest_Imp_Pmp_Deal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Pmp_Deal& default_instance();

  void Swap(BidRequest_Imp_Pmp_Deal* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Pmp_Deal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Pmp_Deal& from);
  void MergeFrom(const BidRequest_Imp_Pmp_Deal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional double bidfloor = 2 [default = 0];
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidfloorFieldNumber = 2;
  inline double bidfloor() const;
  inline void set_bidfloor(double value);

  // optional string bidfloorcur = 3 [default = "USD"];
  inline bool has_bidfloorcur() const;
  inline void clear_bidfloorcur();
  static const int kBidfloorcurFieldNumber = 3;
  inline const ::std::string& bidfloorcur() const;
  inline void set_bidfloorcur(const ::std::string& value);
  inline void set_bidfloorcur(const char* value);
  inline void set_bidfloorcur(const char* value, size_t size);
  inline ::std::string* mutable_bidfloorcur();
  inline ::std::string* release_bidfloorcur();
  inline void set_allocated_bidfloorcur(::std::string* bidfloorcur);

  // repeated string wseat = 4;
  inline int wseat_size() const;
  inline void clear_wseat();
  static const int kWseatFieldNumber = 4;
  inline const ::std::string& wseat(int index) const;
  inline ::std::string* mutable_wseat(int index);
  inline void set_wseat(int index, const ::std::string& value);
  inline void set_wseat(int index, const char* value);
  inline void set_wseat(int index, const char* value, size_t size);
  inline ::std::string* add_wseat();
  inline void add_wseat(const ::std::string& value);
  inline void add_wseat(const char* value);
  inline void add_wseat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wseat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wseat();

  // repeated string wadomain = 5;
  inline int wadomain_size() const;
  inline void clear_wadomain();
  static const int kWadomainFieldNumber = 5;
  inline const ::std::string& wadomain(int index) const;
  inline ::std::string* mutable_wadomain(int index);
  inline void set_wadomain(int index, const ::std::string& value);
  inline void set_wadomain(int index, const char* value);
  inline void set_wadomain(int index, const char* value, size_t size);
  inline ::std::string* add_wadomain();
  inline void add_wadomain(const ::std::string& value);
  inline void add_wadomain(const char* value);
  inline void add_wadomain(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wadomain() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wadomain();

  // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
  inline bool has_at() const;
  inline void clear_at();
  static const int kAtFieldNumber = 6;
  inline ::com::google::openrtb::BidRequest_AuctionType at() const;
  inline void set_at(::com::google::openrtb::BidRequest_AuctionType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Pmp_Deal)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_bidfloorcur();
  inline void clear_has_bidfloorcur();
  inline void set_has_at();
  inline void clear_has_at();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  double bidfloor_;
  static ::std::string* _default_bidfloorcur_;
  ::std::string* bidfloorcur_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wseat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wadomain_;
  int at_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Pmp_Deal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Pmp : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Pmp();
  virtual ~BidRequest_Imp_Pmp();

  BidRequest_Imp_Pmp(const BidRequest_Imp_Pmp& from);

  inline BidRequest_Imp_Pmp& operator=(const BidRequest_Imp_Pmp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Pmp& default_instance();

  void Swap(BidRequest_Imp_Pmp* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Pmp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Pmp& from);
  void MergeFrom(const BidRequest_Imp_Pmp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Pmp_Deal Deal;

  // accessors -------------------------------------------------------

  // optional bool private_auction = 1;
  inline bool has_private_auction() const;
  inline void clear_private_auction();
  static const int kPrivateAuctionFieldNumber = 1;
  inline bool private_auction() const;
  inline void set_private_auction(bool value);

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  inline int deals_size() const;
  inline void clear_deals();
  static const int kDealsFieldNumber = 2;
  inline const ::com::google::openrtb::BidRequest_Imp_Pmp_Deal& deals(int index) const;
  inline ::com::google::openrtb::BidRequest_Imp_Pmp_Deal* mutable_deals(int index);
  inline ::com::google::openrtb::BidRequest_Imp_Pmp_Deal* add_deals();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >&
      deals() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >*
      mutable_deals();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp_Pmp)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp.Pmp)
 private:
  inline void set_has_private_auction();
  inline void clear_has_private_auction();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal > deals_;
  bool private_auction_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Pmp* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp : public ::google::protobuf::Message {
 public:
  BidRequest_Imp();
  virtual ~BidRequest_Imp();

  BidRequest_Imp(const BidRequest_Imp& from);

  inline BidRequest_Imp& operator=(const BidRequest_Imp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp& default_instance();

  void Swap(BidRequest_Imp* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp& from);
  void MergeFrom(const BidRequest_Imp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Banner Banner;
  typedef BidRequest_Imp_Video Video;
  typedef BidRequest_Imp_Native Native;
  typedef BidRequest_Imp_Pmp Pmp;

  typedef BidRequest_Imp_AdPosition AdPosition;
  static const AdPosition UNKNOWN = BidRequest_Imp_AdPosition_UNKNOWN;
  static const AdPosition ABOVE_THE_FOLD = BidRequest_Imp_AdPosition_ABOVE_THE_FOLD;
  static const AdPosition DEPRECATED_LIKELY_BELOW_THE_FOLD = BidRequest_Imp_AdPosition_DEPRECATED_LIKELY_BELOW_THE_FOLD;
  static const AdPosition BELOW_THE_FOLD = BidRequest_Imp_AdPosition_BELOW_THE_FOLD;
  static const AdPosition HEADER = BidRequest_Imp_AdPosition_HEADER;
  static const AdPosition FOOTER = BidRequest_Imp_AdPosition_FOOTER;
  static const AdPosition SIDEBAR = BidRequest_Imp_AdPosition_SIDEBAR;
  static const AdPosition AD_POSITION_FULLSCREEN = BidRequest_Imp_AdPosition_AD_POSITION_FULLSCREEN;
  static inline bool AdPosition_IsValid(int value) {
    return BidRequest_Imp_AdPosition_IsValid(value);
  }
  static const AdPosition AdPosition_MIN =
    BidRequest_Imp_AdPosition_AdPosition_MIN;
  static const AdPosition AdPosition_MAX =
    BidRequest_Imp_AdPosition_AdPosition_MAX;
  static const int AdPosition_ARRAYSIZE =
    BidRequest_Imp_AdPosition_AdPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdPosition_descriptor() {
    return BidRequest_Imp_AdPosition_descriptor();
  }
  static inline const ::std::string& AdPosition_Name(AdPosition value) {
    return BidRequest_Imp_AdPosition_Name(value);
  }
  static inline bool AdPosition_Parse(const ::std::string& name,
      AdPosition* value) {
    return BidRequest_Imp_AdPosition_Parse(name, value);
  }

  typedef BidRequest_Imp_APIFramework APIFramework;
  static const APIFramework VPAID_1 = BidRequest_Imp_APIFramework_VPAID_1;
  static const APIFramework VPAID_2 = BidRequest_Imp_APIFramework_VPAID_2;
  static const APIFramework MRAID_1 = BidRequest_Imp_APIFramework_MRAID_1;
  static const APIFramework ORMMA = BidRequest_Imp_APIFramework_ORMMA;
  static const APIFramework MRAID_2 = BidRequest_Imp_APIFramework_MRAID_2;
  static inline bool APIFramework_IsValid(int value) {
    return BidRequest_Imp_APIFramework_IsValid(value);
  }
  static const APIFramework APIFramework_MIN =
    BidRequest_Imp_APIFramework_APIFramework_MIN;
  static const APIFramework APIFramework_MAX =
    BidRequest_Imp_APIFramework_APIFramework_MAX;
  static const int APIFramework_ARRAYSIZE =
    BidRequest_Imp_APIFramework_APIFramework_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  APIFramework_descriptor() {
    return BidRequest_Imp_APIFramework_descriptor();
  }
  static inline const ::std::string& APIFramework_Name(APIFramework value) {
    return BidRequest_Imp_APIFramework_Name(value);
  }
  static inline bool APIFramework_Parse(const ::std::string& name,
      APIFramework* value) {
    return BidRequest_Imp_APIFramework_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::com::google::openrtb::BidRequest_Imp_Banner& banner() const;
  inline ::com::google::openrtb::BidRequest_Imp_Banner* mutable_banner();
  inline ::com::google::openrtb::BidRequest_Imp_Banner* release_banner();
  inline void set_allocated_banner(::com::google::openrtb::BidRequest_Imp_Banner* banner);

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 3;
  inline const ::com::google::openrtb::BidRequest_Imp_Video& video() const;
  inline ::com::google::openrtb::BidRequest_Imp_Video* mutable_video();
  inline ::com::google::openrtb::BidRequest_Imp_Video* release_video();
  inline void set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video);

  // optional string displaymanager = 4;
  inline bool has_displaymanager() const;
  inline void clear_displaymanager();
  static const int kDisplaymanagerFieldNumber = 4;
  inline const ::std::string& displaymanager() const;
  inline void set_displaymanager(const ::std::string& value);
  inline void set_displaymanager(const char* value);
  inline void set_displaymanager(const char* value, size_t size);
  inline ::std::string* mutable_displaymanager();
  inline ::std::string* release_displaymanager();
  inline void set_allocated_displaymanager(::std::string* displaymanager);

  // optional string displaymanagerver = 5;
  inline bool has_displaymanagerver() const;
  inline void clear_displaymanagerver();
  static const int kDisplaymanagerverFieldNumber = 5;
  inline const ::std::string& displaymanagerver() const;
  inline void set_displaymanagerver(const ::std::string& value);
  inline void set_displaymanagerver(const char* value);
  inline void set_displaymanagerver(const char* value, size_t size);
  inline ::std::string* mutable_displaymanagerver();
  inline ::std::string* release_displaymanagerver();
  inline void set_allocated_displaymanagerver(::std::string* displaymanagerver);

  // optional bool instl = 6;
  inline bool has_instl() const;
  inline void clear_instl();
  static const int kInstlFieldNumber = 6;
  inline bool instl() const;
  inline void set_instl(bool value);

  // optional string tagid = 7;
  inline bool has_tagid() const;
  inline void clear_tagid();
  static const int kTagidFieldNumber = 7;
  inline const ::std::string& tagid() const;
  inline void set_tagid(const ::std::string& value);
  inline void set_tagid(const char* value);
  inline void set_tagid(const char* value, size_t size);
  inline ::std::string* mutable_tagid();
  inline ::std::string* release_tagid();
  inline void set_allocated_tagid(::std::string* tagid);

  // optional double bidfloor = 8 [default = 0];
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidfloorFieldNumber = 8;
  inline double bidfloor() const;
  inline void set_bidfloor(double value);

  // optional string bidfloorcur = 9 [default = "USD"];
  inline bool has_bidfloorcur() const;
  inline void clear_bidfloorcur();
  static const int kBidfloorcurFieldNumber = 9;
  inline const ::std::string& bidfloorcur() const;
  inline void set_bidfloorcur(const ::std::string& value);
  inline void set_bidfloorcur(const char* value);
  inline void set_bidfloorcur(const char* value, size_t size);
  inline ::std::string* mutable_bidfloorcur();
  inline ::std::string* release_bidfloorcur();
  inline void set_allocated_bidfloorcur(::std::string* bidfloorcur);

  // optional bool secure = 12;
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 12;
  inline bool secure() const;
  inline void set_secure(bool value);

  // repeated string iframebuster = 10;
  inline int iframebuster_size() const;
  inline void clear_iframebuster();
  static const int kIframebusterFieldNumber = 10;
  inline const ::std::string& iframebuster(int index) const;
  inline ::std::string* mutable_iframebuster(int index);
  inline void set_iframebuster(int index, const ::std::string& value);
  inline void set_iframebuster(int index, const char* value);
  inline void set_iframebuster(int index, const char* value, size_t size);
  inline ::std::string* add_iframebuster();
  inline void add_iframebuster(const ::std::string& value);
  inline void add_iframebuster(const char* value);
  inline void add_iframebuster(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& iframebuster() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_iframebuster();

  // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
  inline bool has_pmp() const;
  inline void clear_pmp();
  static const int kPmpFieldNumber = 11;
  inline const ::com::google::openrtb::BidRequest_Imp_Pmp& pmp() const;
  inline ::com::google::openrtb::BidRequest_Imp_Pmp* mutable_pmp();
  inline ::com::google::openrtb::BidRequest_Imp_Pmp* release_pmp();
  inline void set_allocated_pmp(::com::google::openrtb::BidRequest_Imp_Pmp* pmp);

  // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 13;
  inline const ::com::google::openrtb::BidRequest_Imp_Native& native() const;
  inline ::com::google::openrtb::BidRequest_Imp_Native* mutable_native();
  inline ::com::google::openrtb::BidRequest_Imp_Native* release_native();
  inline void set_allocated_native(::com::google::openrtb::BidRequest_Imp_Native* native);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Imp)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Imp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_displaymanager();
  inline void clear_has_displaymanager();
  inline void set_has_displaymanagerver();
  inline void clear_has_displaymanagerver();
  inline void set_has_instl();
  inline void clear_has_instl();
  inline void set_has_tagid();
  inline void clear_has_tagid();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_bidfloorcur();
  inline void clear_has_bidfloorcur();
  inline void set_has_secure();
  inline void clear_has_secure();
  inline void set_has_pmp();
  inline void clear_has_pmp();
  inline void set_has_native();
  inline void clear_has_native();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::com::google::openrtb::BidRequest_Imp_Banner* banner_;
  ::com::google::openrtb::BidRequest_Imp_Video* video_;
  ::std::string* displaymanager_;
  ::std::string* displaymanagerver_;
  ::std::string* tagid_;
  double bidfloor_;
  static ::std::string* _default_bidfloorcur_;
  ::std::string* bidfloorcur_;
  ::google::protobuf::RepeatedPtrField< ::std::string> iframebuster_;
  ::com::google::openrtb::BidRequest_Imp_Pmp* pmp_;
  ::com::google::openrtb::BidRequest_Imp_Native* native_;
  bool instl_;
  bool secure_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Site : public ::google::protobuf::Message {
 public:
  BidRequest_Site();
  virtual ~BidRequest_Site();

  BidRequest_Site(const BidRequest_Site& from);

  inline BidRequest_Site& operator=(const BidRequest_Site& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Site& default_instance();

  void Swap(BidRequest_Site* other);

  // implements Message ----------------------------------------------

  BidRequest_Site* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Site& from);
  void MergeFrom(const BidRequest_Site& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string domain = 3;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 3;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // repeated string cat = 4;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 4;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // repeated string sectioncat = 5;
  inline int sectioncat_size() const;
  inline void clear_sectioncat();
  static const int kSectioncatFieldNumber = 5;
  inline const ::std::string& sectioncat(int index) const;
  inline ::std::string* mutable_sectioncat(int index);
  inline void set_sectioncat(int index, const ::std::string& value);
  inline void set_sectioncat(int index, const char* value);
  inline void set_sectioncat(int index, const char* value, size_t size);
  inline ::std::string* add_sectioncat();
  inline void add_sectioncat(const ::std::string& value);
  inline void add_sectioncat(const char* value);
  inline void add_sectioncat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sectioncat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sectioncat();

  // repeated string pagecat = 6;
  inline int pagecat_size() const;
  inline void clear_pagecat();
  static const int kPagecatFieldNumber = 6;
  inline const ::std::string& pagecat(int index) const;
  inline ::std::string* mutable_pagecat(int index);
  inline void set_pagecat(int index, const ::std::string& value);
  inline void set_pagecat(int index, const char* value);
  inline void set_pagecat(int index, const char* value, size_t size);
  inline ::std::string* add_pagecat();
  inline void add_pagecat(const ::std::string& value);
  inline void add_pagecat(const char* value);
  inline void add_pagecat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pagecat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pagecat();

  // optional string page = 7;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 7;
  inline const ::std::string& page() const;
  inline void set_page(const ::std::string& value);
  inline void set_page(const char* value);
  inline void set_page(const char* value, size_t size);
  inline ::std::string* mutable_page();
  inline ::std::string* release_page();
  inline void set_allocated_page(::std::string* page);

  // optional bool privacypolicy = 8;
  inline bool has_privacypolicy() const;
  inline void clear_privacypolicy();
  static const int kPrivacypolicyFieldNumber = 8;
  inline bool privacypolicy() const;
  inline void set_privacypolicy(bool value);

  // optional string ref = 9;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 9;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  inline ::std::string* release_ref();
  inline void set_allocated_ref(::std::string* ref);

  // optional string search = 10;
  inline bool has_search() const;
  inline void clear_search();
  static const int kSearchFieldNumber = 10;
  inline const ::std::string& search() const;
  inline void set_search(const ::std::string& value);
  inline void set_search(const char* value);
  inline void set_search(const char* value, size_t size);
  inline ::std::string* mutable_search();
  inline ::std::string* release_search();
  inline void set_allocated_search(::std::string* search);

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 11;
  inline const ::com::google::openrtb::BidRequest_Publisher& publisher() const;
  inline ::com::google::openrtb::BidRequest_Publisher* mutable_publisher();
  inline ::com::google::openrtb::BidRequest_Publisher* release_publisher();
  inline void set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher);

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 12;
  inline const ::com::google::openrtb::BidRequest_Content& content() const;
  inline ::com::google::openrtb::BidRequest_Content* mutable_content();
  inline ::com::google::openrtb::BidRequest_Content* release_content();
  inline void set_allocated_content(::com::google::openrtb::BidRequest_Content* content);

  // optional string keywords = 13;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 13;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional bool mobile = 15;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 15;
  inline bool mobile() const;
  inline void set_mobile(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Site)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Site)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_privacypolicy();
  inline void clear_has_privacypolicy();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_search();
  inline void clear_has_search();
  inline void set_has_publisher();
  inline void clear_has_publisher();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* domain_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sectioncat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pagecat_;
  ::std::string* page_;
  ::std::string* ref_;
  ::std::string* search_;
  ::com::google::openrtb::BidRequest_Publisher* publisher_;
  ::com::google::openrtb::BidRequest_Content* content_;
  ::std::string* keywords_;
  bool privacypolicy_;
  bool mobile_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Site* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_App : public ::google::protobuf::Message {
 public:
  BidRequest_App();
  virtual ~BidRequest_App();

  BidRequest_App(const BidRequest_App& from);

  inline BidRequest_App& operator=(const BidRequest_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_App& default_instance();

  void Swap(BidRequest_App* other);

  // implements Message ----------------------------------------------

  BidRequest_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_App& from);
  void MergeFrom(const BidRequest_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string domain = 3;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 3;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // repeated string cat = 4;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 4;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // repeated string sectioncat = 5;
  inline int sectioncat_size() const;
  inline void clear_sectioncat();
  static const int kSectioncatFieldNumber = 5;
  inline const ::std::string& sectioncat(int index) const;
  inline ::std::string* mutable_sectioncat(int index);
  inline void set_sectioncat(int index, const ::std::string& value);
  inline void set_sectioncat(int index, const char* value);
  inline void set_sectioncat(int index, const char* value, size_t size);
  inline ::std::string* add_sectioncat();
  inline void add_sectioncat(const ::std::string& value);
  inline void add_sectioncat(const char* value);
  inline void add_sectioncat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sectioncat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sectioncat();

  // repeated string pagecat = 6;
  inline int pagecat_size() const;
  inline void clear_pagecat();
  static const int kPagecatFieldNumber = 6;
  inline const ::std::string& pagecat(int index) const;
  inline ::std::string* mutable_pagecat(int index);
  inline void set_pagecat(int index, const ::std::string& value);
  inline void set_pagecat(int index, const char* value);
  inline void set_pagecat(int index, const char* value, size_t size);
  inline ::std::string* add_pagecat();
  inline void add_pagecat(const ::std::string& value);
  inline void add_pagecat(const char* value);
  inline void add_pagecat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pagecat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pagecat();

  // optional string ver = 7;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 7;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // optional string bundle = 8;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 8;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional bool privacypolicy = 9;
  inline bool has_privacypolicy() const;
  inline void clear_privacypolicy();
  static const int kPrivacypolicyFieldNumber = 9;
  inline bool privacypolicy() const;
  inline void set_privacypolicy(bool value);

  // optional bool paid = 10;
  inline bool has_paid() const;
  inline void clear_paid();
  static const int kPaidFieldNumber = 10;
  inline bool paid() const;
  inline void set_paid(bool value);

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 11;
  inline const ::com::google::openrtb::BidRequest_Publisher& publisher() const;
  inline ::com::google::openrtb::BidRequest_Publisher* mutable_publisher();
  inline ::com::google::openrtb::BidRequest_Publisher* release_publisher();
  inline void set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher);

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 12;
  inline const ::com::google::openrtb::BidRequest_Content& content() const;
  inline ::com::google::openrtb::BidRequest_Content* mutable_content();
  inline ::com::google::openrtb::BidRequest_Content* release_content();
  inline void set_allocated_content(::com::google::openrtb::BidRequest_Content* content);

  // optional string keywords = 13;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 13;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional string storeurl = 16;
  inline bool has_storeurl() const;
  inline void clear_storeurl();
  static const int kStoreurlFieldNumber = 16;
  inline const ::std::string& storeurl() const;
  inline void set_storeurl(const ::std::string& value);
  inline void set_storeurl(const char* value);
  inline void set_storeurl(const char* value, size_t size);
  inline ::std::string* mutable_storeurl();
  inline ::std::string* release_storeurl();
  inline void set_allocated_storeurl(::std::string* storeurl);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_App)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.App)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_privacypolicy();
  inline void clear_has_privacypolicy();
  inline void set_has_paid();
  inline void clear_has_paid();
  inline void set_has_publisher();
  inline void clear_has_publisher();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_storeurl();
  inline void clear_has_storeurl();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* domain_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sectioncat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pagecat_;
  ::std::string* ver_;
  ::std::string* bundle_;
  ::com::google::openrtb::BidRequest_Publisher* publisher_;
  ::com::google::openrtb::BidRequest_Content* content_;
  ::std::string* keywords_;
  ::std::string* storeurl_;
  bool privacypolicy_;
  bool paid_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_App* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Publisher : public ::google::protobuf::Message {
 public:
  BidRequest_Publisher();
  virtual ~BidRequest_Publisher();

  BidRequest_Publisher(const BidRequest_Publisher& from);

  inline BidRequest_Publisher& operator=(const BidRequest_Publisher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Publisher& default_instance();

  void Swap(BidRequest_Publisher* other);

  // implements Message ----------------------------------------------

  BidRequest_Publisher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Publisher& from);
  void MergeFrom(const BidRequest_Publisher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string cat = 3;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Publisher)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Publisher)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::std::string* domain_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Publisher* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Content : public ::google::protobuf::Message {
 public:
  BidRequest_Content();
  virtual ~BidRequest_Content();

  BidRequest_Content(const BidRequest_Content& from);

  inline BidRequest_Content& operator=(const BidRequest_Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Content& default_instance();

  void Swap(BidRequest_Content* other);

  // implements Message ----------------------------------------------

  BidRequest_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Content& from);
  void MergeFrom(const BidRequest_Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Content_VideoQuality VideoQuality;
  static const VideoQuality QUALITY_UNKNOWN = BidRequest_Content_VideoQuality_QUALITY_UNKNOWN;
  static const VideoQuality PROFESSIONAL = BidRequest_Content_VideoQuality_PROFESSIONAL;
  static const VideoQuality PROSUMER = BidRequest_Content_VideoQuality_PROSUMER;
  static const VideoQuality USER_GENERATED = BidRequest_Content_VideoQuality_USER_GENERATED;
  static inline bool VideoQuality_IsValid(int value) {
    return BidRequest_Content_VideoQuality_IsValid(value);
  }
  static const VideoQuality VideoQuality_MIN =
    BidRequest_Content_VideoQuality_VideoQuality_MIN;
  static const VideoQuality VideoQuality_MAX =
    BidRequest_Content_VideoQuality_VideoQuality_MAX;
  static const int VideoQuality_ARRAYSIZE =
    BidRequest_Content_VideoQuality_VideoQuality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoQuality_descriptor() {
    return BidRequest_Content_VideoQuality_descriptor();
  }
  static inline const ::std::string& VideoQuality_Name(VideoQuality value) {
    return BidRequest_Content_VideoQuality_Name(value);
  }
  static inline bool VideoQuality_Parse(const ::std::string& name,
      VideoQuality* value) {
    return BidRequest_Content_VideoQuality_Parse(name, value);
  }

  typedef BidRequest_Content_ContentContext ContentContext;
  static const ContentContext VIDEO = BidRequest_Content_ContentContext_VIDEO;
  static const ContentContext GAME = BidRequest_Content_ContentContext_GAME;
  static const ContentContext MUSIC = BidRequest_Content_ContentContext_MUSIC;
  static const ContentContext APPLICATION = BidRequest_Content_ContentContext_APPLICATION;
  static const ContentContext TEXT = BidRequest_Content_ContentContext_TEXT;
  static const ContentContext OTHER = BidRequest_Content_ContentContext_OTHER;
  static const ContentContext CONTEXT_UNKNOWN = BidRequest_Content_ContentContext_CONTEXT_UNKNOWN;
  static inline bool ContentContext_IsValid(int value) {
    return BidRequest_Content_ContentContext_IsValid(value);
  }
  static const ContentContext ContentContext_MIN =
    BidRequest_Content_ContentContext_ContentContext_MIN;
  static const ContentContext ContentContext_MAX =
    BidRequest_Content_ContentContext_ContentContext_MAX;
  static const int ContentContext_ARRAYSIZE =
    BidRequest_Content_ContentContext_ContentContext_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentContext_descriptor() {
    return BidRequest_Content_ContentContext_descriptor();
  }
  static inline const ::std::string& ContentContext_Name(ContentContext value) {
    return BidRequest_Content_ContentContext_Name(value);
  }
  static inline bool ContentContext_Parse(const ::std::string& name,
      ContentContext* value) {
    return BidRequest_Content_ContentContext_Parse(name, value);
  }

  typedef BidRequest_Content_QAGMediaRating QAGMediaRating;
  static const QAGMediaRating ALL_AUDIENCES = BidRequest_Content_QAGMediaRating_ALL_AUDIENCES;
  static const QAGMediaRating EVERYONE_OVER_12 = BidRequest_Content_QAGMediaRating_EVERYONE_OVER_12;
  static const QAGMediaRating MATURE = BidRequest_Content_QAGMediaRating_MATURE;
  static inline bool QAGMediaRating_IsValid(int value) {
    return BidRequest_Content_QAGMediaRating_IsValid(value);
  }
  static const QAGMediaRating QAGMediaRating_MIN =
    BidRequest_Content_QAGMediaRating_QAGMediaRating_MIN;
  static const QAGMediaRating QAGMediaRating_MAX =
    BidRequest_Content_QAGMediaRating_QAGMediaRating_MAX;
  static const int QAGMediaRating_ARRAYSIZE =
    BidRequest_Content_QAGMediaRating_QAGMediaRating_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QAGMediaRating_descriptor() {
    return BidRequest_Content_QAGMediaRating_descriptor();
  }
  static inline const ::std::string& QAGMediaRating_Name(QAGMediaRating value) {
    return BidRequest_Content_QAGMediaRating_Name(value);
  }
  static inline bool QAGMediaRating_Parse(const ::std::string& name,
      QAGMediaRating* value) {
    return BidRequest_Content_QAGMediaRating_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 episode = 2;
  inline bool has_episode() const;
  inline void clear_episode();
  static const int kEpisodeFieldNumber = 2;
  inline ::google::protobuf::int32 episode() const;
  inline void set_episode(::google::protobuf::int32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string series = 4;
  inline bool has_series() const;
  inline void clear_series();
  static const int kSeriesFieldNumber = 4;
  inline const ::std::string& series() const;
  inline void set_series(const ::std::string& value);
  inline void set_series(const char* value);
  inline void set_series(const char* value, size_t size);
  inline ::std::string* mutable_series();
  inline ::std::string* release_series();
  inline void set_allocated_series(::std::string* series);

  // optional string season = 5;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 5;
  inline const ::std::string& season() const;
  inline void set_season(const ::std::string& value);
  inline void set_season(const char* value);
  inline void set_season(const char* value, size_t size);
  inline ::std::string* mutable_season();
  inline ::std::string* release_season();
  inline void set_allocated_season(::std::string* season);

  // optional string url = 6;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 6;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // repeated string cat = 7;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 7;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
  inline bool has_videoquality() const;
  inline void clear_videoquality();
  static const int kVideoqualityFieldNumber = 8;
  inline ::com::google::openrtb::BidRequest_Content_VideoQuality videoquality() const;
  inline void set_videoquality(::com::google::openrtb::BidRequest_Content_VideoQuality value);

  // optional string keywords = 9;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 9;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional string contentrating = 10;
  inline bool has_contentrating() const;
  inline void clear_contentrating();
  static const int kContentratingFieldNumber = 10;
  inline const ::std::string& contentrating() const;
  inline void set_contentrating(const ::std::string& value);
  inline void set_contentrating(const char* value);
  inline void set_contentrating(const char* value, size_t size);
  inline ::std::string* mutable_contentrating();
  inline ::std::string* release_contentrating();
  inline void set_allocated_contentrating(::std::string* contentrating);

  // optional string userrating = 11;
  inline bool has_userrating() const;
  inline void clear_userrating();
  static const int kUserratingFieldNumber = 11;
  inline const ::std::string& userrating() const;
  inline void set_userrating(const ::std::string& value);
  inline void set_userrating(const char* value);
  inline void set_userrating(const char* value, size_t size);
  inline ::std::string* mutable_userrating();
  inline ::std::string* release_userrating();
  inline void set_allocated_userrating(::std::string* userrating);

  // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 20;
  inline ::com::google::openrtb::BidRequest_Content_ContentContext context() const;
  inline void set_context(::com::google::openrtb::BidRequest_Content_ContentContext value);

  // optional string context_22 = 12;
  inline bool has_context_22() const;
  inline void clear_context_22();
  static const int kContext22FieldNumber = 12;
  inline const ::std::string& context_22() const;
  inline void set_context_22(const ::std::string& value);
  inline void set_context_22(const char* value);
  inline void set_context_22(const char* value, size_t size);
  inline ::std::string* mutable_context_22();
  inline ::std::string* release_context_22();
  inline void set_allocated_context_22(::std::string* context_22);

  // optional bool livestream = 13;
  inline bool has_livestream() const;
  inline void clear_livestream();
  static const int kLivestreamFieldNumber = 13;
  inline bool livestream() const;
  inline void set_livestream(bool value);

  // optional bool sourcerelationship = 14;
  inline bool has_sourcerelationship() const;
  inline void clear_sourcerelationship();
  static const int kSourcerelationshipFieldNumber = 14;
  inline bool sourcerelationship() const;
  inline void set_sourcerelationship(bool value);

  // optional .com.google.openrtb.BidRequest.Producer producer = 15;
  inline bool has_producer() const;
  inline void clear_producer();
  static const int kProducerFieldNumber = 15;
  inline const ::com::google::openrtb::BidRequest_Producer& producer() const;
  inline ::com::google::openrtb::BidRequest_Producer* mutable_producer();
  inline ::com::google::openrtb::BidRequest_Producer* release_producer();
  inline void set_allocated_producer(::com::google::openrtb::BidRequest_Producer* producer);

  // optional int32 len = 16;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 16;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
  inline bool has_qagmediarating() const;
  inline void clear_qagmediarating();
  static const int kQagmediaratingFieldNumber = 17;
  inline ::com::google::openrtb::BidRequest_Content_QAGMediaRating qagmediarating() const;
  inline void set_qagmediarating(::com::google::openrtb::BidRequest_Content_QAGMediaRating value);

  // optional bool embeddable = 18;
  inline bool has_embeddable() const;
  inline void clear_embeddable();
  static const int kEmbeddableFieldNumber = 18;
  inline bool embeddable() const;
  inline void set_embeddable(bool value);

  // optional string language = 19;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 19;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Content)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Content)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_episode();
  inline void clear_has_episode();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_series();
  inline void clear_has_series();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_videoquality();
  inline void clear_has_videoquality();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_contentrating();
  inline void clear_has_contentrating();
  inline void set_has_userrating();
  inline void clear_has_userrating();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_context_22();
  inline void clear_has_context_22();
  inline void set_has_livestream();
  inline void clear_has_livestream();
  inline void set_has_sourcerelationship();
  inline void clear_has_sourcerelationship();
  inline void set_has_producer();
  inline void clear_has_producer();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_qagmediarating();
  inline void clear_has_qagmediarating();
  inline void set_has_embeddable();
  inline void clear_has_embeddable();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* title_;
  ::std::string* series_;
  ::std::string* season_;
  ::google::protobuf::int32 episode_;
  int videoquality_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::std::string* keywords_;
  ::std::string* contentrating_;
  ::std::string* userrating_;
  ::std::string* context_22_;
  int context_;
  bool livestream_;
  bool sourcerelationship_;
  bool embeddable_;
  ::com::google::openrtb::BidRequest_Producer* producer_;
  ::google::protobuf::int32 len_;
  int qagmediarating_;
  ::std::string* language_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Content* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Producer : public ::google::protobuf::Message {
 public:
  BidRequest_Producer();
  virtual ~BidRequest_Producer();

  BidRequest_Producer(const BidRequest_Producer& from);

  inline BidRequest_Producer& operator=(const BidRequest_Producer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Producer& default_instance();

  void Swap(BidRequest_Producer* other);

  // implements Message ----------------------------------------------

  BidRequest_Producer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Producer& from);
  void MergeFrom(const BidRequest_Producer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string cat = 3;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Producer)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Producer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::std::string* domain_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Producer* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Device();
  virtual ~BidRequest_Device();

  BidRequest_Device(const BidRequest_Device& from);

  inline BidRequest_Device& operator=(const BidRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device& default_instance();

  void Swap(BidRequest_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device& from);
  void MergeFrom(const BidRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Device_DeviceType DeviceType;
  static const DeviceType MOBILE = BidRequest_Device_DeviceType_MOBILE;
  static const DeviceType PERSONAL_COMPUTER = BidRequest_Device_DeviceType_PERSONAL_COMPUTER;
  static const DeviceType CONNECTED_TV = BidRequest_Device_DeviceType_CONNECTED_TV;
  static const DeviceType PHONE = BidRequest_Device_DeviceType_PHONE;
  static const DeviceType TABLET = BidRequest_Device_DeviceType_TABLET;
  static const DeviceType CONNECTED_DEVICE = BidRequest_Device_DeviceType_CONNECTED_DEVICE;
  static const DeviceType SET_TOP_BOX = BidRequest_Device_DeviceType_SET_TOP_BOX;
  static inline bool DeviceType_IsValid(int value) {
    return BidRequest_Device_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    BidRequest_Device_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    BidRequest_Device_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return BidRequest_Device_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return BidRequest_Device_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return BidRequest_Device_DeviceType_Parse(name, value);
  }

  typedef BidRequest_Device_ConnectionType ConnectionType;
  static const ConnectionType CONNECTION_UNKNOWN = BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN;
  static const ConnectionType ETHERNET = BidRequest_Device_ConnectionType_ETHERNET;
  static const ConnectionType WIFI = BidRequest_Device_ConnectionType_WIFI;
  static const ConnectionType CELL_UNKNOWN = BidRequest_Device_ConnectionType_CELL_UNKNOWN;
  static const ConnectionType CELL_2G = BidRequest_Device_ConnectionType_CELL_2G;
  static const ConnectionType CELL_3G = BidRequest_Device_ConnectionType_CELL_3G;
  static const ConnectionType CELL_4G = BidRequest_Device_ConnectionType_CELL_4G;
  static inline bool ConnectionType_IsValid(int value) {
    return BidRequest_Device_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    BidRequest_Device_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    BidRequest_Device_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    BidRequest_Device_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return BidRequest_Device_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return BidRequest_Device_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return BidRequest_Device_ConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool dnt = 1;
  inline bool has_dnt() const;
  inline void clear_dnt();
  static const int kDntFieldNumber = 1;
  inline bool dnt() const;
  inline void set_dnt(bool value);

  // optional string ua = 2;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 2;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional .com.google.openrtb.BidRequest.Geo geo = 4;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 4;
  inline const ::com::google::openrtb::BidRequest_Geo& geo() const;
  inline ::com::google::openrtb::BidRequest_Geo* mutable_geo();
  inline ::com::google::openrtb::BidRequest_Geo* release_geo();
  inline void set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo);

  // optional string didsha1 = 5;
  inline bool has_didsha1() const;
  inline void clear_didsha1();
  static const int kDidsha1FieldNumber = 5;
  inline const ::std::string& didsha1() const;
  inline void set_didsha1(const ::std::string& value);
  inline void set_didsha1(const char* value);
  inline void set_didsha1(const char* value, size_t size);
  inline ::std::string* mutable_didsha1();
  inline ::std::string* release_didsha1();
  inline void set_allocated_didsha1(::std::string* didsha1);

  // optional string didmd5 = 6;
  inline bool has_didmd5() const;
  inline void clear_didmd5();
  static const int kDidmd5FieldNumber = 6;
  inline const ::std::string& didmd5() const;
  inline void set_didmd5(const ::std::string& value);
  inline void set_didmd5(const char* value);
  inline void set_didmd5(const char* value, size_t size);
  inline ::std::string* mutable_didmd5();
  inline ::std::string* release_didmd5();
  inline void set_allocated_didmd5(::std::string* didmd5);

  // optional string dpidsha1 = 7;
  inline bool has_dpidsha1() const;
  inline void clear_dpidsha1();
  static const int kDpidsha1FieldNumber = 7;
  inline const ::std::string& dpidsha1() const;
  inline void set_dpidsha1(const ::std::string& value);
  inline void set_dpidsha1(const char* value);
  inline void set_dpidsha1(const char* value, size_t size);
  inline ::std::string* mutable_dpidsha1();
  inline ::std::string* release_dpidsha1();
  inline void set_allocated_dpidsha1(::std::string* dpidsha1);

  // optional string dpidmd5 = 8;
  inline bool has_dpidmd5() const;
  inline void clear_dpidmd5();
  static const int kDpidmd5FieldNumber = 8;
  inline const ::std::string& dpidmd5() const;
  inline void set_dpidmd5(const ::std::string& value);
  inline void set_dpidmd5(const char* value);
  inline void set_dpidmd5(const char* value, size_t size);
  inline ::std::string* mutable_dpidmd5();
  inline ::std::string* release_dpidmd5();
  inline void set_allocated_dpidmd5(::std::string* dpidmd5);

  // optional string ipv6 = 9;
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 9;
  inline const ::std::string& ipv6() const;
  inline void set_ipv6(const ::std::string& value);
  inline void set_ipv6(const char* value);
  inline void set_ipv6(const char* value, size_t size);
  inline ::std::string* mutable_ipv6();
  inline ::std::string* release_ipv6();
  inline void set_allocated_ipv6(::std::string* ipv6);

  // optional string carrier = 10;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 10;
  inline const ::std::string& carrier() const;
  inline void set_carrier(const ::std::string& value);
  inline void set_carrier(const char* value);
  inline void set_carrier(const char* value, size_t size);
  inline ::std::string* mutable_carrier();
  inline ::std::string* release_carrier();
  inline void set_allocated_carrier(::std::string* carrier);

  // optional string language = 11;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 11;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string make = 12;
  inline bool has_make() const;
  inline void clear_make();
  static const int kMakeFieldNumber = 12;
  inline const ::std::string& make() const;
  inline void set_make(const ::std::string& value);
  inline void set_make(const char* value);
  inline void set_make(const char* value, size_t size);
  inline ::std::string* mutable_make();
  inline ::std::string* release_make();
  inline void set_allocated_make(::std::string* make);

  // optional string model = 13;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 13;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string os = 14;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 14;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string osv = 15;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 15;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional string hwv = 24;
  inline bool has_hwv() const;
  inline void clear_hwv();
  static const int kHwvFieldNumber = 24;
  inline const ::std::string& hwv() const;
  inline void set_hwv(const ::std::string& value);
  inline void set_hwv(const char* value);
  inline void set_hwv(const char* value, size_t size);
  inline ::std::string* mutable_hwv();
  inline ::std::string* release_hwv();
  inline void set_allocated_hwv(::std::string* hwv);

  // optional int32 w = 25;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 25;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 26;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 26;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 ppi = 27;
  inline bool has_ppi() const;
  inline void clear_ppi();
  static const int kPpiFieldNumber = 27;
  inline ::google::protobuf::int32 ppi() const;
  inline void set_ppi(::google::protobuf::int32 value);

  // optional double pxratio = 28;
  inline bool has_pxratio() const;
  inline void clear_pxratio();
  static const int kPxratioFieldNumber = 28;
  inline double pxratio() const;
  inline void set_pxratio(double value);

  // optional bool js = 16;
  inline bool has_js() const;
  inline void clear_js();
  static const int kJsFieldNumber = 16;
  inline bool js() const;
  inline void set_js(bool value);

  // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectiontypeFieldNumber = 17;
  inline ::com::google::openrtb::BidRequest_Device_ConnectionType connectiontype() const;
  inline void set_connectiontype(::com::google::openrtb::BidRequest_Device_ConnectionType value);

  // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDevicetypeFieldNumber = 18;
  inline ::com::google::openrtb::BidRequest_Device_DeviceType devicetype() const;
  inline void set_devicetype(::com::google::openrtb::BidRequest_Device_DeviceType value);

  // optional string flashver = 19;
  inline bool has_flashver() const;
  inline void clear_flashver();
  static const int kFlashverFieldNumber = 19;
  inline const ::std::string& flashver() const;
  inline void set_flashver(const ::std::string& value);
  inline void set_flashver(const char* value);
  inline void set_flashver(const char* value, size_t size);
  inline ::std::string* mutable_flashver();
  inline ::std::string* release_flashver();
  inline void set_allocated_flashver(::std::string* flashver);

  // optional string ifa = 20;
  inline bool has_ifa() const;
  inline void clear_ifa();
  static const int kIfaFieldNumber = 20;
  inline const ::std::string& ifa() const;
  inline void set_ifa(const ::std::string& value);
  inline void set_ifa(const char* value);
  inline void set_ifa(const char* value, size_t size);
  inline ::std::string* mutable_ifa();
  inline ::std::string* release_ifa();
  inline void set_allocated_ifa(::std::string* ifa);

  // optional string macsha1 = 21;
  inline bool has_macsha1() const;
  inline void clear_macsha1();
  static const int kMacsha1FieldNumber = 21;
  inline const ::std::string& macsha1() const;
  inline void set_macsha1(const ::std::string& value);
  inline void set_macsha1(const char* value);
  inline void set_macsha1(const char* value, size_t size);
  inline ::std::string* mutable_macsha1();
  inline ::std::string* release_macsha1();
  inline void set_allocated_macsha1(::std::string* macsha1);

  // optional string macmd5 = 22;
  inline bool has_macmd5() const;
  inline void clear_macmd5();
  static const int kMacmd5FieldNumber = 22;
  inline const ::std::string& macmd5() const;
  inline void set_macmd5(const ::std::string& value);
  inline void set_macmd5(const char* value);
  inline void set_macmd5(const char* value, size_t size);
  inline ::std::string* mutable_macmd5();
  inline ::std::string* release_macmd5();
  inline void set_allocated_macmd5(::std::string* macmd5);

  // optional bool lmt = 23;
  inline bool has_lmt() const;
  inline void clear_lmt();
  static const int kLmtFieldNumber = 23;
  inline bool lmt() const;
  inline void set_lmt(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Device)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Device)
 private:
  inline void set_has_dnt();
  inline void clear_has_dnt();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_didsha1();
  inline void clear_has_didsha1();
  inline void set_has_didmd5();
  inline void clear_has_didmd5();
  inline void set_has_dpidsha1();
  inline void clear_has_dpidsha1();
  inline void set_has_dpidmd5();
  inline void clear_has_dpidmd5();
  inline void set_has_ipv6();
  inline void clear_has_ipv6();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_make();
  inline void clear_has_make();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_hwv();
  inline void clear_has_hwv();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_ppi();
  inline void clear_has_ppi();
  inline void set_has_pxratio();
  inline void clear_has_pxratio();
  inline void set_has_js();
  inline void clear_has_js();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_flashver();
  inline void clear_has_flashver();
  inline void set_has_ifa();
  inline void clear_has_ifa();
  inline void set_has_macsha1();
  inline void clear_has_macsha1();
  inline void set_has_macmd5();
  inline void clear_has_macmd5();
  inline void set_has_lmt();
  inline void clear_has_lmt();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ua_;
  ::std::string* ip_;
  ::com::google::openrtb::BidRequest_Geo* geo_;
  ::std::string* didsha1_;
  ::std::string* didmd5_;
  ::std::string* dpidsha1_;
  ::std::string* dpidmd5_;
  ::std::string* ipv6_;
  ::std::string* carrier_;
  ::std::string* language_;
  ::std::string* make_;
  ::std::string* model_;
  ::std::string* os_;
  ::std::string* osv_;
  ::std::string* hwv_;
  bool dnt_;
  bool js_;
  bool lmt_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 ppi_;
  double pxratio_;
  int connectiontype_;
  int devicetype_;
  ::std::string* flashver_;
  ::std::string* ifa_;
  ::std::string* macsha1_;
  ::std::string* macmd5_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Geo : public ::google::protobuf::Message {
 public:
  BidRequest_Geo();
  virtual ~BidRequest_Geo();

  BidRequest_Geo(const BidRequest_Geo& from);

  inline BidRequest_Geo& operator=(const BidRequest_Geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Geo& default_instance();

  void Swap(BidRequest_Geo* other);

  // implements Message ----------------------------------------------

  BidRequest_Geo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Geo& from);
  void MergeFrom(const BidRequest_Geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Geo_LocationType LocationType;
  static const LocationType GPS_LOCATION = BidRequest_Geo_LocationType_GPS_LOCATION;
  static const LocationType IP = BidRequest_Geo_LocationType_IP;
  static const LocationType USER_PROVIDED = BidRequest_Geo_LocationType_USER_PROVIDED;
  static inline bool LocationType_IsValid(int value) {
    return BidRequest_Geo_LocationType_IsValid(value);
  }
  static const LocationType LocationType_MIN =
    BidRequest_Geo_LocationType_LocationType_MIN;
  static const LocationType LocationType_MAX =
    BidRequest_Geo_LocationType_LocationType_MAX;
  static const int LocationType_ARRAYSIZE =
    BidRequest_Geo_LocationType_LocationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocationType_descriptor() {
    return BidRequest_Geo_LocationType_descriptor();
  }
  static inline const ::std::string& LocationType_Name(LocationType value) {
    return BidRequest_Geo_LocationType_Name(value);
  }
  static inline bool LocationType_Parse(const ::std::string& name,
      LocationType* value) {
    return BidRequest_Geo_LocationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // optional string country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string region = 4;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 4;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const char* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  inline void set_allocated_region(::std::string* region);

  // optional string regionfips104 = 5;
  inline bool has_regionfips104() const;
  inline void clear_regionfips104();
  static const int kRegionfips104FieldNumber = 5;
  inline const ::std::string& regionfips104() const;
  inline void set_regionfips104(const ::std::string& value);
  inline void set_regionfips104(const char* value);
  inline void set_regionfips104(const char* value, size_t size);
  inline ::std::string* mutable_regionfips104();
  inline ::std::string* release_regionfips104();
  inline void set_allocated_regionfips104(::std::string* regionfips104);

  // optional string metro = 6;
  inline bool has_metro() const;
  inline void clear_metro();
  static const int kMetroFieldNumber = 6;
  inline const ::std::string& metro() const;
  inline void set_metro(const ::std::string& value);
  inline void set_metro(const char* value);
  inline void set_metro(const char* value, size_t size);
  inline ::std::string* mutable_metro();
  inline ::std::string* release_metro();
  inline void set_allocated_metro(::std::string* metro);

  // optional string city = 7;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 7;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string zip = 8;
  inline bool has_zip() const;
  inline void clear_zip();
  static const int kZipFieldNumber = 8;
  inline const ::std::string& zip() const;
  inline void set_zip(const ::std::string& value);
  inline void set_zip(const char* value);
  inline void set_zip(const char* value, size_t size);
  inline ::std::string* mutable_zip();
  inline ::std::string* release_zip();
  inline void set_allocated_zip(::std::string* zip);

  // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::com::google::openrtb::BidRequest_Geo_LocationType type() const;
  inline void set_type(::com::google::openrtb::BidRequest_Geo_LocationType value);

  // optional int32 utcoffset = 10;
  inline bool has_utcoffset() const;
  inline void clear_utcoffset();
  static const int kUtcoffsetFieldNumber = 10;
  inline ::google::protobuf::int32 utcoffset() const;
  inline void set_utcoffset(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Geo)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Geo)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_regionfips104();
  inline void clear_has_regionfips104();
  inline void set_has_metro();
  inline void clear_has_metro();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_zip();
  inline void clear_has_zip();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_utcoffset();
  inline void clear_has_utcoffset();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  ::std::string* country_;
  ::std::string* region_;
  ::std::string* regionfips104_;
  ::std::string* metro_;
  ::std::string* city_;
  ::std::string* zip_;
  int type_;
  ::google::protobuf::int32 utcoffset_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Geo* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User : public ::google::protobuf::Message {
 public:
  BidRequest_User();
  virtual ~BidRequest_User();

  BidRequest_User(const BidRequest_User& from);

  inline BidRequest_User& operator=(const BidRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User& default_instance();

  void Swap(BidRequest_User* other);

  // implements Message ----------------------------------------------

  BidRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User& from);
  void MergeFrom(const BidRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_User_Gender Gender;
  static const Gender MALE = BidRequest_User_Gender_MALE;
  static const Gender FEMALE = BidRequest_User_Gender_FEMALE;
  static const Gender OTHER = BidRequest_User_Gender_OTHER;
  static inline bool Gender_IsValid(int value) {
    return BidRequest_User_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    BidRequest_User_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    BidRequest_User_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    BidRequest_User_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return BidRequest_User_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return BidRequest_User_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return BidRequest_User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string buyeruid = 2;
  inline bool has_buyeruid() const;
  inline void clear_buyeruid();
  static const int kBuyeruidFieldNumber = 2;
  inline const ::std::string& buyeruid() const;
  inline void set_buyeruid(const ::std::string& value);
  inline void set_buyeruid(const char* value);
  inline void set_buyeruid(const char* value, size_t size);
  inline ::std::string* mutable_buyeruid();
  inline ::std::string* release_buyeruid();
  inline void set_allocated_buyeruid(::std::string* buyeruid);

  // optional int32 yob = 3;
  inline bool has_yob() const;
  inline void clear_yob();
  static const int kYobFieldNumber = 3;
  inline ::google::protobuf::int32 yob() const;
  inline void set_yob(::google::protobuf::int32 value);

  // optional string gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline const ::std::string& gender() const;
  inline void set_gender(const ::std::string& value);
  inline void set_gender(const char* value);
  inline void set_gender(const char* value, size_t size);
  inline ::std::string* mutable_gender();
  inline ::std::string* release_gender();
  inline void set_allocated_gender(::std::string* gender);

  // optional string keywords = 5;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 5;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional string customdata = 6;
  inline bool has_customdata() const;
  inline void clear_customdata();
  static const int kCustomdataFieldNumber = 6;
  inline const ::std::string& customdata() const;
  inline void set_customdata(const ::std::string& value);
  inline void set_customdata(const char* value);
  inline void set_customdata(const char* value, size_t size);
  inline ::std::string* mutable_customdata();
  inline ::std::string* release_customdata();
  inline void set_allocated_customdata(::std::string* customdata);

  // optional .com.google.openrtb.BidRequest.Geo geo = 7;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 7;
  inline const ::com::google::openrtb::BidRequest_Geo& geo() const;
  inline ::com::google::openrtb::BidRequest_Geo* mutable_geo();
  inline ::com::google::openrtb::BidRequest_Geo* release_geo();
  inline void set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo);

  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::com::google::openrtb::BidRequest_Data& data(int index) const;
  inline ::com::google::openrtb::BidRequest_Data* mutable_data(int index);
  inline ::com::google::openrtb::BidRequest_Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >*
      mutable_data();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_User)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buyeruid();
  inline void clear_has_buyeruid();
  inline void set_has_yob();
  inline void clear_has_yob();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_customdata();
  inline void clear_has_customdata();
  inline void set_has_geo();
  inline void clear_has_geo();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* buyeruid_;
  ::std::string* gender_;
  ::std::string* keywords_;
  ::std::string* customdata_;
  ::com::google::openrtb::BidRequest_Geo* geo_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data > data_;
  ::google::protobuf::int32 yob_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Data_Segment : public ::google::protobuf::Message {
 public:
  BidRequest_Data_Segment();
  virtual ~BidRequest_Data_Segment();

  BidRequest_Data_Segment(const BidRequest_Data_Segment& from);

  inline BidRequest_Data_Segment& operator=(const BidRequest_Data_Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Data_Segment& default_instance();

  void Swap(BidRequest_Data_Segment* other);

  // implements Message ----------------------------------------------

  BidRequest_Data_Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Data_Segment& from);
  void MergeFrom(const BidRequest_Data_Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Data_Segment)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Data.Segment)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Data_Segment* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Data : public ::google::protobuf::Message {
 public:
  BidRequest_Data();
  virtual ~BidRequest_Data();

  BidRequest_Data(const BidRequest_Data& from);

  inline BidRequest_Data& operator=(const BidRequest_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Data& default_instance();

  void Swap(BidRequest_Data* other);

  // implements Message ----------------------------------------------

  BidRequest_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Data& from);
  void MergeFrom(const BidRequest_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Data_Segment Segment;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  inline int segment_size() const;
  inline void clear_segment();
  static const int kSegmentFieldNumber = 3;
  inline const ::com::google::openrtb::BidRequest_Data_Segment& segment(int index) const;
  inline ::com::google::openrtb::BidRequest_Data_Segment* mutable_segment(int index);
  inline ::com::google::openrtb::BidRequest_Data_Segment* add_segment();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >&
      segment() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >*
      mutable_segment();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Data)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment > segment_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Data* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Regs : public ::google::protobuf::Message {
 public:
  BidRequest_Regs();
  virtual ~BidRequest_Regs();

  BidRequest_Regs(const BidRequest_Regs& from);

  inline BidRequest_Regs& operator=(const BidRequest_Regs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Regs& default_instance();

  void Swap(BidRequest_Regs* other);

  // implements Message ----------------------------------------------

  BidRequest_Regs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Regs& from);
  void MergeFrom(const BidRequest_Regs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool coppa = 1;
  inline bool has_coppa() const;
  inline void clear_coppa();
  static const int kCoppaFieldNumber = 1;
  inline bool coppa() const;
  inline void set_coppa(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest_Regs)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest.Regs)
 private:
  inline void set_has_coppa();
  inline void clear_has_coppa();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool coppa_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Regs* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  enum DistributionchannelOneofCase {
    kSite = 3,
    kApp = 4,
    DISTRIBUTIONCHANNEL_ONEOF_NOT_SET = 0,
  };

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp Imp;
  typedef BidRequest_Site Site;
  typedef BidRequest_App App;
  typedef BidRequest_Publisher Publisher;
  typedef BidRequest_Content Content;
  typedef BidRequest_Producer Producer;
  typedef BidRequest_Device Device;
  typedef BidRequest_Geo Geo;
  typedef BidRequest_User User;
  typedef BidRequest_Data Data;
  typedef BidRequest_Regs Regs;

  typedef BidRequest_AuctionType AuctionType;
  static const AuctionType FIRST_PRICE = BidRequest_AuctionType_FIRST_PRICE;
  static const AuctionType SECOND_PRICE = BidRequest_AuctionType_SECOND_PRICE;
  static const AuctionType FIXED_PRICE = BidRequest_AuctionType_FIXED_PRICE;
  static inline bool AuctionType_IsValid(int value) {
    return BidRequest_AuctionType_IsValid(value);
  }
  static const AuctionType AuctionType_MIN =
    BidRequest_AuctionType_AuctionType_MIN;
  static const AuctionType AuctionType_MAX =
    BidRequest_AuctionType_AuctionType_MAX;
  static const int AuctionType_ARRAYSIZE =
    BidRequest_AuctionType_AuctionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuctionType_descriptor() {
    return BidRequest_AuctionType_descriptor();
  }
  static inline const ::std::string& AuctionType_Name(AuctionType value) {
    return BidRequest_AuctionType_Name(value);
  }
  static inline bool AuctionType_Parse(const ::std::string& name,
      AuctionType* value) {
    return BidRequest_AuctionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  inline int imp_size() const;
  inline void clear_imp();
  static const int kImpFieldNumber = 2;
  inline const ::com::google::openrtb::BidRequest_Imp& imp(int index) const;
  inline ::com::google::openrtb::BidRequest_Imp* mutable_imp(int index);
  inline ::com::google::openrtb::BidRequest_Imp* add_imp();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >&
      imp() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >*
      mutable_imp();

  // optional .com.google.openrtb.BidRequest.Site site = 3;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 3;
  inline const ::com::google::openrtb::BidRequest_Site& site() const;
  inline ::com::google::openrtb::BidRequest_Site* mutable_site();
  inline ::com::google::openrtb::BidRequest_Site* release_site();
  inline void set_allocated_site(::com::google::openrtb::BidRequest_Site* site);

  // optional .com.google.openrtb.BidRequest.App app = 4;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 4;
  inline const ::com::google::openrtb::BidRequest_App& app() const;
  inline ::com::google::openrtb::BidRequest_App* mutable_app();
  inline ::com::google::openrtb::BidRequest_App* release_app();
  inline void set_allocated_app(::com::google::openrtb::BidRequest_App* app);

  // optional .com.google.openrtb.BidRequest.Device device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::com::google::openrtb::BidRequest_Device& device() const;
  inline ::com::google::openrtb::BidRequest_Device* mutable_device();
  inline ::com::google::openrtb::BidRequest_Device* release_device();
  inline void set_allocated_device(::com::google::openrtb::BidRequest_Device* device);

  // optional .com.google.openrtb.BidRequest.Regs regs = 14;
  inline bool has_regs() const;
  inline void clear_regs();
  static const int kRegsFieldNumber = 14;
  inline const ::com::google::openrtb::BidRequest_Regs& regs() const;
  inline ::com::google::openrtb::BidRequest_Regs* mutable_regs();
  inline ::com::google::openrtb::BidRequest_Regs* release_regs();
  inline void set_allocated_regs(::com::google::openrtb::BidRequest_Regs* regs);

  // optional .com.google.openrtb.BidRequest.User user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::com::google::openrtb::BidRequest_User& user() const;
  inline ::com::google::openrtb::BidRequest_User* mutable_user();
  inline ::com::google::openrtb::BidRequest_User* release_user();
  inline void set_allocated_user(::com::google::openrtb::BidRequest_User* user);

  // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
  inline bool has_at() const;
  inline void clear_at();
  static const int kAtFieldNumber = 7;
  inline ::com::google::openrtb::BidRequest_AuctionType at() const;
  inline void set_at(::com::google::openrtb::BidRequest_AuctionType value);

  // optional int32 tmax = 8;
  inline bool has_tmax() const;
  inline void clear_tmax();
  static const int kTmaxFieldNumber = 8;
  inline ::google::protobuf::int32 tmax() const;
  inline void set_tmax(::google::protobuf::int32 value);

  // repeated string wseat = 9;
  inline int wseat_size() const;
  inline void clear_wseat();
  static const int kWseatFieldNumber = 9;
  inline const ::std::string& wseat(int index) const;
  inline ::std::string* mutable_wseat(int index);
  inline void set_wseat(int index, const ::std::string& value);
  inline void set_wseat(int index, const char* value);
  inline void set_wseat(int index, const char* value, size_t size);
  inline ::std::string* add_wseat();
  inline void add_wseat(const ::std::string& value);
  inline void add_wseat(const char* value);
  inline void add_wseat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wseat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wseat();

  // optional bool allimps = 10 [default = false];
  inline bool has_allimps() const;
  inline void clear_allimps();
  static const int kAllimpsFieldNumber = 10;
  inline bool allimps() const;
  inline void set_allimps(bool value);

  // repeated string cur = 11;
  inline int cur_size() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 11;
  inline const ::std::string& cur(int index) const;
  inline ::std::string* mutable_cur(int index);
  inline void set_cur(int index, const ::std::string& value);
  inline void set_cur(int index, const char* value);
  inline void set_cur(int index, const char* value, size_t size);
  inline ::std::string* add_cur();
  inline void add_cur(const ::std::string& value);
  inline void add_cur(const char* value);
  inline void add_cur(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cur() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cur();

  // repeated string bcat = 12;
  inline int bcat_size() const;
  inline void clear_bcat();
  static const int kBcatFieldNumber = 12;
  inline const ::std::string& bcat(int index) const;
  inline ::std::string* mutable_bcat(int index);
  inline void set_bcat(int index, const ::std::string& value);
  inline void set_bcat(int index, const char* value);
  inline void set_bcat(int index, const char* value, size_t size);
  inline ::std::string* add_bcat();
  inline void add_bcat(const ::std::string& value);
  inline void add_bcat(const char* value);
  inline void add_bcat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bcat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bcat();

  // repeated string badv = 13;
  inline int badv_size() const;
  inline void clear_badv();
  static const int kBadvFieldNumber = 13;
  inline const ::std::string& badv(int index) const;
  inline ::std::string* mutable_badv(int index);
  inline void set_badv(int index, const ::std::string& value);
  inline void set_badv(int index, const char* value);
  inline void set_badv(int index, const char* value, size_t size);
  inline ::std::string* add_badv();
  inline void add_badv(const ::std::string& value);
  inline void add_badv(const char* value);
  inline void add_badv(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& badv() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_badv();

  // optional bool test = 15 [default = false];
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 15;
  inline bool test() const;
  inline void set_test(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest)
  inline DistributionchannelOneofCase distributionchannel_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_site();
  inline void set_has_app();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_regs();
  inline void clear_has_regs();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_at();
  inline void clear_has_at();
  inline void set_has_tmax();
  inline void clear_has_tmax();
  inline void set_has_allimps();
  inline void clear_has_allimps();
  inline void set_has_test();
  inline void clear_has_test();

  inline bool has_distributionchannel_oneof();
  void clear_distributionchannel_oneof();
  inline void clear_has_distributionchannel_oneof();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp > imp_;
  ::com::google::openrtb::BidRequest_Device* device_;
  ::com::google::openrtb::BidRequest_Regs* regs_;
  ::com::google::openrtb::BidRequest_User* user_;
  int at_;
  ::google::protobuf::int32 tmax_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wseat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cur_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bcat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> badv_;
  bool allimps_;
  bool test_;
  union DistributionchannelOneofUnion {
    ::com::google::openrtb::BidRequest_Site* site_;
    ::com::google::openrtb::BidRequest_App* app_;
  } distributionchannel_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid_Bid();
  virtual ~BidResponse_SeatBid_Bid();

  BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from);

  inline BidResponse_SeatBid_Bid& operator=(const BidResponse_SeatBid_Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid& default_instance();

  enum AdmOneofCase {
    kAdm = 6,
    kAdmNative = 50,
    ADM_ONEOF_NOT_SET = 0,
  };

  void Swap(BidResponse_SeatBid_Bid* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid_Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid& from);
  void MergeFrom(const BidResponse_SeatBid_Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string impid = 2;
  inline bool has_impid() const;
  inline void clear_impid();
  static const int kImpidFieldNumber = 2;
  inline const ::std::string& impid() const;
  inline void set_impid(const ::std::string& value);
  inline void set_impid(const char* value);
  inline void set_impid(const char* value, size_t size);
  inline ::std::string* mutable_impid();
  inline ::std::string* release_impid();
  inline void set_allocated_impid(::std::string* impid);

  // required double price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline double price() const;
  inline void set_price(double value);

  // optional string adid = 4;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 4;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // optional string nurl = 5;
  inline bool has_nurl() const;
  inline void clear_nurl();
  static const int kNurlFieldNumber = 5;
  inline const ::std::string& nurl() const;
  inline void set_nurl(const ::std::string& value);
  inline void set_nurl(const char* value);
  inline void set_nurl(const char* value, size_t size);
  inline ::std::string* mutable_nurl();
  inline ::std::string* release_nurl();
  inline void set_allocated_nurl(::std::string* nurl);

  // optional string adm = 6;
  inline bool has_adm() const;
  inline void clear_adm();
  static const int kAdmFieldNumber = 6;
  inline const ::std::string& adm() const;
  inline void set_adm(const ::std::string& value);
  inline void set_adm(const char* value);
  inline void set_adm(const char* value, size_t size);
  inline ::std::string* mutable_adm();
  inline ::std::string* release_adm();
  inline void set_allocated_adm(::std::string* adm);

  // optional .com.google.openrtb.NativeResponse adm_native = 50;
  inline bool has_adm_native() const;
  inline void clear_adm_native();
  static const int kAdmNativeFieldNumber = 50;
  inline const ::com::google::openrtb::NativeResponse& adm_native() const;
  inline ::com::google::openrtb::NativeResponse* mutable_adm_native();
  inline ::com::google::openrtb::NativeResponse* release_adm_native();
  inline void set_allocated_adm_native(::com::google::openrtb::NativeResponse* adm_native);

  // repeated string adomain = 7;
  inline int adomain_size() const;
  inline void clear_adomain();
  static const int kAdomainFieldNumber = 7;
  inline const ::std::string& adomain(int index) const;
  inline ::std::string* mutable_adomain(int index);
  inline void set_adomain(int index, const ::std::string& value);
  inline void set_adomain(int index, const char* value);
  inline void set_adomain(int index, const char* value, size_t size);
  inline ::std::string* add_adomain();
  inline void add_adomain(const ::std::string& value);
  inline void add_adomain(const char* value);
  inline void add_adomain(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& adomain() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_adomain();

  // optional string bundle = 14;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 14;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional string iurl = 8;
  inline bool has_iurl() const;
  inline void clear_iurl();
  static const int kIurlFieldNumber = 8;
  inline const ::std::string& iurl() const;
  inline void set_iurl(const ::std::string& value);
  inline void set_iurl(const char* value);
  inline void set_iurl(const char* value, size_t size);
  inline ::std::string* mutable_iurl();
  inline ::std::string* release_iurl();
  inline void set_allocated_iurl(::std::string* iurl);

  // optional string cid = 9;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 9;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // optional string crid = 10;
  inline bool has_crid() const;
  inline void clear_crid();
  static const int kCridFieldNumber = 10;
  inline const ::std::string& crid() const;
  inline void set_crid(const ::std::string& value);
  inline void set_crid(const char* value);
  inline void set_crid(const char* value, size_t size);
  inline ::std::string* mutable_crid();
  inline ::std::string* release_crid();
  inline void set_allocated_crid(::std::string* crid);

  // repeated string cat = 15;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 15;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 11;
  inline ::com::google::openrtb::CreativeAttribute attr(int index) const;
  inline void set_attr(int index, ::com::google::openrtb::CreativeAttribute value);
  inline void add_attr(::com::google::openrtb::CreativeAttribute value);
  inline const ::google::protobuf::RepeatedField<int>& attr() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_attr();

  // optional string dealid = 13;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealidFieldNumber = 13;
  inline const ::std::string& dealid() const;
  inline void set_dealid(const ::std::string& value);
  inline void set_dealid(const char* value);
  inline void set_dealid(const char* value, size_t size);
  inline ::std::string* mutable_dealid();
  inline ::std::string* release_dealid();
  inline void set_allocated_dealid(::std::string* dealid);

  // optional int32 w = 16;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 16;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 17;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 17;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse_SeatBid_Bid)
  inline AdmOneofCase adm_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidResponse.SeatBid.Bid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_nurl();
  inline void clear_has_nurl();
  inline void set_has_adm();
  inline void set_has_adm_native();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_iurl();
  inline void clear_has_iurl();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_crid();
  inline void clear_has_crid();
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  inline bool has_adm_oneof();
  void clear_adm_oneof();
  inline void clear_has_adm_oneof();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* impid_;
  double price_;
  ::std::string* adid_;
  ::std::string* nurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> adomain_;
  ::std::string* bundle_;
  ::std::string* iurl_;
  ::std::string* cid_;
  ::std::string* crid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::google::protobuf::RepeatedField<int> attr_;
  mutable int _attr_cached_byte_size_;
  ::std::string* dealid_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  union AdmOneofUnion {
    ::std::string* adm_;
    ::com::google::openrtb::NativeResponse* adm_native_;
  } adm_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid();
  virtual ~BidResponse_SeatBid();

  BidResponse_SeatBid(const BidResponse_SeatBid& from);

  inline BidResponse_SeatBid& operator=(const BidResponse_SeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid& default_instance();

  void Swap(BidResponse_SeatBid* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid& from);
  void MergeFrom(const BidResponse_SeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid Bid;

  // accessors -------------------------------------------------------

  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::com::google::openrtb::BidResponse_SeatBid_Bid& bid(int index) const;
  inline ::com::google::openrtb::BidResponse_SeatBid_Bid* mutable_bid(int index);
  inline ::com::google::openrtb::BidResponse_SeatBid_Bid* add_bid();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >&
      bid() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >*
      mutable_bid();

  // optional string seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline const ::std::string& seat() const;
  inline void set_seat(const ::std::string& value);
  inline void set_seat(const char* value);
  inline void set_seat(const char* value, size_t size);
  inline ::std::string* mutable_seat();
  inline ::std::string* release_seat();
  inline void set_allocated_seat(::std::string* seat);

  // optional bool group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline bool group() const;
  inline void set_group(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse_SeatBid)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidResponse.SeatBid)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid > bid_;
  ::std::string* seat_;
  bool group_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid SeatBid;

  typedef BidResponse_NoBidReason NoBidReason;
  static const NoBidReason UNKNOWN_ERROR = BidResponse_NoBidReason_UNKNOWN_ERROR;
  static const NoBidReason TECHNICAL_ERROR = BidResponse_NoBidReason_TECHNICAL_ERROR;
  static const NoBidReason INVALID_REQUEST = BidResponse_NoBidReason_INVALID_REQUEST;
  static const NoBidReason KNOWN_WEB_SPIDER = BidResponse_NoBidReason_KNOWN_WEB_SPIDER;
  static const NoBidReason SUSPECTED_NONHUMAN_TRAFFIC = BidResponse_NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC;
  static const NoBidReason CLOUD_DATACENTER_PROXYIP = BidResponse_NoBidReason_CLOUD_DATACENTER_PROXYIP;
  static const NoBidReason UNSUPPORTED_DEVICE = BidResponse_NoBidReason_UNSUPPORTED_DEVICE;
  static const NoBidReason BLOCKED_PUBLISHER = BidResponse_NoBidReason_BLOCKED_PUBLISHER;
  static const NoBidReason UNMATCHED_USER = BidResponse_NoBidReason_UNMATCHED_USER;
  static inline bool NoBidReason_IsValid(int value) {
    return BidResponse_NoBidReason_IsValid(value);
  }
  static const NoBidReason NoBidReason_MIN =
    BidResponse_NoBidReason_NoBidReason_MIN;
  static const NoBidReason NoBidReason_MAX =
    BidResponse_NoBidReason_NoBidReason_MAX;
  static const int NoBidReason_ARRAYSIZE =
    BidResponse_NoBidReason_NoBidReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoBidReason_descriptor() {
    return BidResponse_NoBidReason_descriptor();
  }
  static inline const ::std::string& NoBidReason_Name(NoBidReason value) {
    return BidResponse_NoBidReason_Name(value);
  }
  static inline bool NoBidReason_Parse(const ::std::string& name,
      NoBidReason* value) {
    return BidResponse_NoBidReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  inline int seatbid_size() const;
  inline void clear_seatbid();
  static const int kSeatbidFieldNumber = 2;
  inline const ::com::google::openrtb::BidResponse_SeatBid& seatbid(int index) const;
  inline ::com::google::openrtb::BidResponse_SeatBid* mutable_seatbid(int index);
  inline ::com::google::openrtb::BidResponse_SeatBid* add_seatbid();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >&
      seatbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >*
      mutable_seatbid();

  // optional string bidid = 3;
  inline bool has_bidid() const;
  inline void clear_bidid();
  static const int kBididFieldNumber = 3;
  inline const ::std::string& bidid() const;
  inline void set_bidid(const ::std::string& value);
  inline void set_bidid(const char* value);
  inline void set_bidid(const char* value, size_t size);
  inline ::std::string* mutable_bidid();
  inline ::std::string* release_bidid();
  inline void set_allocated_bidid(::std::string* bidid);

  // optional string cur = 4;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 4;
  inline const ::std::string& cur() const;
  inline void set_cur(const ::std::string& value);
  inline void set_cur(const char* value);
  inline void set_cur(const char* value, size_t size);
  inline ::std::string* mutable_cur();
  inline ::std::string* release_cur();
  inline void set_allocated_cur(::std::string* cur);

  // optional string customdata = 5;
  inline bool has_customdata() const;
  inline void clear_customdata();
  static const int kCustomdataFieldNumber = 5;
  inline const ::std::string& customdata() const;
  inline void set_customdata(const ::std::string& value);
  inline void set_customdata(const char* value);
  inline void set_customdata(const char* value, size_t size);
  inline ::std::string* mutable_customdata();
  inline ::std::string* release_customdata();
  inline void set_allocated_customdata(::std::string* customdata);

  // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
  inline bool has_nbr() const;
  inline void clear_nbr();
  static const int kNbrFieldNumber = 6;
  inline ::com::google::openrtb::BidResponse_NoBidReason nbr() const;
  inline void set_nbr(::com::google::openrtb::BidResponse_NoBidReason value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.BidResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidid();
  inline void clear_has_bidid();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_customdata();
  inline void clear_has_customdata();
  inline void set_has_nbr();
  inline void clear_has_nbr();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid > seatbid_;
  ::std::string* bidid_;
  ::std::string* cur_;
  ::std::string* customdata_;
  int nbr_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// -------------------------------------------------------------------

class NativeRequest_Asset_Title : public ::google::protobuf::Message {
 public:
  NativeRequest_Asset_Title();
  virtual ~NativeRequest_Asset_Title();

  NativeRequest_Asset_Title(const NativeRequest_Asset_Title& from);

  inline NativeRequest_Asset_Title& operator=(const NativeRequest_Asset_Title& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeRequest_Asset_Title& default_instance();

  void Swap(NativeRequest_Asset_Title* other);

  // implements Message ----------------------------------------------

  NativeRequest_Asset_Title* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeRequest_Asset_Title& from);
  void MergeFrom(const NativeRequest_Asset_Title& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 len = 1;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 1;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeRequest_Asset_Title)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeRequest.Asset.Title)
 private:
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 len_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeRequest_Asset_Title* default_instance_;
};
// -------------------------------------------------------------------

class NativeRequest_Asset_Image : public ::google::protobuf::Message {
 public:
  NativeRequest_Asset_Image();
  virtual ~NativeRequest_Asset_Image();

  NativeRequest_Asset_Image(const NativeRequest_Asset_Image& from);

  inline NativeRequest_Asset_Image& operator=(const NativeRequest_Asset_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeRequest_Asset_Image& default_instance();

  void Swap(NativeRequest_Asset_Image* other);

  // implements Message ----------------------------------------------

  NativeRequest_Asset_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeRequest_Asset_Image& from);
  void MergeFrom(const NativeRequest_Asset_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeRequest_Asset_Image_ImageAssetType ImageAssetType;
  static const ImageAssetType ICON = NativeRequest_Asset_Image_ImageAssetType_ICON;
  static const ImageAssetType LOGO = NativeRequest_Asset_Image_ImageAssetType_LOGO;
  static const ImageAssetType MAIN = NativeRequest_Asset_Image_ImageAssetType_MAIN;
  static inline bool ImageAssetType_IsValid(int value) {
    return NativeRequest_Asset_Image_ImageAssetType_IsValid(value);
  }
  static const ImageAssetType ImageAssetType_MIN =
    NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_MIN;
  static const ImageAssetType ImageAssetType_MAX =
    NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_MAX;
  static const int ImageAssetType_ARRAYSIZE =
    NativeRequest_Asset_Image_ImageAssetType_ImageAssetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ImageAssetType_descriptor() {
    return NativeRequest_Asset_Image_ImageAssetType_descriptor();
  }
  static inline const ::std::string& ImageAssetType_Name(ImageAssetType value) {
    return NativeRequest_Asset_Image_ImageAssetType_Name(value);
  }
  static inline bool ImageAssetType_Parse(const ::std::string& name,
      ImageAssetType* value) {
    return NativeRequest_Asset_Image_ImageAssetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType type() const;
  inline void set_type(::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType value);

  // optional int32 w = 2;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 2;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 3;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 3;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 wmin = 4;
  inline bool has_wmin() const;
  inline void clear_wmin();
  static const int kWminFieldNumber = 4;
  inline ::google::protobuf::int32 wmin() const;
  inline void set_wmin(::google::protobuf::int32 value);

  // optional int32 hmin = 5;
  inline bool has_hmin() const;
  inline void clear_hmin();
  static const int kHminFieldNumber = 5;
  inline ::google::protobuf::int32 hmin() const;
  inline void set_hmin(::google::protobuf::int32 value);

  // repeated string mimes = 6;
  inline int mimes_size() const;
  inline void clear_mimes();
  static const int kMimesFieldNumber = 6;
  inline const ::std::string& mimes(int index) const;
  inline ::std::string* mutable_mimes(int index);
  inline void set_mimes(int index, const ::std::string& value);
  inline void set_mimes(int index, const char* value);
  inline void set_mimes(int index, const char* value, size_t size);
  inline ::std::string* add_mimes();
  inline void add_mimes(const ::std::string& value);
  inline void add_mimes(const char* value);
  inline void add_mimes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mimes();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeRequest_Asset_Image)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeRequest.Asset.Image)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_wmin();
  inline void clear_has_wmin();
  inline void set_has_hmin();
  inline void clear_has_hmin();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 wmin_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mimes_;
  ::google::protobuf::int32 hmin_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeRequest_Asset_Image* default_instance_;
};
// -------------------------------------------------------------------

class NativeRequest_Asset_Data : public ::google::protobuf::Message {
 public:
  NativeRequest_Asset_Data();
  virtual ~NativeRequest_Asset_Data();

  NativeRequest_Asset_Data(const NativeRequest_Asset_Data& from);

  inline NativeRequest_Asset_Data& operator=(const NativeRequest_Asset_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeRequest_Asset_Data& default_instance();

  void Swap(NativeRequest_Asset_Data* other);

  // implements Message ----------------------------------------------

  NativeRequest_Asset_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeRequest_Asset_Data& from);
  void MergeFrom(const NativeRequest_Asset_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeRequest_Asset_Data_DataAssetType DataAssetType;
  static const DataAssetType SPONSORED = NativeRequest_Asset_Data_DataAssetType_SPONSORED;
  static const DataAssetType DESC = NativeRequest_Asset_Data_DataAssetType_DESC;
  static const DataAssetType RATING = NativeRequest_Asset_Data_DataAssetType_RATING;
  static const DataAssetType LIKES = NativeRequest_Asset_Data_DataAssetType_LIKES;
  static const DataAssetType DOWNLOADS = NativeRequest_Asset_Data_DataAssetType_DOWNLOADS;
  static const DataAssetType PRICE = NativeRequest_Asset_Data_DataAssetType_PRICE;
  static const DataAssetType SALEPRICE = NativeRequest_Asset_Data_DataAssetType_SALEPRICE;
  static const DataAssetType PHONE = NativeRequest_Asset_Data_DataAssetType_PHONE;
  static const DataAssetType ADDRESS = NativeRequest_Asset_Data_DataAssetType_ADDRESS;
  static const DataAssetType DESC2 = NativeRequest_Asset_Data_DataAssetType_DESC2;
  static const DataAssetType DISPLAYURL = NativeRequest_Asset_Data_DataAssetType_DISPLAYURL;
  static const DataAssetType CTATEXT = NativeRequest_Asset_Data_DataAssetType_CTATEXT;
  static inline bool DataAssetType_IsValid(int value) {
    return NativeRequest_Asset_Data_DataAssetType_IsValid(value);
  }
  static const DataAssetType DataAssetType_MIN =
    NativeRequest_Asset_Data_DataAssetType_DataAssetType_MIN;
  static const DataAssetType DataAssetType_MAX =
    NativeRequest_Asset_Data_DataAssetType_DataAssetType_MAX;
  static const int DataAssetType_ARRAYSIZE =
    NativeRequest_Asset_Data_DataAssetType_DataAssetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataAssetType_descriptor() {
    return NativeRequest_Asset_Data_DataAssetType_descriptor();
  }
  static inline const ::std::string& DataAssetType_Name(DataAssetType value) {
    return NativeRequest_Asset_Data_DataAssetType_Name(value);
  }
  static inline bool DataAssetType_Parse(const ::std::string& name,
      DataAssetType* value) {
    return NativeRequest_Asset_Data_DataAssetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType type() const;
  inline void set_type(::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType value);

  // optional int32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeRequest_Asset_Data)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeRequest.Asset.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 len_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeRequest_Asset_Data* default_instance_;
};
// -------------------------------------------------------------------

class NativeRequest_Asset : public ::google::protobuf::Message {
 public:
  NativeRequest_Asset();
  virtual ~NativeRequest_Asset();

  NativeRequest_Asset(const NativeRequest_Asset& from);

  inline NativeRequest_Asset& operator=(const NativeRequest_Asset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeRequest_Asset& default_instance();

  enum AssetOneofCase {
    kTitle = 3,
    kImg = 4,
    kVideo = 5,
    kData = 6,
    ASSET_ONEOF_NOT_SET = 0,
  };

  void Swap(NativeRequest_Asset* other);

  // implements Message ----------------------------------------------

  NativeRequest_Asset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeRequest_Asset& from);
  void MergeFrom(const NativeRequest_Asset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeRequest_Asset_Title Title;
  typedef NativeRequest_Asset_Image Image;
  typedef NativeRequest_Asset_Data Data;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool required = 2 [default = false];
  inline bool has_required() const;
  inline void clear_required();
  static const int kRequiredFieldNumber = 2;
  inline bool required() const;
  inline void set_required(bool value);

  // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::com::google::openrtb::NativeRequest_Asset_Title& title() const;
  inline ::com::google::openrtb::NativeRequest_Asset_Title* mutable_title();
  inline ::com::google::openrtb::NativeRequest_Asset_Title* release_title();
  inline void set_allocated_title(::com::google::openrtb::NativeRequest_Asset_Title* title);

  // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
  inline bool has_img() const;
  inline void clear_img();
  static const int kImgFieldNumber = 4;
  inline const ::com::google::openrtb::NativeRequest_Asset_Image& img() const;
  inline ::com::google::openrtb::NativeRequest_Asset_Image* mutable_img();
  inline ::com::google::openrtb::NativeRequest_Asset_Image* release_img();
  inline void set_allocated_img(::com::google::openrtb::NativeRequest_Asset_Image* img);

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 5;
  inline const ::com::google::openrtb::BidRequest_Imp_Video& video() const;
  inline ::com::google::openrtb::BidRequest_Imp_Video* mutable_video();
  inline ::com::google::openrtb::BidRequest_Imp_Video* release_video();
  inline void set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video);

  // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::com::google::openrtb::NativeRequest_Asset_Data& data() const;
  inline ::com::google::openrtb::NativeRequest_Asset_Data* mutable_data();
  inline ::com::google::openrtb::NativeRequest_Asset_Data* release_data();
  inline void set_allocated_data(::com::google::openrtb::NativeRequest_Asset_Data* data);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeRequest_Asset)
  inline AssetOneofCase asset_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeRequest.Asset)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_required();
  inline void clear_has_required();
  inline void set_has_title();
  inline void set_has_img();
  inline void set_has_video();
  inline void set_has_data();

  inline bool has_asset_oneof();
  void clear_asset_oneof();
  inline void clear_has_asset_oneof();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool required_;
  union AssetOneofUnion {
    ::com::google::openrtb::NativeRequest_Asset_Title* title_;
    ::com::google::openrtb::NativeRequest_Asset_Image* img_;
    ::com::google::openrtb::BidRequest_Imp_Video* video_;
    ::com::google::openrtb::NativeRequest_Asset_Data* data_;
  } asset_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeRequest_Asset* default_instance_;
};
// -------------------------------------------------------------------

class NativeRequest : public ::google::protobuf::Message {
 public:
  NativeRequest();
  virtual ~NativeRequest();

  NativeRequest(const NativeRequest& from);

  inline NativeRequest& operator=(const NativeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeRequest& default_instance();

  void Swap(NativeRequest* other);

  // implements Message ----------------------------------------------

  NativeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeRequest& from);
  void MergeFrom(const NativeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeRequest_Asset Asset;

  typedef NativeRequest_LayoutId LayoutId;
  static const LayoutId CONTENT_WALL = NativeRequest_LayoutId_CONTENT_WALL;
  static const LayoutId APP_WALL = NativeRequest_LayoutId_APP_WALL;
  static const LayoutId NEWS_FEED = NativeRequest_LayoutId_NEWS_FEED;
  static const LayoutId CHAT_LIST = NativeRequest_LayoutId_CHAT_LIST;
  static const LayoutId CAROUSEL = NativeRequest_LayoutId_CAROUSEL;
  static const LayoutId CONTENT_STREAM = NativeRequest_LayoutId_CONTENT_STREAM;
  static const LayoutId GRID = NativeRequest_LayoutId_GRID;
  static inline bool LayoutId_IsValid(int value) {
    return NativeRequest_LayoutId_IsValid(value);
  }
  static const LayoutId LayoutId_MIN =
    NativeRequest_LayoutId_LayoutId_MIN;
  static const LayoutId LayoutId_MAX =
    NativeRequest_LayoutId_LayoutId_MAX;
  static const int LayoutId_ARRAYSIZE =
    NativeRequest_LayoutId_LayoutId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayoutId_descriptor() {
    return NativeRequest_LayoutId_descriptor();
  }
  static inline const ::std::string& LayoutId_Name(LayoutId value) {
    return NativeRequest_LayoutId_Name(value);
  }
  static inline bool LayoutId_Parse(const ::std::string& name,
      LayoutId* value) {
    return NativeRequest_LayoutId_Parse(name, value);
  }

  typedef NativeRequest_AdUnitId AdUnitId;
  static const AdUnitId PAID_SEARCH_UNIT = NativeRequest_AdUnitId_PAID_SEARCH_UNIT;
  static const AdUnitId RECOMMENDATION_WIDGET = NativeRequest_AdUnitId_RECOMMENDATION_WIDGET;
  static const AdUnitId PROMOTED_LISTING = NativeRequest_AdUnitId_PROMOTED_LISTING;
  static const AdUnitId IAB_IN_AD_NATIVE = NativeRequest_AdUnitId_IAB_IN_AD_NATIVE;
  static const AdUnitId CUSTOM = NativeRequest_AdUnitId_CUSTOM;
  static inline bool AdUnitId_IsValid(int value) {
    return NativeRequest_AdUnitId_IsValid(value);
  }
  static const AdUnitId AdUnitId_MIN =
    NativeRequest_AdUnitId_AdUnitId_MIN;
  static const AdUnitId AdUnitId_MAX =
    NativeRequest_AdUnitId_AdUnitId_MAX;
  static const int AdUnitId_ARRAYSIZE =
    NativeRequest_AdUnitId_AdUnitId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdUnitId_descriptor() {
    return NativeRequest_AdUnitId_descriptor();
  }
  static inline const ::std::string& AdUnitId_Name(AdUnitId value) {
    return NativeRequest_AdUnitId_Name(value);
  }
  static inline bool AdUnitId_Parse(const ::std::string& name,
      AdUnitId* value) {
    return NativeRequest_AdUnitId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 2;
  inline ::com::google::openrtb::NativeRequest_LayoutId layout() const;
  inline void set_layout(::com::google::openrtb::NativeRequest_LayoutId value);

  // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
  inline bool has_adunit() const;
  inline void clear_adunit();
  static const int kAdunitFieldNumber = 3;
  inline ::com::google::openrtb::NativeRequest_AdUnitId adunit() const;
  inline void set_adunit(::com::google::openrtb::NativeRequest_AdUnitId value);

  // optional int32 plcmtcnt = 4 [default = 1];
  inline bool has_plcmtcnt() const;
  inline void clear_plcmtcnt();
  static const int kPlcmtcntFieldNumber = 4;
  inline ::google::protobuf::int32 plcmtcnt() const;
  inline void set_plcmtcnt(::google::protobuf::int32 value);

  // optional int32 seq = 5 [default = 0];
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 5;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  inline int assets_size() const;
  inline void clear_assets();
  static const int kAssetsFieldNumber = 6;
  inline const ::com::google::openrtb::NativeRequest_Asset& assets(int index) const;
  inline ::com::google::openrtb::NativeRequest_Asset* mutable_assets(int index);
  inline ::com::google::openrtb::NativeRequest_Asset* add_assets();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >&
      assets() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >*
      mutable_assets();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeRequest)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeRequest)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_layout();
  inline void clear_has_layout();
  inline void set_has_adunit();
  inline void clear_has_adunit();
  inline void set_has_plcmtcnt();
  inline void clear_has_plcmtcnt();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ver_;
  int layout_;
  int adunit_;
  ::google::protobuf::int32 plcmtcnt_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset > assets_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeRequest* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Link : public ::google::protobuf::Message {
 public:
  NativeResponse_Link();
  virtual ~NativeResponse_Link();

  NativeResponse_Link(const NativeResponse_Link& from);

  inline NativeResponse_Link& operator=(const NativeResponse_Link& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Link& default_instance();

  void Swap(NativeResponse_Link* other);

  // implements Message ----------------------------------------------

  NativeResponse_Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Link& from);
  void MergeFrom(const NativeResponse_Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // repeated string clicktrackers = 2;
  inline int clicktrackers_size() const;
  inline void clear_clicktrackers();
  static const int kClicktrackersFieldNumber = 2;
  inline const ::std::string& clicktrackers(int index) const;
  inline ::std::string* mutable_clicktrackers(int index);
  inline void set_clicktrackers(int index, const ::std::string& value);
  inline void set_clicktrackers(int index, const char* value);
  inline void set_clicktrackers(int index, const char* value, size_t size);
  inline ::std::string* add_clicktrackers();
  inline void add_clicktrackers(const ::std::string& value);
  inline void add_clicktrackers(const char* value);
  inline void add_clicktrackers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& clicktrackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clicktrackers();

  // optional string fallback = 3;
  inline bool has_fallback() const;
  inline void clear_fallback();
  static const int kFallbackFieldNumber = 3;
  inline const ::std::string& fallback() const;
  inline void set_fallback(const ::std::string& value);
  inline void set_fallback(const char* value);
  inline void set_fallback(const char* value, size_t size);
  inline ::std::string* mutable_fallback();
  inline ::std::string* release_fallback();
  inline void set_allocated_fallback(::std::string* fallback);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Link)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Link)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_fallback();
  inline void clear_has_fallback();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clicktrackers_;
  ::std::string* fallback_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Link* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Asset_Title : public ::google::protobuf::Message {
 public:
  NativeResponse_Asset_Title();
  virtual ~NativeResponse_Asset_Title();

  NativeResponse_Asset_Title(const NativeResponse_Asset_Title& from);

  inline NativeResponse_Asset_Title& operator=(const NativeResponse_Asset_Title& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Asset_Title& default_instance();

  void Swap(NativeResponse_Asset_Title* other);

  // implements Message ----------------------------------------------

  NativeResponse_Asset_Title* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Asset_Title& from);
  void MergeFrom(const NativeResponse_Asset_Title& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Asset_Title)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Asset.Title)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Asset_Title* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Asset_Image : public ::google::protobuf::Message {
 public:
  NativeResponse_Asset_Image();
  virtual ~NativeResponse_Asset_Image();

  NativeResponse_Asset_Image(const NativeResponse_Asset_Image& from);

  inline NativeResponse_Asset_Image& operator=(const NativeResponse_Asset_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Asset_Image& default_instance();

  void Swap(NativeResponse_Asset_Image* other);

  // implements Message ----------------------------------------------

  NativeResponse_Asset_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Asset_Image& from);
  void MergeFrom(const NativeResponse_Asset_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional int32 w = 2;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 2;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 3;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 3;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Asset_Image)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Asset.Image)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Asset_Image* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Asset_Data : public ::google::protobuf::Message {
 public:
  NativeResponse_Asset_Data();
  virtual ~NativeResponse_Asset_Data();

  NativeResponse_Asset_Data(const NativeResponse_Asset_Data& from);

  inline NativeResponse_Asset_Data& operator=(const NativeResponse_Asset_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Asset_Data& default_instance();

  void Swap(NativeResponse_Asset_Data* other);

  // implements Message ----------------------------------------------

  NativeResponse_Asset_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Asset_Data& from);
  void MergeFrom(const NativeResponse_Asset_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Asset_Data)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Asset.Data)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* label_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Asset_Data* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Asset_Video : public ::google::protobuf::Message {
 public:
  NativeResponse_Asset_Video();
  virtual ~NativeResponse_Asset_Video();

  NativeResponse_Asset_Video(const NativeResponse_Asset_Video& from);

  inline NativeResponse_Asset_Video& operator=(const NativeResponse_Asset_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Asset_Video& default_instance();

  void Swap(NativeResponse_Asset_Video* other);

  // implements Message ----------------------------------------------

  NativeResponse_Asset_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Asset_Video& from);
  void MergeFrom(const NativeResponse_Asset_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vasttag = 1;
  inline bool has_vasttag() const;
  inline void clear_vasttag();
  static const int kVasttagFieldNumber = 1;
  inline const ::std::string& vasttag() const;
  inline void set_vasttag(const ::std::string& value);
  inline void set_vasttag(const char* value);
  inline void set_vasttag(const char* value, size_t size);
  inline ::std::string* mutable_vasttag();
  inline ::std::string* release_vasttag();
  inline void set_allocated_vasttag(::std::string* vasttag);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Asset_Video)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Asset.Video)
 private:
  inline void set_has_vasttag();
  inline void clear_has_vasttag();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vasttag_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Asset_Video* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse_Asset : public ::google::protobuf::Message {
 public:
  NativeResponse_Asset();
  virtual ~NativeResponse_Asset();

  NativeResponse_Asset(const NativeResponse_Asset& from);

  inline NativeResponse_Asset& operator=(const NativeResponse_Asset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse_Asset& default_instance();

  enum AssetOneofCase {
    kTitle = 3,
    kImg = 4,
    kVideo = 5,
    kData = 6,
    ASSET_ONEOF_NOT_SET = 0,
  };

  void Swap(NativeResponse_Asset* other);

  // implements Message ----------------------------------------------

  NativeResponse_Asset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse_Asset& from);
  void MergeFrom(const NativeResponse_Asset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeResponse_Asset_Title Title;
  typedef NativeResponse_Asset_Image Image;
  typedef NativeResponse_Asset_Data Data;
  typedef NativeResponse_Asset_Video Video;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool required = 2 [default = false];
  inline bool has_required() const;
  inline void clear_required();
  static const int kRequiredFieldNumber = 2;
  inline bool required() const;
  inline void set_required(bool value);

  // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::com::google::openrtb::NativeResponse_Asset_Title& title() const;
  inline ::com::google::openrtb::NativeResponse_Asset_Title* mutable_title();
  inline ::com::google::openrtb::NativeResponse_Asset_Title* release_title();
  inline void set_allocated_title(::com::google::openrtb::NativeResponse_Asset_Title* title);

  // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
  inline bool has_img() const;
  inline void clear_img();
  static const int kImgFieldNumber = 4;
  inline const ::com::google::openrtb::NativeResponse_Asset_Image& img() const;
  inline ::com::google::openrtb::NativeResponse_Asset_Image* mutable_img();
  inline ::com::google::openrtb::NativeResponse_Asset_Image* release_img();
  inline void set_allocated_img(::com::google::openrtb::NativeResponse_Asset_Image* img);

  // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 5;
  inline const ::com::google::openrtb::NativeResponse_Asset_Video& video() const;
  inline ::com::google::openrtb::NativeResponse_Asset_Video* mutable_video();
  inline ::com::google::openrtb::NativeResponse_Asset_Video* release_video();
  inline void set_allocated_video(::com::google::openrtb::NativeResponse_Asset_Video* video);

  // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::com::google::openrtb::NativeResponse_Asset_Data& data() const;
  inline ::com::google::openrtb::NativeResponse_Asset_Data* mutable_data();
  inline ::com::google::openrtb::NativeResponse_Asset_Data* release_data();
  inline void set_allocated_data(::com::google::openrtb::NativeResponse_Asset_Data* data);

  // optional .com.google.openrtb.NativeResponse.Link link = 7;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 7;
  inline const ::com::google::openrtb::NativeResponse_Link& link() const;
  inline ::com::google::openrtb::NativeResponse_Link* mutable_link();
  inline ::com::google::openrtb::NativeResponse_Link* release_link();
  inline void set_allocated_link(::com::google::openrtb::NativeResponse_Link* link);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse_Asset)
  inline AssetOneofCase asset_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse.Asset)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_required();
  inline void clear_has_required();
  inline void set_has_title();
  inline void set_has_img();
  inline void set_has_video();
  inline void set_has_data();
  inline void set_has_link();
  inline void clear_has_link();

  inline bool has_asset_oneof();
  void clear_asset_oneof();
  inline void clear_has_asset_oneof();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool required_;
  ::com::google::openrtb::NativeResponse_Link* link_;
  union AssetOneofUnion {
    ::com::google::openrtb::NativeResponse_Asset_Title* title_;
    ::com::google::openrtb::NativeResponse_Asset_Image* img_;
    ::com::google::openrtb::NativeResponse_Asset_Video* video_;
    ::com::google::openrtb::NativeResponse_Asset_Data* data_;
  } asset_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse_Asset* default_instance_;
};
// -------------------------------------------------------------------

class NativeResponse : public ::google::protobuf::Message {
 public:
  NativeResponse();
  virtual ~NativeResponse();

  NativeResponse(const NativeResponse& from);

  inline NativeResponse& operator=(const NativeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NativeResponse& default_instance();

  void Swap(NativeResponse* other);

  // implements Message ----------------------------------------------

  NativeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NativeResponse& from);
  void MergeFrom(const NativeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NativeResponse_Link Link;
  typedef NativeResponse_Asset Asset;

  // accessors -------------------------------------------------------

  // optional string ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  inline int assets_size() const;
  inline void clear_assets();
  static const int kAssetsFieldNumber = 2;
  inline const ::com::google::openrtb::NativeResponse_Asset& assets(int index) const;
  inline ::com::google::openrtb::NativeResponse_Asset* mutable_assets(int index);
  inline ::com::google::openrtb::NativeResponse_Asset* add_assets();
  inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >&
      assets() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >*
      mutable_assets();

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 3;
  inline const ::com::google::openrtb::NativeResponse_Link& link() const;
  inline ::com::google::openrtb::NativeResponse_Link* mutable_link();
  inline ::com::google::openrtb::NativeResponse_Link* release_link();
  inline void set_allocated_link(::com::google::openrtb::NativeResponse_Link* link);

  // repeated string imptrackers = 4;
  inline int imptrackers_size() const;
  inline void clear_imptrackers();
  static const int kImptrackersFieldNumber = 4;
  inline const ::std::string& imptrackers(int index) const;
  inline ::std::string* mutable_imptrackers(int index);
  inline void set_imptrackers(int index, const ::std::string& value);
  inline void set_imptrackers(int index, const char* value);
  inline void set_imptrackers(int index, const char* value, size_t size);
  inline ::std::string* add_imptrackers();
  inline void add_imptrackers(const ::std::string& value);
  inline void add_imptrackers(const char* value);
  inline void add_imptrackers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& imptrackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imptrackers();

  // optional string jstracker = 5;
  inline bool has_jstracker() const;
  inline void clear_jstracker();
  static const int kJstrackerFieldNumber = 5;
  inline const ::std::string& jstracker() const;
  inline void set_jstracker(const ::std::string& value);
  inline void set_jstracker(const char* value);
  inline void set_jstracker(const char* value, size_t size);
  inline ::std::string* mutable_jstracker();
  inline ::std::string* release_jstracker();
  inline void set_allocated_jstracker(::std::string* jstracker);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NativeResponse)
  // @@protoc_insertion_point(class_scope:com.google.openrtb.NativeResponse)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_jstracker();
  inline void clear_has_jstracker();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ver_;
  ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset > assets_;
  ::com::google::openrtb::NativeResponse_Link* link_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imptrackers_;
  ::std::string* jstracker_;
  friend void  protobuf_AddDesc_openrtb_2eproto();
  friend void protobuf_AssignDesc_openrtb_2eproto();
  friend void protobuf_ShutdownFile_openrtb_2eproto();

  void InitAsDefaultInstance();
  static NativeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_Imp_Banner

// optional int32 w = 1;
inline bool BidRequest_Imp_Banner::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Banner::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Banner::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.w)
  return w_;
}
inline void BidRequest_Imp_Banner::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.w)
}

// optional int32 h = 2;
inline bool BidRequest_Imp_Banner::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Banner::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Banner::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.h)
  return h_;
}
inline void BidRequest_Imp_Banner::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.h)
}

// optional int32 wmax = 11;
inline bool BidRequest_Imp_Banner::has_wmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_wmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp_Banner::clear_has_wmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp_Banner::clear_wmax() {
  wmax_ = 0;
  clear_has_wmax();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::wmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.wmax)
  return wmax_;
}
inline void BidRequest_Imp_Banner::set_wmax(::google::protobuf::int32 value) {
  set_has_wmax();
  wmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.wmax)
}

// optional int32 hmax = 12;
inline bool BidRequest_Imp_Banner::has_hmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_hmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Imp_Banner::clear_has_hmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Imp_Banner::clear_hmax() {
  hmax_ = 0;
  clear_has_hmax();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::hmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.hmax)
  return hmax_;
}
inline void BidRequest_Imp_Banner::set_hmax(::google::protobuf::int32 value) {
  set_has_hmax();
  hmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.hmax)
}

// optional int32 wmin = 13;
inline bool BidRequest_Imp_Banner::has_wmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_wmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Imp_Banner::clear_has_wmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Imp_Banner::clear_wmin() {
  wmin_ = 0;
  clear_has_wmin();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::wmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.wmin)
  return wmin_;
}
inline void BidRequest_Imp_Banner::set_wmin(::google::protobuf::int32 value) {
  set_has_wmin();
  wmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.wmin)
}

// optional int32 hmin = 14;
inline bool BidRequest_Imp_Banner::has_hmin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_hmin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Imp_Banner::clear_has_hmin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Imp_Banner::clear_hmin() {
  hmin_ = 0;
  clear_has_hmin();
}
inline ::google::protobuf::int32 BidRequest_Imp_Banner::hmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.hmin)
  return hmin_;
}
inline void BidRequest_Imp_Banner::set_hmin(::google::protobuf::int32 value) {
  set_has_hmin();
  hmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.hmin)
}

// optional string id = 3;
inline bool BidRequest_Imp_Banner::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Imp_Banner::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Imp_Banner::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Imp_Banner::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.id)
  return *id_;
}
inline void BidRequest_Imp_Banner::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.id)
}
inline void BidRequest_Imp_Banner::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Banner.id)
}
inline void BidRequest_Imp_Banner::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Banner.id)
}
inline ::std::string* BidRequest_Imp_Banner::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Banner.id)
  return id_;
}
inline ::std::string* BidRequest_Imp_Banner::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp_Banner::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Banner.id)
}

// optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
inline bool BidRequest_Imp_Banner::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Imp_Banner::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Imp_Banner::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::com::google::openrtb::BidRequest_Imp_AdPosition BidRequest_Imp_Banner::pos() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.pos)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(pos_);
}
inline void BidRequest_Imp_Banner::set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value) {
  assert(::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.pos)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
inline int BidRequest_Imp_Banner::btype_size() const {
  return btype_.size();
}
inline void BidRequest_Imp_Banner::clear_btype() {
  btype_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::btype(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(btype_.Get(index));
}
inline void BidRequest_Imp_Banner::set_btype(int index, ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value));
  btype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.btype)
}
inline void BidRequest_Imp_Banner::add_btype(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value));
  btype_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.btype)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::btype() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return btype_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_btype() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return &btype_;
}

// repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
inline int BidRequest_Imp_Banner::battr_size() const {
  return battr_.size();
}
inline void BidRequest_Imp_Banner::clear_battr() {
  battr_.Clear();
}
inline ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Banner::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
inline void BidRequest_Imp_Banner::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.battr)
}
inline void BidRequest_Imp_Banner::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.battr)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return &battr_;
}

// repeated string mimes = 7;
inline int BidRequest_Imp_Banner::mimes_size() const {
  return mimes_.size();
}
inline void BidRequest_Imp_Banner::clear_mimes() {
  mimes_.Clear();
}
inline const ::std::string& BidRequest_Imp_Banner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_.Get(index);
}
inline ::std::string* BidRequest_Imp_Banner::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_.Mutable(index);
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  mimes_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
inline ::std::string* BidRequest_Imp_Banner::add_mimes() {
  return mimes_.Add();
}
inline void BidRequest_Imp_Banner::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Banner::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Banner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return &mimes_;
}

// optional bool topframe = 8;
inline bool BidRequest_Imp_Banner::has_topframe() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_topframe() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Imp_Banner::clear_has_topframe() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Imp_Banner::clear_topframe() {
  topframe_ = false;
  clear_has_topframe();
}
inline bool BidRequest_Imp_Banner::topframe() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.topframe)
  return topframe_;
}
inline void BidRequest_Imp_Banner::set_topframe(bool value) {
  set_has_topframe();
  topframe_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.topframe)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
inline int BidRequest_Imp_Banner::expdir_size() const {
  return expdir_.size();
}
inline void BidRequest_Imp_Banner::clear_expdir() {
  expdir_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::expdir(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(expdir_.Get(index));
}
inline void BidRequest_Imp_Banner::set_expdir(int index, ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value));
  expdir_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.expdir)
}
inline void BidRequest_Imp_Banner::add_expdir(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value));
  expdir_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.expdir)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::expdir() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return expdir_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_expdir() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return &expdir_;
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
inline int BidRequest_Imp_Banner::api_size() const {
  return api_.size();
}
inline void BidRequest_Imp_Banner::clear_api() {
  api_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Banner::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
inline void BidRequest_Imp_Banner::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.api)
}
inline void BidRequest_Imp_Banner::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.api)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.api)
  return api_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.api)
  return &api_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Video_CompanionAd

// repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
inline int BidRequest_Imp_Video_CompanionAd::banner_size() const {
  return banner_.size();
}
inline void BidRequest_Imp_Video_CompanionAd::clear_banner() {
  banner_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp_Video_CompanionAd::banner(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video_CompanionAd::mutable_banner(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video_CompanionAd::add_banner() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
BidRequest_Imp_Video_CompanionAd::banner() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
BidRequest_Imp_Video_CompanionAd::mutable_banner() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return &banner_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Video

// repeated string mimes = 1;
inline int BidRequest_Imp_Video::mimes_size() const {
  return mimes_.size();
}
inline void BidRequest_Imp_Video::clear_mimes() {
  mimes_.Clear();
}
inline const ::std::string& BidRequest_Imp_Video::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_.Get(index);
}
inline ::std::string* BidRequest_Imp_Video::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_.Mutable(index);
}
inline void BidRequest_Imp_Video::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.mimes)
  mimes_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Video::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
inline void BidRequest_Imp_Video::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
inline ::std::string* BidRequest_Imp_Video::add_mimes() {
  return mimes_.Add();
}
inline void BidRequest_Imp_Video::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
inline void BidRequest_Imp_Video::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
inline void BidRequest_Imp_Video::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Video::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Video::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return &mimes_;
}

// optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
inline bool BidRequest_Imp_Video::has_linearity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Video::set_has_linearity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Video::clear_has_linearity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Video::clear_linearity() {
  linearity_ = 1;
  clear_has_linearity();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::linearity() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.linearity)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity >(linearity_);
}
inline void BidRequest_Imp_Video::set_linearity(::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity_IsValid(value));
  set_has_linearity();
  linearity_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.linearity)
}

// optional int32 minduration = 3;
inline bool BidRequest_Imp_Video::has_minduration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp_Video::set_has_minduration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp_Video::clear_has_minduration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp_Video::clear_minduration() {
  minduration_ = 0;
  clear_has_minduration();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::minduration() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.minduration)
  return minduration_;
}
inline void BidRequest_Imp_Video::set_minduration(::google::protobuf::int32 value) {
  set_has_minduration();
  minduration_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.minduration)
}

// optional int32 maxduration = 4;
inline bool BidRequest_Imp_Video::has_maxduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Imp_Video::set_has_maxduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Imp_Video::clear_has_maxduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Imp_Video::clear_maxduration() {
  maxduration_ = 0;
  clear_has_maxduration();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::maxduration() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxduration)
  return maxduration_;
}
inline void BidRequest_Imp_Video::set_maxduration(::google::protobuf::int32 value) {
  set_has_maxduration();
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxduration)
}

// optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
inline bool BidRequest_Imp_Video::has_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Imp_Video::set_has_protocol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Imp_Video::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Imp_Video::clear_protocol() {
  protocol_ = 1;
  clear_has_protocol();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::protocol() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.protocol)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(protocol_);
}
inline void BidRequest_Imp_Video::set_protocol(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.protocol)
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
inline int BidRequest_Imp_Video::protocols_size() const {
  return protocols_.size();
}
inline void BidRequest_Imp_Video::clear_protocols() {
  protocols_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::protocols(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(protocols_.Get(index));
}
inline void BidRequest_Imp_Video::set_protocols(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  protocols_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.protocols)
}
inline void BidRequest_Imp_Video::add_protocols(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  protocols_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.protocols)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::protocols() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return protocols_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return &protocols_;
}

// optional int32 w = 6;
inline bool BidRequest_Imp_Video::has_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Imp_Video::set_has_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Imp_Video::clear_has_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Imp_Video::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.w)
  return w_;
}
inline void BidRequest_Imp_Video::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.w)
}

// optional int32 h = 7;
inline bool BidRequest_Imp_Video::has_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Imp_Video::set_has_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Imp_Video::clear_has_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Imp_Video::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.h)
  return h_;
}
inline void BidRequest_Imp_Video::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.h)
}

// optional int32 startdelay = 8;
inline bool BidRequest_Imp_Video::has_startdelay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Imp_Video::set_has_startdelay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Imp_Video::clear_has_startdelay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Imp_Video::clear_startdelay() {
  startdelay_ = 0;
  clear_has_startdelay();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::startdelay() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.startdelay)
  return startdelay_;
}
inline void BidRequest_Imp_Video::set_startdelay(::google::protobuf::int32 value) {
  set_has_startdelay();
  startdelay_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.startdelay)
}

// optional int32 sequence = 9 [default = 1];
inline bool BidRequest_Imp_Video::has_sequence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Imp_Video::set_has_sequence() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Imp_Video::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Imp_Video::clear_sequence() {
  sequence_ = 1;
  clear_has_sequence();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::sequence() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.sequence)
  return sequence_;
}
inline void BidRequest_Imp_Video::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.sequence)
}

// repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
inline int BidRequest_Imp_Video::battr_size() const {
  return battr_.size();
}
inline void BidRequest_Imp_Video::clear_battr() {
  battr_.Clear();
}
inline ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Video::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
inline void BidRequest_Imp_Video::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.battr)
}
inline void BidRequest_Imp_Video::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.battr)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.battr)
  return &battr_;
}

// optional int32 maxextended = 11;
inline bool BidRequest_Imp_Video::has_maxextended() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Imp_Video::set_has_maxextended() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Imp_Video::clear_has_maxextended() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Imp_Video::clear_maxextended() {
  maxextended_ = 0;
  clear_has_maxextended();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::maxextended() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxextended)
  return maxextended_;
}
inline void BidRequest_Imp_Video::set_maxextended(::google::protobuf::int32 value) {
  set_has_maxextended();
  maxextended_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxextended)
}

// optional int32 minbitrate = 12;
inline bool BidRequest_Imp_Video::has_minbitrate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Imp_Video::set_has_minbitrate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Imp_Video::clear_has_minbitrate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Imp_Video::clear_minbitrate() {
  minbitrate_ = 0;
  clear_has_minbitrate();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::minbitrate() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.minbitrate)
  return minbitrate_;
}
inline void BidRequest_Imp_Video::set_minbitrate(::google::protobuf::int32 value) {
  set_has_minbitrate();
  minbitrate_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.minbitrate)
}

// optional int32 maxbitrate = 13;
inline bool BidRequest_Imp_Video::has_maxbitrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Imp_Video::set_has_maxbitrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Imp_Video::clear_has_maxbitrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Imp_Video::clear_maxbitrate() {
  maxbitrate_ = 0;
  clear_has_maxbitrate();
}
inline ::google::protobuf::int32 BidRequest_Imp_Video::maxbitrate() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxbitrate)
  return maxbitrate_;
}
inline void BidRequest_Imp_Video::set_maxbitrate(::google::protobuf::int32 value) {
  set_has_maxbitrate();
  maxbitrate_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxbitrate)
}

// optional bool boxingallowed = 14 [default = true];
inline bool BidRequest_Imp_Video::has_boxingallowed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Imp_Video::set_has_boxingallowed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Imp_Video::clear_has_boxingallowed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Imp_Video::clear_boxingallowed() {
  boxingallowed_ = true;
  clear_has_boxingallowed();
}
inline bool BidRequest_Imp_Video::boxingallowed() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.boxingallowed)
  return boxingallowed_;
}
inline void BidRequest_Imp_Video::set_boxingallowed(bool value) {
  set_has_boxingallowed();
  boxingallowed_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.boxingallowed)
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
inline int BidRequest_Imp_Video::playbackmethod_size() const {
  return playbackmethod_.size();
}
inline void BidRequest_Imp_Video::clear_playbackmethod() {
  playbackmethod_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::playbackmethod(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(playbackmethod_.Get(index));
}
inline void BidRequest_Imp_Video::set_playbackmethod(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value));
  playbackmethod_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
}
inline void BidRequest_Imp_Video::add_playbackmethod(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value));
  playbackmethod_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::playbackmethod() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return playbackmethod_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_playbackmethod() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return &playbackmethod_;
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
inline int BidRequest_Imp_Video::delivery_size() const {
  return delivery_.size();
}
inline void BidRequest_Imp_Video::clear_delivery() {
  delivery_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::delivery(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(delivery_.Get(index));
}
inline void BidRequest_Imp_Video::set_delivery(int index, ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value));
  delivery_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.delivery)
}
inline void BidRequest_Imp_Video::add_delivery(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value));
  delivery_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.delivery)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::delivery() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return delivery_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_delivery() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return &delivery_;
}

// optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
inline bool BidRequest_Imp_Video::has_pos() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_Imp_Video::set_has_pos() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_Imp_Video::clear_has_pos() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_Imp_Video::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::com::google::openrtb::BidRequest_Imp_AdPosition BidRequest_Imp_Video::pos() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.pos)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(pos_);
}
inline void BidRequest_Imp_Video::set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value) {
  assert(::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.pos)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
inline int BidRequest_Imp_Video::companionad_size() const {
  return companionad_.size();
}
inline void BidRequest_Imp_Video::clear_companionad() {
  companionad_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp_Video::companionad(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video::mutable_companionad(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video::add_companionad() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
BidRequest_Imp_Video::companionad() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
BidRequest_Imp_Video::mutable_companionad() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return &companionad_;
}

// optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
inline bool BidRequest_Imp_Video::has_companionad_21() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_Imp_Video::set_has_companionad_21() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_Imp_Video::clear_has_companionad_21() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_Imp_Video::clear_companionad_21() {
  if (companionad_21_ != NULL) companionad_21_->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::Clear();
  clear_has_companionad_21();
}
inline const ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd& BidRequest_Imp_Video::companionad_21() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
  return companionad_21_ != NULL ? *companionad_21_ : *default_instance_->companionad_21_;
}
inline ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video::mutable_companionad_21() {
  set_has_companionad_21();
  if (companionad_21_ == NULL) companionad_21_ = new ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
  return companionad_21_;
}
inline ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video::release_companionad_21() {
  clear_has_companionad_21();
  ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* temp = companionad_21_;
  companionad_21_ = NULL;
  return temp;
}
inline void BidRequest_Imp_Video::set_allocated_companionad_21(::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* companionad_21) {
  delete companionad_21_;
  companionad_21_ = companionad_21;
  if (companionad_21) {
    set_has_companionad_21();
  } else {
    clear_has_companionad_21();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
inline int BidRequest_Imp_Video::api_size() const {
  return api_.size();
}
inline void BidRequest_Imp_Video::clear_api() {
  api_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Video::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
inline void BidRequest_Imp_Video::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.api)
}
inline void BidRequest_Imp_Video::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.api)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.api)
  return api_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.api)
  return &api_;
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
inline int BidRequest_Imp_Video::companiontype_size() const {
  return companiontype_.size();
}
inline void BidRequest_Imp_Video::clear_companiontype() {
  companiontype_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::companiontype(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(companiontype_.Get(index));
}
inline void BidRequest_Imp_Video::set_companiontype(int index, ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value));
  companiontype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.companiontype)
}
inline void BidRequest_Imp_Video::add_companiontype(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value));
  companiontype_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.companiontype)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::companiontype() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return companiontype_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_companiontype() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return &companiontype_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native

// optional string request = 1;
inline bool BidRequest_Imp_Native::has_request() const {
  return request_oneof_case() == kRequest;
}
inline void BidRequest_Imp_Native::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void BidRequest_Imp_Native::clear_request() {
  if (has_request()) {
    delete request_oneof_.request_;
    clear_has_request_oneof();
  }
}
inline const ::std::string& BidRequest_Imp_Native::request() const {
  if (has_request()) {
    return *request_oneof_.request_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BidRequest_Imp_Native::set_request(const ::std::string& value) {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_ = new ::std::string;
  }
  request_oneof_.request_->assign(value);
}
inline void BidRequest_Imp_Native::set_request(const char* value) {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_ = new ::std::string;
  }
  request_oneof_.request_->assign(value);
}
inline void BidRequest_Imp_Native::set_request(const char* value, size_t size) {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_ = new ::std::string;
  }
  request_oneof_.request_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Imp_Native::mutable_request() {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_ = new ::std::string;
  }
  return request_oneof_.request_;
}
inline ::std::string* BidRequest_Imp_Native::release_request() {
  if (has_request()) {
    clear_has_request_oneof();
    ::std::string* temp = request_oneof_.request_;
    request_oneof_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidRequest_Imp_Native::set_allocated_request(::std::string* request) {
  clear_request_oneof();
  if (request) {
    set_has_request();
    request_oneof_.request_ = request;
  }
}

// optional .com.google.openrtb.NativeRequest request_native = 50;
inline bool BidRequest_Imp_Native::has_request_native() const {
  return request_oneof_case() == kRequestNative;
}
inline void BidRequest_Imp_Native::set_has_request_native() {
  _oneof_case_[0] = kRequestNative;
}
inline void BidRequest_Imp_Native::clear_request_native() {
  if (has_request_native()) {
    delete request_oneof_.request_native_;
    clear_has_request_oneof();
  }
}
inline const ::com::google::openrtb::NativeRequest& BidRequest_Imp_Native::request_native() const {
  return has_request_native() ? *request_oneof_.request_native_
                      : ::com::google::openrtb::NativeRequest::default_instance();
}
inline ::com::google::openrtb::NativeRequest* BidRequest_Imp_Native::mutable_request_native() {
  if (!has_request_native()) {
    clear_request_oneof();
    set_has_request_native();
    request_oneof_.request_native_ = new ::com::google::openrtb::NativeRequest;
  }
  return request_oneof_.request_native_;
}
inline ::com::google::openrtb::NativeRequest* BidRequest_Imp_Native::release_request_native() {
  if (has_request_native()) {
    clear_has_request_oneof();
    ::com::google::openrtb::NativeRequest* temp = request_oneof_.request_native_;
    request_oneof_.request_native_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidRequest_Imp_Native::set_allocated_request_native(::com::google::openrtb::NativeRequest* request_native) {
  clear_request_oneof();
  if (request_native) {
    set_has_request_native();
    request_oneof_.request_native_ = request_native;
  }
}

// optional string ver = 2;
inline bool BidRequest_Imp_Native::has_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp_Native::set_has_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp_Native::clear_has_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp_Native::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& BidRequest_Imp_Native::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.ver)
  return *ver_;
}
inline void BidRequest_Imp_Native::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.ver)
}
inline void BidRequest_Imp_Native::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Native.ver)
}
inline void BidRequest_Imp_Native::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Native.ver)
}
inline ::std::string* BidRequest_Imp_Native::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Native.ver)
  return ver_;
}
inline ::std::string* BidRequest_Imp_Native::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp_Native::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Native.ver)
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
inline int BidRequest_Imp_Native::api_size() const {
  return api_.size();
}
inline void BidRequest_Imp_Native::clear_api() {
  api_.Clear();
}
inline ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Native::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
inline void BidRequest_Imp_Native::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.api)
}
inline void BidRequest_Imp_Native::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Native.api)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Native::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Native.api)
  return api_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Native::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Native.api)
  return &api_;
}

// repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
inline int BidRequest_Imp_Native::battr_size() const {
  return battr_.size();
}
inline void BidRequest_Imp_Native::clear_battr() {
  battr_.Clear();
}
inline ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Native::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
inline void BidRequest_Imp_Native::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.battr)
}
inline void BidRequest_Imp_Native::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Native.battr)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Native::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Native.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Native::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Native.battr)
  return &battr_;
}

inline bool BidRequest_Imp_Native::has_request_oneof() {
  return request_oneof_case() != REQUEST_ONEOF_NOT_SET;
}
inline void BidRequest_Imp_Native::clear_has_request_oneof() {
  _oneof_case_[0] = REQUEST_ONEOF_NOT_SET;
}
inline BidRequest_Imp_Native::RequestOneofCase BidRequest_Imp_Native::request_oneof_case() const {
  return BidRequest_Imp_Native::RequestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BidRequest_Imp_Pmp_Deal

// optional string id = 1;
inline bool BidRequest_Imp_Pmp_Deal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Imp_Pmp_Deal::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
  return *id_;
}
inline void BidRequest_Imp_Pmp_Deal::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
inline void BidRequest_Imp_Pmp_Deal::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
inline void BidRequest_Imp_Pmp_Deal::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
  return id_;
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp_Pmp_Deal::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}

// optional double bidfloor = 2 [default = 0];
inline bool BidRequest_Imp_Pmp_Deal::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline double BidRequest_Imp_Pmp_Deal::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloor)
  return bidfloor_;
}
inline void BidRequest_Imp_Pmp_Deal::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloor)
}

// optional string bidfloorcur = 3 [default = "USD"];
inline bool BidRequest_Imp_Pmp_Deal::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_bidfloorcur() {
  if (bidfloorcur_ != _default_bidfloorcur_) {
    bidfloorcur_->assign(*_default_bidfloorcur_);
  }
  clear_has_bidfloorcur();
}
inline const ::std::string& BidRequest_Imp_Pmp_Deal::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
  return *bidfloorcur_;
}
inline void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
inline void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
inline void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string(*_default_bidfloorcur_);
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
  return bidfloorcur_;
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::release_bidfloorcur() {
  clear_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    return NULL;
  } else {
    ::std::string* temp = bidfloorcur_;
    bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
    return temp;
  }
}
inline void BidRequest_Imp_Pmp_Deal::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur_ != _default_bidfloorcur_) {
    delete bidfloorcur_;
  }
  if (bidfloorcur) {
    set_has_bidfloorcur();
    bidfloorcur_ = bidfloorcur;
  } else {
    clear_has_bidfloorcur();
    bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}

// repeated string wseat = 4;
inline int BidRequest_Imp_Pmp_Deal::wseat_size() const {
  return wseat_.size();
}
inline void BidRequest_Imp_Pmp_Deal::clear_wseat() {
  wseat_.Clear();
}
inline const ::std::string& BidRequest_Imp_Pmp_Deal::wseat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_.Get(index);
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::mutable_wseat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_.Mutable(index);
}
inline void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  wseat_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const char* value) {
  wseat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
inline void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const char* value, size_t size) {
  wseat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::add_wseat() {
  return wseat_.Add();
}
inline void BidRequest_Imp_Pmp_Deal::add_wseat(const ::std::string& value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
inline void BidRequest_Imp_Pmp_Deal::add_wseat(const char* value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
inline void BidRequest_Imp_Pmp_Deal::add_wseat(const char* value, size_t size) {
  wseat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Pmp_Deal::wseat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Pmp_Deal::mutable_wseat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return &wseat_;
}

// repeated string wadomain = 5;
inline int BidRequest_Imp_Pmp_Deal::wadomain_size() const {
  return wadomain_.size();
}
inline void BidRequest_Imp_Pmp_Deal::clear_wadomain() {
  wadomain_.Clear();
}
inline const ::std::string& BidRequest_Imp_Pmp_Deal::wadomain(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_.Get(index);
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::mutable_wadomain(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_.Mutable(index);
}
inline void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  wadomain_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const char* value) {
  wadomain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
inline void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const char* value, size_t size) {
  wadomain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::add_wadomain() {
  return wadomain_.Add();
}
inline void BidRequest_Imp_Pmp_Deal::add_wadomain(const ::std::string& value) {
  wadomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
inline void BidRequest_Imp_Pmp_Deal::add_wadomain(const char* value) {
  wadomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
inline void BidRequest_Imp_Pmp_Deal::add_wadomain(const char* value, size_t size) {
  wadomain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Pmp_Deal::wadomain() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Pmp_Deal::mutable_wadomain() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return &wadomain_;
}

// optional .com.google.openrtb.BidRequest.AuctionType at = 6;
inline bool BidRequest_Imp_Pmp_Deal::has_at() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_at() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_at() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_at() {
  at_ = 1;
  clear_has_at();
}
inline ::com::google::openrtb::BidRequest_AuctionType BidRequest_Imp_Pmp_Deal::at() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.at)
  return static_cast< ::com::google::openrtb::BidRequest_AuctionType >(at_);
}
inline void BidRequest_Imp_Pmp_Deal::set_at(::com::google::openrtb::BidRequest_AuctionType value) {
  assert(::com::google::openrtb::BidRequest_AuctionType_IsValid(value));
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.at)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp

// optional bool private_auction = 1;
inline bool BidRequest_Imp_Pmp::has_private_auction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Pmp::set_has_private_auction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Pmp::clear_has_private_auction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Pmp::clear_private_auction() {
  private_auction_ = false;
  clear_has_private_auction();
}
inline bool BidRequest_Imp_Pmp::private_auction() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.private_auction)
  return private_auction_;
}
inline void BidRequest_Imp_Pmp::set_private_auction(bool value) {
  set_has_private_auction();
  private_auction_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.private_auction)
}

// repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
inline int BidRequest_Imp_Pmp::deals_size() const {
  return deals_.size();
}
inline void BidRequest_Imp_Pmp::clear_deals() {
  deals_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp::deals(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::add_deals() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >&
BidRequest_Imp_Pmp::deals() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >*
BidRequest_Imp_Pmp::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return &deals_;
}

// -------------------------------------------------------------------

// BidRequest_Imp

// required string id = 1;
inline bool BidRequest_Imp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Imp::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.id)
  return *id_;
}
inline void BidRequest_Imp::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.id)
}
inline void BidRequest_Imp::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.id)
}
inline void BidRequest_Imp::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.id)
}
inline ::std::string* BidRequest_Imp::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.id)
  return id_;
}
inline ::std::string* BidRequest_Imp::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.id)
}

// optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
inline bool BidRequest_Imp::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp::clear_banner() {
  if (banner_ != NULL) banner_->::com::google::openrtb::BidRequest_Imp_Banner::Clear();
  clear_has_banner();
}
inline const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp::banner() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::com::google::openrtb::BidRequest_Imp_Banner;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.banner)
  return banner_;
}
inline ::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp::release_banner() {
  clear_has_banner();
  ::com::google::openrtb::BidRequest_Imp_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_banner(::com::google::openrtb::BidRequest_Imp_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.banner)
}

// optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
inline bool BidRequest_Imp::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp::clear_video() {
  if (video_ != NULL) video_->::com::google::openrtb::BidRequest_Imp_Video::Clear();
  clear_has_video();
}
inline const ::com::google::openrtb::BidRequest_Imp_Video& BidRequest_Imp::video() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::com::google::openrtb::BidRequest_Imp_Video* BidRequest_Imp::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::com::google::openrtb::BidRequest_Imp_Video;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.video)
  return video_;
}
inline ::com::google::openrtb::BidRequest_Imp_Video* BidRequest_Imp::release_video() {
  clear_has_video();
  ::com::google::openrtb::BidRequest_Imp_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.video)
}

// optional string displaymanager = 4;
inline bool BidRequest_Imp::has_displaymanager() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Imp::set_has_displaymanager() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Imp::clear_has_displaymanager() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Imp::clear_displaymanager() {
  if (displaymanager_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanager_->clear();
  }
  clear_has_displaymanager();
}
inline const ::std::string& BidRequest_Imp::displaymanager() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.displaymanager)
  return *displaymanager_;
}
inline void BidRequest_Imp::set_displaymanager(const ::std::string& value) {
  set_has_displaymanager();
  if (displaymanager_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanager_ = new ::std::string;
  }
  displaymanager_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.displaymanager)
}
inline void BidRequest_Imp::set_displaymanager(const char* value) {
  set_has_displaymanager();
  if (displaymanager_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanager_ = new ::std::string;
  }
  displaymanager_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.displaymanager)
}
inline void BidRequest_Imp::set_displaymanager(const char* value, size_t size) {
  set_has_displaymanager();
  if (displaymanager_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanager_ = new ::std::string;
  }
  displaymanager_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.displaymanager)
}
inline ::std::string* BidRequest_Imp::mutable_displaymanager() {
  set_has_displaymanager();
  if (displaymanager_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanager_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.displaymanager)
  return displaymanager_;
}
inline ::std::string* BidRequest_Imp::release_displaymanager() {
  clear_has_displaymanager();
  if (displaymanager_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displaymanager_;
    displaymanager_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_displaymanager(::std::string* displaymanager) {
  if (displaymanager_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaymanager_;
  }
  if (displaymanager) {
    set_has_displaymanager();
    displaymanager_ = displaymanager;
  } else {
    clear_has_displaymanager();
    displaymanager_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.displaymanager)
}

// optional string displaymanagerver = 5;
inline bool BidRequest_Imp::has_displaymanagerver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Imp::set_has_displaymanagerver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Imp::clear_has_displaymanagerver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Imp::clear_displaymanagerver() {
  if (displaymanagerver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanagerver_->clear();
  }
  clear_has_displaymanagerver();
}
inline const ::std::string& BidRequest_Imp::displaymanagerver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.displaymanagerver)
  return *displaymanagerver_;
}
inline void BidRequest_Imp::set_displaymanagerver(const ::std::string& value) {
  set_has_displaymanagerver();
  if (displaymanagerver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanagerver_ = new ::std::string;
  }
  displaymanagerver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
inline void BidRequest_Imp::set_displaymanagerver(const char* value) {
  set_has_displaymanagerver();
  if (displaymanagerver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanagerver_ = new ::std::string;
  }
  displaymanagerver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
inline void BidRequest_Imp::set_displaymanagerver(const char* value, size_t size) {
  set_has_displaymanagerver();
  if (displaymanagerver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanagerver_ = new ::std::string;
  }
  displaymanagerver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
inline ::std::string* BidRequest_Imp::mutable_displaymanagerver() {
  set_has_displaymanagerver();
  if (displaymanagerver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaymanagerver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.displaymanagerver)
  return displaymanagerver_;
}
inline ::std::string* BidRequest_Imp::release_displaymanagerver() {
  clear_has_displaymanagerver();
  if (displaymanagerver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displaymanagerver_;
    displaymanagerver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_displaymanagerver(::std::string* displaymanagerver) {
  if (displaymanagerver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaymanagerver_;
  }
  if (displaymanagerver) {
    set_has_displaymanagerver();
    displaymanagerver_ = displaymanagerver;
  } else {
    clear_has_displaymanagerver();
    displaymanagerver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}

// optional bool instl = 6;
inline bool BidRequest_Imp::has_instl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Imp::set_has_instl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Imp::clear_has_instl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Imp::clear_instl() {
  instl_ = false;
  clear_has_instl();
}
inline bool BidRequest_Imp::instl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.instl)
  return instl_;
}
inline void BidRequest_Imp::set_instl(bool value) {
  set_has_instl();
  instl_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.instl)
}

// optional string tagid = 7;
inline bool BidRequest_Imp::has_tagid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Imp::set_has_tagid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Imp::clear_has_tagid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Imp::clear_tagid() {
  if (tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagid_->clear();
  }
  clear_has_tagid();
}
inline const ::std::string& BidRequest_Imp::tagid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.tagid)
  return *tagid_;
}
inline void BidRequest_Imp::set_tagid(const ::std::string& value) {
  set_has_tagid();
  if (tagid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.tagid)
}
inline void BidRequest_Imp::set_tagid(const char* value) {
  set_has_tagid();
  if (tagid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.tagid)
}
inline void BidRequest_Imp::set_tagid(const char* value, size_t size) {
  set_has_tagid();
  if (tagid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.tagid)
}
inline ::std::string* BidRequest_Imp::mutable_tagid() {
  set_has_tagid();
  if (tagid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.tagid)
  return tagid_;
}
inline ::std::string* BidRequest_Imp::release_tagid() {
  clear_has_tagid();
  if (tagid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tagid_;
    tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_tagid(::std::string* tagid) {
  if (tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagid_;
  }
  if (tagid) {
    set_has_tagid();
    tagid_ = tagid;
  } else {
    clear_has_tagid();
    tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.tagid)
}

// optional double bidfloor = 8 [default = 0];
inline bool BidRequest_Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline double BidRequest_Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.bidfloor)
  return bidfloor_;
}
inline void BidRequest_Imp::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.bidfloor)
}

// optional string bidfloorcur = 9 [default = "USD"];
inline bool BidRequest_Imp::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Imp::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Imp::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Imp::clear_bidfloorcur() {
  if (bidfloorcur_ != _default_bidfloorcur_) {
    bidfloorcur_->assign(*_default_bidfloorcur_);
  }
  clear_has_bidfloorcur();
}
inline const ::std::string& BidRequest_Imp::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.bidfloorcur)
  return *bidfloorcur_;
}
inline void BidRequest_Imp::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
inline void BidRequest_Imp::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
inline void BidRequest_Imp::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
inline ::std::string* BidRequest_Imp::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    bidfloorcur_ = new ::std::string(*_default_bidfloorcur_);
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.bidfloorcur)
  return bidfloorcur_;
}
inline ::std::string* BidRequest_Imp::release_bidfloorcur() {
  clear_has_bidfloorcur();
  if (bidfloorcur_ == _default_bidfloorcur_) {
    return NULL;
  } else {
    ::std::string* temp = bidfloorcur_;
    bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur_ != _default_bidfloorcur_) {
    delete bidfloorcur_;
  }
  if (bidfloorcur) {
    set_has_bidfloorcur();
    bidfloorcur_ = bidfloorcur;
  } else {
    clear_has_bidfloorcur();
    bidfloorcur_ = const_cast< ::std::string*>(_default_bidfloorcur_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}

// optional bool secure = 12;
inline bool BidRequest_Imp::has_secure() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Imp::set_has_secure() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Imp::clear_has_secure() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Imp::clear_secure() {
  secure_ = false;
  clear_has_secure();
}
inline bool BidRequest_Imp::secure() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.secure)
  return secure_;
}
inline void BidRequest_Imp::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.secure)
}

// repeated string iframebuster = 10;
inline int BidRequest_Imp::iframebuster_size() const {
  return iframebuster_.size();
}
inline void BidRequest_Imp::clear_iframebuster() {
  iframebuster_.Clear();
}
inline const ::std::string& BidRequest_Imp::iframebuster(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_.Get(index);
}
inline ::std::string* BidRequest_Imp::mutable_iframebuster(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_.Mutable(index);
}
inline void BidRequest_Imp::set_iframebuster(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.iframebuster)
  iframebuster_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp::set_iframebuster(int index, const char* value) {
  iframebuster_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.iframebuster)
}
inline void BidRequest_Imp::set_iframebuster(int index, const char* value, size_t size) {
  iframebuster_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.iframebuster)
}
inline ::std::string* BidRequest_Imp::add_iframebuster() {
  return iframebuster_.Add();
}
inline void BidRequest_Imp::add_iframebuster(const ::std::string& value) {
  iframebuster_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.iframebuster)
}
inline void BidRequest_Imp::add_iframebuster(const char* value) {
  iframebuster_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.iframebuster)
}
inline void BidRequest_Imp::add_iframebuster(const char* value, size_t size) {
  iframebuster_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.iframebuster)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp::iframebuster() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp::mutable_iframebuster() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.iframebuster)
  return &iframebuster_;
}

// optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
inline bool BidRequest_Imp::has_pmp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Imp::set_has_pmp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Imp::clear_has_pmp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Imp::clear_pmp() {
  if (pmp_ != NULL) pmp_->::com::google::openrtb::BidRequest_Imp_Pmp::Clear();
  clear_has_pmp();
}
inline const ::com::google::openrtb::BidRequest_Imp_Pmp& BidRequest_Imp::pmp() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.pmp)
  return pmp_ != NULL ? *pmp_ : *default_instance_->pmp_;
}
inline ::com::google::openrtb::BidRequest_Imp_Pmp* BidRequest_Imp::mutable_pmp() {
  set_has_pmp();
  if (pmp_ == NULL) pmp_ = new ::com::google::openrtb::BidRequest_Imp_Pmp;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.pmp)
  return pmp_;
}
inline ::com::google::openrtb::BidRequest_Imp_Pmp* BidRequest_Imp::release_pmp() {
  clear_has_pmp();
  ::com::google::openrtb::BidRequest_Imp_Pmp* temp = pmp_;
  pmp_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_pmp(::com::google::openrtb::BidRequest_Imp_Pmp* pmp) {
  delete pmp_;
  pmp_ = pmp;
  if (pmp) {
    set_has_pmp();
  } else {
    clear_has_pmp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.pmp)
}

// optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
inline bool BidRequest_Imp::has_native() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Imp::set_has_native() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Imp::clear_has_native() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Imp::clear_native() {
  if (native_ != NULL) native_->::com::google::openrtb::BidRequest_Imp_Native::Clear();
  clear_has_native();
}
inline const ::com::google::openrtb::BidRequest_Imp_Native& BidRequest_Imp::native() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::com::google::openrtb::BidRequest_Imp_Native* BidRequest_Imp::mutable_native() {
  set_has_native();
  if (native_ == NULL) native_ = new ::com::google::openrtb::BidRequest_Imp_Native;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.native)
  return native_;
}
inline ::com::google::openrtb::BidRequest_Imp_Native* BidRequest_Imp::release_native() {
  clear_has_native();
  ::com::google::openrtb::BidRequest_Imp_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_native(::com::google::openrtb::BidRequest_Imp_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.native)
}

// -------------------------------------------------------------------

// BidRequest_Site

// optional string id = 1;
inline bool BidRequest_Site::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Site::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Site::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Site::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Site::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.id)
  return *id_;
}
inline void BidRequest_Site::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.id)
}
inline void BidRequest_Site::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.id)
}
inline void BidRequest_Site::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.id)
}
inline ::std::string* BidRequest_Site::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.id)
  return id_;
}
inline ::std::string* BidRequest_Site::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.id)
}

// optional string name = 2;
inline bool BidRequest_Site::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Site::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Site::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_Site::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.name)
  return *name_;
}
inline void BidRequest_Site::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.name)
}
inline void BidRequest_Site::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.name)
}
inline void BidRequest_Site::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.name)
}
inline ::std::string* BidRequest_Site::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.name)
  return name_;
}
inline ::std::string* BidRequest_Site::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.name)
}

// optional string domain = 3;
inline bool BidRequest_Site::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Site::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Site::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Site::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& BidRequest_Site::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.domain)
  return *domain_;
}
inline void BidRequest_Site::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.domain)
}
inline void BidRequest_Site::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.domain)
}
inline void BidRequest_Site::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.domain)
}
inline ::std::string* BidRequest_Site::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.domain)
  return domain_;
}
inline ::std::string* BidRequest_Site::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.domain)
}

// repeated string cat = 4;
inline int BidRequest_Site::cat_size() const {
  return cat_.size();
}
inline void BidRequest_Site::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidRequest_Site::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.cat)
  return cat_.Get(index);
}
inline ::std::string* BidRequest_Site::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.cat)
  return cat_.Mutable(index);
}
inline void BidRequest_Site::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidRequest_Site::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.cat)
}
inline void BidRequest_Site::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.cat)
}
inline ::std::string* BidRequest_Site::add_cat() {
  return cat_.Add();
}
inline void BidRequest_Site::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.cat)
}
inline void BidRequest_Site::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.cat)
}
inline void BidRequest_Site::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.cat)
  return &cat_;
}

// repeated string sectioncat = 5;
inline int BidRequest_Site::sectioncat_size() const {
  return sectioncat_.size();
}
inline void BidRequest_Site::clear_sectioncat() {
  sectioncat_.Clear();
}
inline const ::std::string& BidRequest_Site::sectioncat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_.Get(index);
}
inline ::std::string* BidRequest_Site::mutable_sectioncat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_.Mutable(index);
}
inline void BidRequest_Site::set_sectioncat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.sectioncat)
  sectioncat_.Mutable(index)->assign(value);
}
inline void BidRequest_Site::set_sectioncat(int index, const char* value) {
  sectioncat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.sectioncat)
}
inline void BidRequest_Site::set_sectioncat(int index, const char* value, size_t size) {
  sectioncat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.sectioncat)
}
inline ::std::string* BidRequest_Site::add_sectioncat() {
  return sectioncat_.Add();
}
inline void BidRequest_Site::add_sectioncat(const ::std::string& value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.sectioncat)
}
inline void BidRequest_Site::add_sectioncat(const char* value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.sectioncat)
}
inline void BidRequest_Site::add_sectioncat(const char* value, size_t size) {
  sectioncat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.sectioncat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::sectioncat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_sectioncat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.sectioncat)
  return &sectioncat_;
}

// repeated string pagecat = 6;
inline int BidRequest_Site::pagecat_size() const {
  return pagecat_.size();
}
inline void BidRequest_Site::clear_pagecat() {
  pagecat_.Clear();
}
inline const ::std::string& BidRequest_Site::pagecat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_.Get(index);
}
inline ::std::string* BidRequest_Site::mutable_pagecat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_.Mutable(index);
}
inline void BidRequest_Site::set_pagecat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.pagecat)
  pagecat_.Mutable(index)->assign(value);
}
inline void BidRequest_Site::set_pagecat(int index, const char* value) {
  pagecat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.pagecat)
}
inline void BidRequest_Site::set_pagecat(int index, const char* value, size_t size) {
  pagecat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.pagecat)
}
inline ::std::string* BidRequest_Site::add_pagecat() {
  return pagecat_.Add();
}
inline void BidRequest_Site::add_pagecat(const ::std::string& value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.pagecat)
}
inline void BidRequest_Site::add_pagecat(const char* value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.pagecat)
}
inline void BidRequest_Site::add_pagecat(const char* value, size_t size) {
  pagecat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.pagecat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::pagecat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_pagecat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.pagecat)
  return &pagecat_;
}

// optional string page = 7;
inline bool BidRequest_Site::has_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Site::set_has_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Site::clear_has_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Site::clear_page() {
  if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_->clear();
  }
  clear_has_page();
}
inline const ::std::string& BidRequest_Site::page() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.page)
  return *page_;
}
inline void BidRequest_Site::set_page(const ::std::string& value) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_ = new ::std::string;
  }
  page_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.page)
}
inline void BidRequest_Site::set_page(const char* value) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_ = new ::std::string;
  }
  page_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.page)
}
inline void BidRequest_Site::set_page(const char* value, size_t size) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_ = new ::std::string;
  }
  page_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.page)
}
inline ::std::string* BidRequest_Site::mutable_page() {
  set_has_page();
  if (page_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.page)
  return page_;
}
inline ::std::string* BidRequest_Site::release_page() {
  clear_has_page();
  if (page_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_;
    page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_page(::std::string* page) {
  if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_;
  }
  if (page) {
    set_has_page();
    page_ = page;
  } else {
    clear_has_page();
    page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.page)
}

// optional bool privacypolicy = 8;
inline bool BidRequest_Site::has_privacypolicy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Site::set_has_privacypolicy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Site::clear_has_privacypolicy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Site::clear_privacypolicy() {
  privacypolicy_ = false;
  clear_has_privacypolicy();
}
inline bool BidRequest_Site::privacypolicy() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.privacypolicy)
  return privacypolicy_;
}
inline void BidRequest_Site::set_privacypolicy(bool value) {
  set_has_privacypolicy();
  privacypolicy_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.privacypolicy)
}

// optional string ref = 9;
inline bool BidRequest_Site::has_ref() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Site::set_has_ref() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Site::clear_ref() {
  if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_->clear();
  }
  clear_has_ref();
}
inline const ::std::string& BidRequest_Site::ref() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.ref)
  return *ref_;
}
inline void BidRequest_Site::set_ref(const ::std::string& value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.ref)
}
inline void BidRequest_Site::set_ref(const char* value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.ref)
}
inline void BidRequest_Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.ref)
}
inline ::std::string* BidRequest_Site::mutable_ref() {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ref_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.ref)
  return ref_;
}
inline ::std::string* BidRequest_Site::release_ref() {
  clear_has_ref();
  if (ref_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ref_;
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_ref(::std::string* ref) {
  if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_;
  }
  if (ref) {
    set_has_ref();
    ref_ = ref;
  } else {
    clear_has_ref();
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.ref)
}

// optional string search = 10;
inline bool BidRequest_Site::has_search() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Site::set_has_search() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Site::clear_has_search() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Site::clear_search() {
  if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_->clear();
  }
  clear_has_search();
}
inline const ::std::string& BidRequest_Site::search() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.search)
  return *search_;
}
inline void BidRequest_Site::set_search(const ::std::string& value) {
  set_has_search();
  if (search_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_ = new ::std::string;
  }
  search_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.search)
}
inline void BidRequest_Site::set_search(const char* value) {
  set_has_search();
  if (search_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_ = new ::std::string;
  }
  search_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.search)
}
inline void BidRequest_Site::set_search(const char* value, size_t size) {
  set_has_search();
  if (search_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_ = new ::std::string;
  }
  search_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.search)
}
inline ::std::string* BidRequest_Site::mutable_search() {
  set_has_search();
  if (search_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.search)
  return search_;
}
inline ::std::string* BidRequest_Site::release_search() {
  clear_has_search();
  if (search_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_;
    search_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_search(::std::string* search) {
  if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_;
  }
  if (search) {
    set_has_search();
    search_ = search;
  } else {
    clear_has_search();
    search_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.search)
}

// optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
inline bool BidRequest_Site::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Site::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Site::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Site::clear_publisher() {
  if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
  clear_has_publisher();
}
inline const ::com::google::openrtb::BidRequest_Publisher& BidRequest_Site::publisher() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
inline ::com::google::openrtb::BidRequest_Publisher* BidRequest_Site::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) publisher_ = new ::com::google::openrtb::BidRequest_Publisher;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.publisher)
  return publisher_;
}
inline ::com::google::openrtb::BidRequest_Publisher* BidRequest_Site::release_publisher() {
  clear_has_publisher();
  ::com::google::openrtb::BidRequest_Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
inline void BidRequest_Site::set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.publisher)
}

// optional .com.google.openrtb.BidRequest.Content content = 12;
inline bool BidRequest_Site::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Site::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Site::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Site::clear_content() {
  if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
  clear_has_content();
}
inline const ::com::google::openrtb::BidRequest_Content& BidRequest_Site::content() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::com::google::openrtb::BidRequest_Content* BidRequest_Site::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::com::google::openrtb::BidRequest_Content;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.content)
  return content_;
}
inline ::com::google::openrtb::BidRequest_Content* BidRequest_Site::release_content() {
  clear_has_content();
  ::com::google::openrtb::BidRequest_Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void BidRequest_Site::set_allocated_content(::com::google::openrtb::BidRequest_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.content)
}

// optional string keywords = 13;
inline bool BidRequest_Site::has_keywords() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Site::set_has_keywords() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Site::clear_has_keywords() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Site::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidRequest_Site::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.keywords)
  return *keywords_;
}
inline void BidRequest_Site::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.keywords)
}
inline void BidRequest_Site::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.keywords)
}
inline void BidRequest_Site::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.keywords)
}
inline ::std::string* BidRequest_Site::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.keywords)
  return keywords_;
}
inline ::std::string* BidRequest_Site::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Site::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.keywords)
}

// optional bool mobile = 15;
inline bool BidRequest_Site::has_mobile() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Site::set_has_mobile() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Site::clear_has_mobile() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Site::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
inline bool BidRequest_Site::mobile() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.mobile)
  return mobile_;
}
inline void BidRequest_Site::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.mobile)
}

// -------------------------------------------------------------------

// BidRequest_App

// optional string id = 1;
inline bool BidRequest_App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_App::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_App::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.id)
  return *id_;
}
inline void BidRequest_App::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.id)
}
inline void BidRequest_App::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.id)
}
inline void BidRequest_App::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.id)
}
inline ::std::string* BidRequest_App::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.id)
  return id_;
}
inline ::std::string* BidRequest_App::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.id)
}

// optional string name = 2;
inline bool BidRequest_App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_App::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_App::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.name)
  return *name_;
}
inline void BidRequest_App::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.name)
}
inline void BidRequest_App::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.name)
}
inline void BidRequest_App::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.name)
}
inline ::std::string* BidRequest_App::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.name)
  return name_;
}
inline ::std::string* BidRequest_App::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.name)
}

// optional string domain = 3;
inline bool BidRequest_App::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_App::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_App::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_App::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& BidRequest_App::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.domain)
  return *domain_;
}
inline void BidRequest_App::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.domain)
}
inline void BidRequest_App::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.domain)
}
inline void BidRequest_App::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.domain)
}
inline ::std::string* BidRequest_App::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.domain)
  return domain_;
}
inline ::std::string* BidRequest_App::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.domain)
}

// repeated string cat = 4;
inline int BidRequest_App::cat_size() const {
  return cat_.size();
}
inline void BidRequest_App::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidRequest_App::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.cat)
  return cat_.Get(index);
}
inline ::std::string* BidRequest_App::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.cat)
  return cat_.Mutable(index);
}
inline void BidRequest_App::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidRequest_App::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.cat)
}
inline void BidRequest_App::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.cat)
}
inline ::std::string* BidRequest_App::add_cat() {
  return cat_.Add();
}
inline void BidRequest_App::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.cat)
}
inline void BidRequest_App::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.cat)
}
inline void BidRequest_App::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.cat)
  return &cat_;
}

// repeated string sectioncat = 5;
inline int BidRequest_App::sectioncat_size() const {
  return sectioncat_.size();
}
inline void BidRequest_App::clear_sectioncat() {
  sectioncat_.Clear();
}
inline const ::std::string& BidRequest_App::sectioncat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_.Get(index);
}
inline ::std::string* BidRequest_App::mutable_sectioncat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_.Mutable(index);
}
inline void BidRequest_App::set_sectioncat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.sectioncat)
  sectioncat_.Mutable(index)->assign(value);
}
inline void BidRequest_App::set_sectioncat(int index, const char* value) {
  sectioncat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.sectioncat)
}
inline void BidRequest_App::set_sectioncat(int index, const char* value, size_t size) {
  sectioncat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.sectioncat)
}
inline ::std::string* BidRequest_App::add_sectioncat() {
  return sectioncat_.Add();
}
inline void BidRequest_App::add_sectioncat(const ::std::string& value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.sectioncat)
}
inline void BidRequest_App::add_sectioncat(const char* value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.sectioncat)
}
inline void BidRequest_App::add_sectioncat(const char* value, size_t size) {
  sectioncat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.sectioncat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::sectioncat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_sectioncat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.sectioncat)
  return &sectioncat_;
}

// repeated string pagecat = 6;
inline int BidRequest_App::pagecat_size() const {
  return pagecat_.size();
}
inline void BidRequest_App::clear_pagecat() {
  pagecat_.Clear();
}
inline const ::std::string& BidRequest_App::pagecat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_.Get(index);
}
inline ::std::string* BidRequest_App::mutable_pagecat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_.Mutable(index);
}
inline void BidRequest_App::set_pagecat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.pagecat)
  pagecat_.Mutable(index)->assign(value);
}
inline void BidRequest_App::set_pagecat(int index, const char* value) {
  pagecat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.pagecat)
}
inline void BidRequest_App::set_pagecat(int index, const char* value, size_t size) {
  pagecat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.pagecat)
}
inline ::std::string* BidRequest_App::add_pagecat() {
  return pagecat_.Add();
}
inline void BidRequest_App::add_pagecat(const ::std::string& value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.pagecat)
}
inline void BidRequest_App::add_pagecat(const char* value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.pagecat)
}
inline void BidRequest_App::add_pagecat(const char* value, size_t size) {
  pagecat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.pagecat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::pagecat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_pagecat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.pagecat)
  return &pagecat_;
}

// optional string ver = 7;
inline bool BidRequest_App::has_ver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_App::set_has_ver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_App::clear_has_ver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_App::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& BidRequest_App::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.ver)
  return *ver_;
}
inline void BidRequest_App::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.ver)
}
inline void BidRequest_App::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.ver)
}
inline void BidRequest_App::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.ver)
}
inline ::std::string* BidRequest_App::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.ver)
  return ver_;
}
inline ::std::string* BidRequest_App::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.ver)
}

// optional string bundle = 8;
inline bool BidRequest_App::has_bundle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_App::set_has_bundle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_App::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& BidRequest_App::bundle() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.bundle)
  return *bundle_;
}
inline void BidRequest_App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.bundle)
}
inline void BidRequest_App::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.bundle)
}
inline void BidRequest_App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.bundle)
}
inline ::std::string* BidRequest_App::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.bundle)
  return bundle_;
}
inline ::std::string* BidRequest_App::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.bundle)
}

// optional bool privacypolicy = 9;
inline bool BidRequest_App::has_privacypolicy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_App::set_has_privacypolicy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_App::clear_has_privacypolicy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_App::clear_privacypolicy() {
  privacypolicy_ = false;
  clear_has_privacypolicy();
}
inline bool BidRequest_App::privacypolicy() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.privacypolicy)
  return privacypolicy_;
}
inline void BidRequest_App::set_privacypolicy(bool value) {
  set_has_privacypolicy();
  privacypolicy_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.privacypolicy)
}

// optional bool paid = 10;
inline bool BidRequest_App::has_paid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_App::set_has_paid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_App::clear_has_paid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_App::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
inline bool BidRequest_App::paid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.paid)
  return paid_;
}
inline void BidRequest_App::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.paid)
}

// optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
inline bool BidRequest_App::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_App::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_App::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_App::clear_publisher() {
  if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
  clear_has_publisher();
}
inline const ::com::google::openrtb::BidRequest_Publisher& BidRequest_App::publisher() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
inline ::com::google::openrtb::BidRequest_Publisher* BidRequest_App::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) publisher_ = new ::com::google::openrtb::BidRequest_Publisher;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.publisher)
  return publisher_;
}
inline ::com::google::openrtb::BidRequest_Publisher* BidRequest_App::release_publisher() {
  clear_has_publisher();
  ::com::google::openrtb::BidRequest_Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
inline void BidRequest_App::set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.publisher)
}

// optional .com.google.openrtb.BidRequest.Content content = 12;
inline bool BidRequest_App::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_App::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_App::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_App::clear_content() {
  if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
  clear_has_content();
}
inline const ::com::google::openrtb::BidRequest_Content& BidRequest_App::content() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::com::google::openrtb::BidRequest_Content* BidRequest_App::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::com::google::openrtb::BidRequest_Content;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.content)
  return content_;
}
inline ::com::google::openrtb::BidRequest_Content* BidRequest_App::release_content() {
  clear_has_content();
  ::com::google::openrtb::BidRequest_Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void BidRequest_App::set_allocated_content(::com::google::openrtb::BidRequest_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.content)
}

// optional string keywords = 13;
inline bool BidRequest_App::has_keywords() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_App::set_has_keywords() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_App::clear_has_keywords() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_App::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidRequest_App::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.keywords)
  return *keywords_;
}
inline void BidRequest_App::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.keywords)
}
inline void BidRequest_App::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.keywords)
}
inline void BidRequest_App::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.keywords)
}
inline ::std::string* BidRequest_App::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.keywords)
  return keywords_;
}
inline ::std::string* BidRequest_App::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.keywords)
}

// optional string storeurl = 16;
inline bool BidRequest_App::has_storeurl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_App::set_has_storeurl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_App::clear_has_storeurl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_App::clear_storeurl() {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_->clear();
  }
  clear_has_storeurl();
}
inline const ::std::string& BidRequest_App::storeurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.storeurl)
  return *storeurl_;
}
inline void BidRequest_App::set_storeurl(const ::std::string& value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.storeurl)
}
inline void BidRequest_App::set_storeurl(const char* value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.storeurl)
}
inline void BidRequest_App::set_storeurl(const char* value, size_t size) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.storeurl)
}
inline ::std::string* BidRequest_App::mutable_storeurl() {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.storeurl)
  return storeurl_;
}
inline ::std::string* BidRequest_App::release_storeurl() {
  clear_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = storeurl_;
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_storeurl(::std::string* storeurl) {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (storeurl) {
    set_has_storeurl();
    storeurl_ = storeurl;
  } else {
    clear_has_storeurl();
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.storeurl)
}

// -------------------------------------------------------------------

// BidRequest_Publisher

// optional string id = 1;
inline bool BidRequest_Publisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Publisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Publisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Publisher::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Publisher::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.id)
  return *id_;
}
inline void BidRequest_Publisher::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.id)
}
inline void BidRequest_Publisher::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.id)
}
inline void BidRequest_Publisher::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.id)
}
inline ::std::string* BidRequest_Publisher::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.id)
  return id_;
}
inline ::std::string* BidRequest_Publisher::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Publisher::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.id)
}

// optional string name = 2;
inline bool BidRequest_Publisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Publisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Publisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Publisher::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_Publisher::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.name)
  return *name_;
}
inline void BidRequest_Publisher::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.name)
}
inline void BidRequest_Publisher::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.name)
}
inline void BidRequest_Publisher::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.name)
}
inline ::std::string* BidRequest_Publisher::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.name)
  return name_;
}
inline ::std::string* BidRequest_Publisher::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Publisher::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.name)
}

// repeated string cat = 3;
inline int BidRequest_Publisher::cat_size() const {
  return cat_.size();
}
inline void BidRequest_Publisher::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidRequest_Publisher::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_.Get(index);
}
inline ::std::string* BidRequest_Publisher::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_.Mutable(index);
}
inline void BidRequest_Publisher::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidRequest_Publisher::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.cat)
}
inline void BidRequest_Publisher::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.cat)
}
inline ::std::string* BidRequest_Publisher::add_cat() {
  return cat_.Add();
}
inline void BidRequest_Publisher::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Publisher.cat)
}
inline void BidRequest_Publisher::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Publisher.cat)
}
inline void BidRequest_Publisher::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Publisher.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Publisher::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Publisher::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Publisher.cat)
  return &cat_;
}

// optional string domain = 4;
inline bool BidRequest_Publisher::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Publisher::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Publisher::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Publisher::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& BidRequest_Publisher::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.domain)
  return *domain_;
}
inline void BidRequest_Publisher::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.domain)
}
inline void BidRequest_Publisher::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.domain)
}
inline void BidRequest_Publisher::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.domain)
}
inline ::std::string* BidRequest_Publisher::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.domain)
  return domain_;
}
inline ::std::string* BidRequest_Publisher::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Publisher::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.domain)
}

// -------------------------------------------------------------------

// BidRequest_Content

// optional string id = 1;
inline bool BidRequest_Content::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Content::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Content::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Content::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Content::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.id)
  return *id_;
}
inline void BidRequest_Content::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.id)
}
inline void BidRequest_Content::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.id)
}
inline void BidRequest_Content::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.id)
}
inline ::std::string* BidRequest_Content::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.id)
  return id_;
}
inline ::std::string* BidRequest_Content::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.id)
}

// optional int32 episode = 2;
inline bool BidRequest_Content::has_episode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Content::set_has_episode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Content::clear_has_episode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Content::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
inline ::google::protobuf::int32 BidRequest_Content::episode() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.episode)
  return episode_;
}
inline void BidRequest_Content::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.episode)
}

// optional string title = 3;
inline bool BidRequest_Content::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Content::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Content::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BidRequest_Content::title() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.title)
  return *title_;
}
inline void BidRequest_Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.title)
}
inline void BidRequest_Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.title)
}
inline void BidRequest_Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.title)
}
inline ::std::string* BidRequest_Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.title)
  return title_;
}
inline ::std::string* BidRequest_Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.title)
}

// optional string series = 4;
inline bool BidRequest_Content::has_series() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Content::set_has_series() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Content::clear_has_series() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Content::clear_series() {
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_->clear();
  }
  clear_has_series();
}
inline const ::std::string& BidRequest_Content::series() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.series)
  return *series_;
}
inline void BidRequest_Content::set_series(const ::std::string& value) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.series)
}
inline void BidRequest_Content::set_series(const char* value) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.series)
}
inline void BidRequest_Content::set_series(const char* value, size_t size) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.series)
}
inline ::std::string* BidRequest_Content::mutable_series() {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.series)
  return series_;
}
inline ::std::string* BidRequest_Content::release_series() {
  clear_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = series_;
    series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_series(::std::string* series) {
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete series_;
  }
  if (series) {
    set_has_series();
    series_ = series;
  } else {
    clear_has_series();
    series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.series)
}

// optional string season = 5;
inline bool BidRequest_Content::has_season() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Content::set_has_season() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Content::clear_has_season() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Content::clear_season() {
  if (season_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    season_->clear();
  }
  clear_has_season();
}
inline const ::std::string& BidRequest_Content::season() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.season)
  return *season_;
}
inline void BidRequest_Content::set_season(const ::std::string& value) {
  set_has_season();
  if (season_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    season_ = new ::std::string;
  }
  season_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.season)
}
inline void BidRequest_Content::set_season(const char* value) {
  set_has_season();
  if (season_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    season_ = new ::std::string;
  }
  season_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.season)
}
inline void BidRequest_Content::set_season(const char* value, size_t size) {
  set_has_season();
  if (season_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    season_ = new ::std::string;
  }
  season_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.season)
}
inline ::std::string* BidRequest_Content::mutable_season() {
  set_has_season();
  if (season_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    season_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.season)
  return season_;
}
inline ::std::string* BidRequest_Content::release_season() {
  clear_has_season();
  if (season_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = season_;
    season_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_season(::std::string* season) {
  if (season_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete season_;
  }
  if (season) {
    set_has_season();
    season_ = season;
  } else {
    clear_has_season();
    season_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.season)
}

// optional string url = 6;
inline bool BidRequest_Content::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Content::set_has_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Content::clear_has_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Content::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidRequest_Content::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.url)
  return *url_;
}
inline void BidRequest_Content::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.url)
}
inline void BidRequest_Content::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.url)
}
inline void BidRequest_Content::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.url)
}
inline ::std::string* BidRequest_Content::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.url)
  return url_;
}
inline ::std::string* BidRequest_Content::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.url)
}

// repeated string cat = 7;
inline int BidRequest_Content::cat_size() const {
  return cat_.size();
}
inline void BidRequest_Content::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidRequest_Content::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.cat)
  return cat_.Get(index);
}
inline ::std::string* BidRequest_Content::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.cat)
  return cat_.Mutable(index);
}
inline void BidRequest_Content::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidRequest_Content::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.cat)
}
inline void BidRequest_Content::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.cat)
}
inline ::std::string* BidRequest_Content::add_cat() {
  return cat_.Add();
}
inline void BidRequest_Content::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Content.cat)
}
inline void BidRequest_Content::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Content.cat)
}
inline void BidRequest_Content::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Content.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Content::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Content.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Content::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Content.cat)
  return &cat_;
}

// optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
inline bool BidRequest_Content::has_videoquality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Content::set_has_videoquality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Content::clear_has_videoquality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Content::clear_videoquality() {
  videoquality_ = 0;
  clear_has_videoquality();
}
inline ::com::google::openrtb::BidRequest_Content_VideoQuality BidRequest_Content::videoquality() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.videoquality)
  return static_cast< ::com::google::openrtb::BidRequest_Content_VideoQuality >(videoquality_);
}
inline void BidRequest_Content::set_videoquality(::com::google::openrtb::BidRequest_Content_VideoQuality value) {
  assert(::com::google::openrtb::BidRequest_Content_VideoQuality_IsValid(value));
  set_has_videoquality();
  videoquality_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.videoquality)
}

// optional string keywords = 9;
inline bool BidRequest_Content::has_keywords() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Content::set_has_keywords() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Content::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Content::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidRequest_Content::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.keywords)
  return *keywords_;
}
inline void BidRequest_Content::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.keywords)
}
inline void BidRequest_Content::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.keywords)
}
inline void BidRequest_Content::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.keywords)
}
inline ::std::string* BidRequest_Content::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.keywords)
  return keywords_;
}
inline ::std::string* BidRequest_Content::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.keywords)
}

// optional string contentrating = 10;
inline bool BidRequest_Content::has_contentrating() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Content::set_has_contentrating() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Content::clear_has_contentrating() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Content::clear_contentrating() {
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_->clear();
  }
  clear_has_contentrating();
}
inline const ::std::string& BidRequest_Content::contentrating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.contentrating)
  return *contentrating_;
}
inline void BidRequest_Content::set_contentrating(const ::std::string& value) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.contentrating)
}
inline void BidRequest_Content::set_contentrating(const char* value) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.contentrating)
}
inline void BidRequest_Content::set_contentrating(const char* value, size_t size) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.contentrating)
}
inline ::std::string* BidRequest_Content::mutable_contentrating() {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.contentrating)
  return contentrating_;
}
inline ::std::string* BidRequest_Content::release_contentrating() {
  clear_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contentrating_;
    contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_contentrating(::std::string* contentrating) {
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentrating_;
  }
  if (contentrating) {
    set_has_contentrating();
    contentrating_ = contentrating;
  } else {
    clear_has_contentrating();
    contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.contentrating)
}

// optional string userrating = 11;
inline bool BidRequest_Content::has_userrating() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Content::set_has_userrating() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Content::clear_has_userrating() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Content::clear_userrating() {
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_->clear();
  }
  clear_has_userrating();
}
inline const ::std::string& BidRequest_Content::userrating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.userrating)
  return *userrating_;
}
inline void BidRequest_Content::set_userrating(const ::std::string& value) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.userrating)
}
inline void BidRequest_Content::set_userrating(const char* value) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.userrating)
}
inline void BidRequest_Content::set_userrating(const char* value, size_t size) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.userrating)
}
inline ::std::string* BidRequest_Content::mutable_userrating() {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.userrating)
  return userrating_;
}
inline ::std::string* BidRequest_Content::release_userrating() {
  clear_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userrating_;
    userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_userrating(::std::string* userrating) {
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrating_;
  }
  if (userrating) {
    set_has_userrating();
    userrating_ = userrating;
  } else {
    clear_has_userrating();
    userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.userrating)
}

// optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
inline bool BidRequest_Content::has_context() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Content::set_has_context() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Content::clear_has_context() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Content::clear_context() {
  context_ = 1;
  clear_has_context();
}
inline ::com::google::openrtb::BidRequest_Content_ContentContext BidRequest_Content::context() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.context)
  return static_cast< ::com::google::openrtb::BidRequest_Content_ContentContext >(context_);
}
inline void BidRequest_Content::set_context(::com::google::openrtb::BidRequest_Content_ContentContext value) {
  assert(::com::google::openrtb::BidRequest_Content_ContentContext_IsValid(value));
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.context)
}

// optional string context_22 = 12;
inline bool BidRequest_Content::has_context_22() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Content::set_has_context_22() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Content::clear_has_context_22() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Content::clear_context_22() {
  if (context_22_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_22_->clear();
  }
  clear_has_context_22();
}
inline const ::std::string& BidRequest_Content::context_22() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.context_22)
  return *context_22_;
}
inline void BidRequest_Content::set_context_22(const ::std::string& value) {
  set_has_context_22();
  if (context_22_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_22_ = new ::std::string;
  }
  context_22_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.context_22)
}
inline void BidRequest_Content::set_context_22(const char* value) {
  set_has_context_22();
  if (context_22_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_22_ = new ::std::string;
  }
  context_22_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.context_22)
}
inline void BidRequest_Content::set_context_22(const char* value, size_t size) {
  set_has_context_22();
  if (context_22_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_22_ = new ::std::string;
  }
  context_22_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.context_22)
}
inline ::std::string* BidRequest_Content::mutable_context_22() {
  set_has_context_22();
  if (context_22_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_22_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.context_22)
  return context_22_;
}
inline ::std::string* BidRequest_Content::release_context_22() {
  clear_has_context_22();
  if (context_22_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = context_22_;
    context_22_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_context_22(::std::string* context_22) {
  if (context_22_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_22_;
  }
  if (context_22) {
    set_has_context_22();
    context_22_ = context_22;
  } else {
    clear_has_context_22();
    context_22_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.context_22)
}

// optional bool livestream = 13;
inline bool BidRequest_Content::has_livestream() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Content::set_has_livestream() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Content::clear_has_livestream() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Content::clear_livestream() {
  livestream_ = false;
  clear_has_livestream();
}
inline bool BidRequest_Content::livestream() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.livestream)
  return livestream_;
}
inline void BidRequest_Content::set_livestream(bool value) {
  set_has_livestream();
  livestream_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.livestream)
}

// optional bool sourcerelationship = 14;
inline bool BidRequest_Content::has_sourcerelationship() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Content::set_has_sourcerelationship() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Content::clear_has_sourcerelationship() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Content::clear_sourcerelationship() {
  sourcerelationship_ = false;
  clear_has_sourcerelationship();
}
inline bool BidRequest_Content::sourcerelationship() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.sourcerelationship)
  return sourcerelationship_;
}
inline void BidRequest_Content::set_sourcerelationship(bool value) {
  set_has_sourcerelationship();
  sourcerelationship_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.sourcerelationship)
}

// optional .com.google.openrtb.BidRequest.Producer producer = 15;
inline bool BidRequest_Content::has_producer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Content::set_has_producer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Content::clear_has_producer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Content::clear_producer() {
  if (producer_ != NULL) producer_->::com::google::openrtb::BidRequest_Producer::Clear();
  clear_has_producer();
}
inline const ::com::google::openrtb::BidRequest_Producer& BidRequest_Content::producer() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.producer)
  return producer_ != NULL ? *producer_ : *default_instance_->producer_;
}
inline ::com::google::openrtb::BidRequest_Producer* BidRequest_Content::mutable_producer() {
  set_has_producer();
  if (producer_ == NULL) producer_ = new ::com::google::openrtb::BidRequest_Producer;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.producer)
  return producer_;
}
inline ::com::google::openrtb::BidRequest_Producer* BidRequest_Content::release_producer() {
  clear_has_producer();
  ::com::google::openrtb::BidRequest_Producer* temp = producer_;
  producer_ = NULL;
  return temp;
}
inline void BidRequest_Content::set_allocated_producer(::com::google::openrtb::BidRequest_Producer* producer) {
  delete producer_;
  producer_ = producer;
  if (producer) {
    set_has_producer();
  } else {
    clear_has_producer();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.producer)
}

// optional int32 len = 16;
inline bool BidRequest_Content::has_len() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_Content::set_has_len() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_Content::clear_has_len() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_Content::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 BidRequest_Content::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.len)
  return len_;
}
inline void BidRequest_Content::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.len)
}

// optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
inline bool BidRequest_Content::has_qagmediarating() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_Content::set_has_qagmediarating() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_Content::clear_has_qagmediarating() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_Content::clear_qagmediarating() {
  qagmediarating_ = 1;
  clear_has_qagmediarating();
}
inline ::com::google::openrtb::BidRequest_Content_QAGMediaRating BidRequest_Content::qagmediarating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.qagmediarating)
  return static_cast< ::com::google::openrtb::BidRequest_Content_QAGMediaRating >(qagmediarating_);
}
inline void BidRequest_Content::set_qagmediarating(::com::google::openrtb::BidRequest_Content_QAGMediaRating value) {
  assert(::com::google::openrtb::BidRequest_Content_QAGMediaRating_IsValid(value));
  set_has_qagmediarating();
  qagmediarating_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.qagmediarating)
}

// optional bool embeddable = 18;
inline bool BidRequest_Content::has_embeddable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_Content::set_has_embeddable() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_Content::clear_has_embeddable() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_Content::clear_embeddable() {
  embeddable_ = false;
  clear_has_embeddable();
}
inline bool BidRequest_Content::embeddable() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.embeddable)
  return embeddable_;
}
inline void BidRequest_Content::set_embeddable(bool value) {
  set_has_embeddable();
  embeddable_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.embeddable)
}

// optional string language = 19;
inline bool BidRequest_Content::has_language() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_Content::set_has_language() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_Content::clear_has_language() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_Content::clear_language() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& BidRequest_Content::language() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.language)
  return *language_;
}
inline void BidRequest_Content::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.language)
}
inline void BidRequest_Content::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.language)
}
inline void BidRequest_Content::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.language)
}
inline ::std::string* BidRequest_Content::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.language)
  return language_;
}
inline ::std::string* BidRequest_Content::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.language)
}

// -------------------------------------------------------------------

// BidRequest_Producer

// optional string id = 1;
inline bool BidRequest_Producer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Producer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Producer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Producer::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Producer::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.id)
  return *id_;
}
inline void BidRequest_Producer::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.id)
}
inline void BidRequest_Producer::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.id)
}
inline void BidRequest_Producer::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.id)
}
inline ::std::string* BidRequest_Producer::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.id)
  return id_;
}
inline ::std::string* BidRequest_Producer::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Producer::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.id)
}

// optional string name = 2;
inline bool BidRequest_Producer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Producer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Producer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Producer::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_Producer::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.name)
  return *name_;
}
inline void BidRequest_Producer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.name)
}
inline void BidRequest_Producer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.name)
}
inline void BidRequest_Producer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.name)
}
inline ::std::string* BidRequest_Producer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.name)
  return name_;
}
inline ::std::string* BidRequest_Producer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Producer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.name)
}

// repeated string cat = 3;
inline int BidRequest_Producer::cat_size() const {
  return cat_.size();
}
inline void BidRequest_Producer::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidRequest_Producer::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.cat)
  return cat_.Get(index);
}
inline ::std::string* BidRequest_Producer::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.cat)
  return cat_.Mutable(index);
}
inline void BidRequest_Producer::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidRequest_Producer::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.cat)
}
inline void BidRequest_Producer::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.cat)
}
inline ::std::string* BidRequest_Producer::add_cat() {
  return cat_.Add();
}
inline void BidRequest_Producer::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Producer.cat)
}
inline void BidRequest_Producer::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Producer.cat)
}
inline void BidRequest_Producer::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Producer.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Producer::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Producer.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Producer::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Producer.cat)
  return &cat_;
}

// optional string domain = 4;
inline bool BidRequest_Producer::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Producer::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Producer::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Producer::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& BidRequest_Producer::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.domain)
  return *domain_;
}
inline void BidRequest_Producer::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.domain)
}
inline void BidRequest_Producer::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.domain)
}
inline void BidRequest_Producer::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.domain)
}
inline ::std::string* BidRequest_Producer::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.domain)
  return domain_;
}
inline ::std::string* BidRequest_Producer::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Producer::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.domain)
}

// -------------------------------------------------------------------

// BidRequest_Device

// optional bool dnt = 1;
inline bool BidRequest_Device::has_dnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device::set_has_dnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device::clear_has_dnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device::clear_dnt() {
  dnt_ = false;
  clear_has_dnt();
}
inline bool BidRequest_Device::dnt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dnt)
  return dnt_;
}
inline void BidRequest_Device::set_dnt(bool value) {
  set_has_dnt();
  dnt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dnt)
}

// optional string ua = 2;
inline bool BidRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& BidRequest_Device::ua() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ua)
  return *ua_;
}
inline void BidRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ua)
}
inline ::std::string* BidRequest_Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ua)
  return ua_;
}
inline ::std::string* BidRequest_Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ua)
}

// optional string ip = 3;
inline bool BidRequest_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest_Device::ip() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ip)
  return *ip_;
}
inline void BidRequest_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ip)
}
inline void BidRequest_Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ip)
}
inline void BidRequest_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ip)
}
inline ::std::string* BidRequest_Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ip)
  return ip_;
}
inline ::std::string* BidRequest_Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ip)
}

// optional .com.google.openrtb.BidRequest.Geo geo = 4;
inline bool BidRequest_Device::has_geo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Device::set_has_geo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Device::clear_geo() {
  if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
  clear_has_geo();
}
inline const ::com::google::openrtb::BidRequest_Geo& BidRequest_Device::geo() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::com::google::openrtb::BidRequest_Geo* BidRequest_Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::com::google::openrtb::BidRequest_Geo;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.geo)
  return geo_;
}
inline ::com::google::openrtb::BidRequest_Geo* BidRequest_Device::release_geo() {
  clear_has_geo();
  ::com::google::openrtb::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void BidRequest_Device::set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.geo)
}

// optional string didsha1 = 5;
inline bool BidRequest_Device::has_didsha1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Device::set_has_didsha1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Device::clear_has_didsha1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Device::clear_didsha1() {
  if (didsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didsha1_->clear();
  }
  clear_has_didsha1();
}
inline const ::std::string& BidRequest_Device::didsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.didsha1)
  return *didsha1_;
}
inline void BidRequest_Device::set_didsha1(const ::std::string& value) {
  set_has_didsha1();
  if (didsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didsha1_ = new ::std::string;
  }
  didsha1_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.didsha1)
}
inline void BidRequest_Device::set_didsha1(const char* value) {
  set_has_didsha1();
  if (didsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didsha1_ = new ::std::string;
  }
  didsha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.didsha1)
}
inline void BidRequest_Device::set_didsha1(const char* value, size_t size) {
  set_has_didsha1();
  if (didsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didsha1_ = new ::std::string;
  }
  didsha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.didsha1)
}
inline ::std::string* BidRequest_Device::mutable_didsha1() {
  set_has_didsha1();
  if (didsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didsha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.didsha1)
  return didsha1_;
}
inline ::std::string* BidRequest_Device::release_didsha1() {
  clear_has_didsha1();
  if (didsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = didsha1_;
    didsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_didsha1(::std::string* didsha1) {
  if (didsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didsha1_;
  }
  if (didsha1) {
    set_has_didsha1();
    didsha1_ = didsha1;
  } else {
    clear_has_didsha1();
    didsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.didsha1)
}

// optional string didmd5 = 6;
inline bool BidRequest_Device::has_didmd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Device::set_has_didmd5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Device::clear_has_didmd5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Device::clear_didmd5() {
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_->clear();
  }
  clear_has_didmd5();
}
inline const ::std::string& BidRequest_Device::didmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.didmd5)
  return *didmd5_;
}
inline void BidRequest_Device::set_didmd5(const ::std::string& value) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.didmd5)
}
inline void BidRequest_Device::set_didmd5(const char* value) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.didmd5)
}
inline void BidRequest_Device::set_didmd5(const char* value, size_t size) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.didmd5)
}
inline ::std::string* BidRequest_Device::mutable_didmd5() {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.didmd5)
  return didmd5_;
}
inline ::std::string* BidRequest_Device::release_didmd5() {
  clear_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = didmd5_;
    didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_didmd5(::std::string* didmd5) {
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didmd5_;
  }
  if (didmd5) {
    set_has_didmd5();
    didmd5_ = didmd5;
  } else {
    clear_has_didmd5();
    didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.didmd5)
}

// optional string dpidsha1 = 7;
inline bool BidRequest_Device::has_dpidsha1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Device::set_has_dpidsha1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Device::clear_has_dpidsha1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Device::clear_dpidsha1() {
  if (dpidsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidsha1_->clear();
  }
  clear_has_dpidsha1();
}
inline const ::std::string& BidRequest_Device::dpidsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dpidsha1)
  return *dpidsha1_;
}
inline void BidRequest_Device::set_dpidsha1(const ::std::string& value) {
  set_has_dpidsha1();
  if (dpidsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidsha1_ = new ::std::string;
  }
  dpidsha1_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dpidsha1)
}
inline void BidRequest_Device::set_dpidsha1(const char* value) {
  set_has_dpidsha1();
  if (dpidsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidsha1_ = new ::std::string;
  }
  dpidsha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.dpidsha1)
}
inline void BidRequest_Device::set_dpidsha1(const char* value, size_t size) {
  set_has_dpidsha1();
  if (dpidsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidsha1_ = new ::std::string;
  }
  dpidsha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.dpidsha1)
}
inline ::std::string* BidRequest_Device::mutable_dpidsha1() {
  set_has_dpidsha1();
  if (dpidsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidsha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.dpidsha1)
  return dpidsha1_;
}
inline ::std::string* BidRequest_Device::release_dpidsha1() {
  clear_has_dpidsha1();
  if (dpidsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dpidsha1_;
    dpidsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_dpidsha1(::std::string* dpidsha1) {
  if (dpidsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpidsha1_;
  }
  if (dpidsha1) {
    set_has_dpidsha1();
    dpidsha1_ = dpidsha1;
  } else {
    clear_has_dpidsha1();
    dpidsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.dpidsha1)
}

// optional string dpidmd5 = 8;
inline bool BidRequest_Device::has_dpidmd5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Device::set_has_dpidmd5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Device::clear_has_dpidmd5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Device::clear_dpidmd5() {
  if (dpidmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidmd5_->clear();
  }
  clear_has_dpidmd5();
}
inline const ::std::string& BidRequest_Device::dpidmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dpidmd5)
  return *dpidmd5_;
}
inline void BidRequest_Device::set_dpidmd5(const ::std::string& value) {
  set_has_dpidmd5();
  if (dpidmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidmd5_ = new ::std::string;
  }
  dpidmd5_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dpidmd5)
}
inline void BidRequest_Device::set_dpidmd5(const char* value) {
  set_has_dpidmd5();
  if (dpidmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidmd5_ = new ::std::string;
  }
  dpidmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.dpidmd5)
}
inline void BidRequest_Device::set_dpidmd5(const char* value, size_t size) {
  set_has_dpidmd5();
  if (dpidmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidmd5_ = new ::std::string;
  }
  dpidmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.dpidmd5)
}
inline ::std::string* BidRequest_Device::mutable_dpidmd5() {
  set_has_dpidmd5();
  if (dpidmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpidmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.dpidmd5)
  return dpidmd5_;
}
inline ::std::string* BidRequest_Device::release_dpidmd5() {
  clear_has_dpidmd5();
  if (dpidmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dpidmd5_;
    dpidmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_dpidmd5(::std::string* dpidmd5) {
  if (dpidmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpidmd5_;
  }
  if (dpidmd5) {
    set_has_dpidmd5();
    dpidmd5_ = dpidmd5;
  } else {
    clear_has_dpidmd5();
    dpidmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.dpidmd5)
}

// optional string ipv6 = 9;
inline bool BidRequest_Device::has_ipv6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Device::set_has_ipv6() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Device::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Device::clear_ipv6() {
  if (ipv6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_->clear();
  }
  clear_has_ipv6();
}
inline const ::std::string& BidRequest_Device::ipv6() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ipv6)
  return *ipv6_;
}
inline void BidRequest_Device::set_ipv6(const ::std::string& value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ipv6)
}
inline void BidRequest_Device::set_ipv6(const char* value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ipv6)
}
inline void BidRequest_Device::set_ipv6(const char* value, size_t size) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ipv6)
}
inline ::std::string* BidRequest_Device::mutable_ipv6() {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ipv6)
  return ipv6_;
}
inline ::std::string* BidRequest_Device::release_ipv6() {
  clear_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_;
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6_;
  }
  if (ipv6) {
    set_has_ipv6();
    ipv6_ = ipv6;
  } else {
    clear_has_ipv6();
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ipv6)
}

// optional string carrier = 10;
inline bool BidRequest_Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Device::clear_carrier() {
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_->clear();
  }
  clear_has_carrier();
}
inline const ::std::string& BidRequest_Device::carrier() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.carrier)
  return *carrier_;
}
inline void BidRequest_Device::set_carrier(const ::std::string& value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.carrier)
}
inline void BidRequest_Device::set_carrier(const char* value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.carrier)
}
inline void BidRequest_Device::set_carrier(const char* value, size_t size) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.carrier)
}
inline ::std::string* BidRequest_Device::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.carrier)
  return carrier_;
}
inline ::std::string* BidRequest_Device::release_carrier() {
  clear_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = carrier_;
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_carrier(::std::string* carrier) {
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (carrier) {
    set_has_carrier();
    carrier_ = carrier;
  } else {
    clear_has_carrier();
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.carrier)
}

// optional string language = 11;
inline bool BidRequest_Device::has_language() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Device::set_has_language() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Device::clear_has_language() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Device::clear_language() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& BidRequest_Device::language() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.language)
  return *language_;
}
inline void BidRequest_Device::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.language)
}
inline void BidRequest_Device::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.language)
}
inline void BidRequest_Device::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.language)
}
inline ::std::string* BidRequest_Device::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.language)
  return language_;
}
inline ::std::string* BidRequest_Device::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.language)
}

// optional string make = 12;
inline bool BidRequest_Device::has_make() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Device::set_has_make() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Device::clear_make() {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_->clear();
  }
  clear_has_make();
}
inline const ::std::string& BidRequest_Device::make() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.make)
  return *make_;
}
inline void BidRequest_Device::set_make(const ::std::string& value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.make)
}
inline void BidRequest_Device::set_make(const char* value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.make)
}
inline void BidRequest_Device::set_make(const char* value, size_t size) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.make)
}
inline ::std::string* BidRequest_Device::mutable_make() {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.make)
  return make_;
}
inline ::std::string* BidRequest_Device::release_make() {
  clear_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = make_;
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_make(::std::string* make) {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (make) {
    set_has_make();
    make_ = make;
  } else {
    clear_has_make();
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.make)
}

// optional string model = 13;
inline bool BidRequest_Device::has_model() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Device::set_has_model() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidRequest_Device::model() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.model)
  return *model_;
}
inline void BidRequest_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.model)
}
inline ::std::string* BidRequest_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.model)
  return model_;
}
inline ::std::string* BidRequest_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.model)
}

// optional string os = 14;
inline bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Device::clear_os() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& BidRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.os)
  return *os_;
}
inline void BidRequest_Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.os)
}
inline void BidRequest_Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.os)
}
inline void BidRequest_Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.os)
}
inline ::std::string* BidRequest_Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.os)
  return os_;
}
inline ::std::string* BidRequest_Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.os)
}

// optional string osv = 15;
inline bool BidRequest_Device::has_osv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Device::set_has_osv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Device::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& BidRequest_Device::osv() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.osv)
  return *osv_;
}
inline void BidRequest_Device::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.osv)
}
inline void BidRequest_Device::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.osv)
}
inline void BidRequest_Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.osv)
}
inline ::std::string* BidRequest_Device::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.osv)
  return osv_;
}
inline ::std::string* BidRequest_Device::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.osv)
}

// optional string hwv = 24;
inline bool BidRequest_Device::has_hwv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Device::set_has_hwv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Device::clear_has_hwv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Device::clear_hwv() {
  if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hwv_->clear();
  }
  clear_has_hwv();
}
inline const ::std::string& BidRequest_Device::hwv() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.hwv)
  return *hwv_;
}
inline void BidRequest_Device::set_hwv(const ::std::string& value) {
  set_has_hwv();
  if (hwv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hwv_ = new ::std::string;
  }
  hwv_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.hwv)
}
inline void BidRequest_Device::set_hwv(const char* value) {
  set_has_hwv();
  if (hwv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hwv_ = new ::std::string;
  }
  hwv_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.hwv)
}
inline void BidRequest_Device::set_hwv(const char* value, size_t size) {
  set_has_hwv();
  if (hwv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hwv_ = new ::std::string;
  }
  hwv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.hwv)
}
inline ::std::string* BidRequest_Device::mutable_hwv() {
  set_has_hwv();
  if (hwv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hwv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.hwv)
  return hwv_;
}
inline ::std::string* BidRequest_Device::release_hwv() {
  clear_has_hwv();
  if (hwv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hwv_;
    hwv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_hwv(::std::string* hwv) {
  if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hwv_;
  }
  if (hwv) {
    set_has_hwv();
    hwv_ = hwv;
  } else {
    clear_has_hwv();
    hwv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.hwv)
}

// optional int32 w = 25;
inline bool BidRequest_Device::has_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_Device::set_has_w() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_Device::clear_has_w() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_Device::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidRequest_Device::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.w)
  return w_;
}
inline void BidRequest_Device::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.w)
}

// optional int32 h = 26;
inline bool BidRequest_Device::has_h() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_Device::set_has_h() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_Device::clear_has_h() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_Device::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidRequest_Device::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.h)
  return h_;
}
inline void BidRequest_Device::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.h)
}

// optional int32 ppi = 27;
inline bool BidRequest_Device::has_ppi() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_Device::set_has_ppi() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_Device::clear_has_ppi() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_Device::clear_ppi() {
  ppi_ = 0;
  clear_has_ppi();
}
inline ::google::protobuf::int32 BidRequest_Device::ppi() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ppi)
  return ppi_;
}
inline void BidRequest_Device::set_ppi(::google::protobuf::int32 value) {
  set_has_ppi();
  ppi_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ppi)
}

// optional double pxratio = 28;
inline bool BidRequest_Device::has_pxratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_Device::set_has_pxratio() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_Device::clear_has_pxratio() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_Device::clear_pxratio() {
  pxratio_ = 0;
  clear_has_pxratio();
}
inline double BidRequest_Device::pxratio() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.pxratio)
  return pxratio_;
}
inline void BidRequest_Device::set_pxratio(double value) {
  set_has_pxratio();
  pxratio_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.pxratio)
}

// optional bool js = 16;
inline bool BidRequest_Device::has_js() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BidRequest_Device::set_has_js() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BidRequest_Device::clear_has_js() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BidRequest_Device::clear_js() {
  js_ = false;
  clear_has_js();
}
inline bool BidRequest_Device::js() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.js)
  return js_;
}
inline void BidRequest_Device::set_js(bool value) {
  set_has_js();
  js_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.js)
}

// optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
inline bool BidRequest_Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BidRequest_Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BidRequest_Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BidRequest_Device::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
inline ::com::google::openrtb::BidRequest_Device_ConnectionType BidRequest_Device::connectiontype() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.connectiontype)
  return static_cast< ::com::google::openrtb::BidRequest_Device_ConnectionType >(connectiontype_);
}
inline void BidRequest_Device::set_connectiontype(::com::google::openrtb::BidRequest_Device_ConnectionType value) {
  assert(::com::google::openrtb::BidRequest_Device_ConnectionType_IsValid(value));
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.connectiontype)
}

// optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
inline bool BidRequest_Device::has_devicetype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BidRequest_Device::set_has_devicetype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BidRequest_Device::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BidRequest_Device::clear_devicetype() {
  devicetype_ = 1;
  clear_has_devicetype();
}
inline ::com::google::openrtb::BidRequest_Device_DeviceType BidRequest_Device::devicetype() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.devicetype)
  return static_cast< ::com::google::openrtb::BidRequest_Device_DeviceType >(devicetype_);
}
inline void BidRequest_Device::set_devicetype(::com::google::openrtb::BidRequest_Device_DeviceType value) {
  assert(::com::google::openrtb::BidRequest_Device_DeviceType_IsValid(value));
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.devicetype)
}

// optional string flashver = 19;
inline bool BidRequest_Device::has_flashver() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BidRequest_Device::set_has_flashver() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BidRequest_Device::clear_has_flashver() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BidRequest_Device::clear_flashver() {
  if (flashver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flashver_->clear();
  }
  clear_has_flashver();
}
inline const ::std::string& BidRequest_Device::flashver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.flashver)
  return *flashver_;
}
inline void BidRequest_Device::set_flashver(const ::std::string& value) {
  set_has_flashver();
  if (flashver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flashver_ = new ::std::string;
  }
  flashver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.flashver)
}
inline void BidRequest_Device::set_flashver(const char* value) {
  set_has_flashver();
  if (flashver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flashver_ = new ::std::string;
  }
  flashver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.flashver)
}
inline void BidRequest_Device::set_flashver(const char* value, size_t size) {
  set_has_flashver();
  if (flashver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flashver_ = new ::std::string;
  }
  flashver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.flashver)
}
inline ::std::string* BidRequest_Device::mutable_flashver() {
  set_has_flashver();
  if (flashver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flashver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.flashver)
  return flashver_;
}
inline ::std::string* BidRequest_Device::release_flashver() {
  clear_has_flashver();
  if (flashver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flashver_;
    flashver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_flashver(::std::string* flashver) {
  if (flashver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flashver_;
  }
  if (flashver) {
    set_has_flashver();
    flashver_ = flashver;
  } else {
    clear_has_flashver();
    flashver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.flashver)
}

// optional string ifa = 20;
inline bool BidRequest_Device::has_ifa() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BidRequest_Device::set_has_ifa() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BidRequest_Device::clear_has_ifa() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BidRequest_Device::clear_ifa() {
  if (ifa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifa_->clear();
  }
  clear_has_ifa();
}
inline const ::std::string& BidRequest_Device::ifa() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ifa)
  return *ifa_;
}
inline void BidRequest_Device::set_ifa(const ::std::string& value) {
  set_has_ifa();
  if (ifa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifa_ = new ::std::string;
  }
  ifa_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ifa)
}
inline void BidRequest_Device::set_ifa(const char* value) {
  set_has_ifa();
  if (ifa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifa_ = new ::std::string;
  }
  ifa_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ifa)
}
inline void BidRequest_Device::set_ifa(const char* value, size_t size) {
  set_has_ifa();
  if (ifa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifa_ = new ::std::string;
  }
  ifa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ifa)
}
inline ::std::string* BidRequest_Device::mutable_ifa() {
  set_has_ifa();
  if (ifa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ifa)
  return ifa_;
}
inline ::std::string* BidRequest_Device::release_ifa() {
  clear_has_ifa();
  if (ifa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ifa_;
    ifa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ifa(::std::string* ifa) {
  if (ifa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ifa_;
  }
  if (ifa) {
    set_has_ifa();
    ifa_ = ifa;
  } else {
    clear_has_ifa();
    ifa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ifa)
}

// optional string macsha1 = 21;
inline bool BidRequest_Device::has_macsha1() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BidRequest_Device::set_has_macsha1() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BidRequest_Device::clear_has_macsha1() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BidRequest_Device::clear_macsha1() {
  if (macsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macsha1_->clear();
  }
  clear_has_macsha1();
}
inline const ::std::string& BidRequest_Device::macsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.macsha1)
  return *macsha1_;
}
inline void BidRequest_Device::set_macsha1(const ::std::string& value) {
  set_has_macsha1();
  if (macsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macsha1_ = new ::std::string;
  }
  macsha1_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.macsha1)
}
inline void BidRequest_Device::set_macsha1(const char* value) {
  set_has_macsha1();
  if (macsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macsha1_ = new ::std::string;
  }
  macsha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.macsha1)
}
inline void BidRequest_Device::set_macsha1(const char* value, size_t size) {
  set_has_macsha1();
  if (macsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macsha1_ = new ::std::string;
  }
  macsha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.macsha1)
}
inline ::std::string* BidRequest_Device::mutable_macsha1() {
  set_has_macsha1();
  if (macsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macsha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.macsha1)
  return macsha1_;
}
inline ::std::string* BidRequest_Device::release_macsha1() {
  clear_has_macsha1();
  if (macsha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = macsha1_;
    macsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_macsha1(::std::string* macsha1) {
  if (macsha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macsha1_;
  }
  if (macsha1) {
    set_has_macsha1();
    macsha1_ = macsha1;
  } else {
    clear_has_macsha1();
    macsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.macsha1)
}

// optional string macmd5 = 22;
inline bool BidRequest_Device::has_macmd5() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BidRequest_Device::set_has_macmd5() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BidRequest_Device::clear_has_macmd5() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BidRequest_Device::clear_macmd5() {
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_->clear();
  }
  clear_has_macmd5();
}
inline const ::std::string& BidRequest_Device::macmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.macmd5)
  return *macmd5_;
}
inline void BidRequest_Device::set_macmd5(const ::std::string& value) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.macmd5)
}
inline void BidRequest_Device::set_macmd5(const char* value) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.macmd5)
}
inline void BidRequest_Device::set_macmd5(const char* value, size_t size) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.macmd5)
}
inline ::std::string* BidRequest_Device::mutable_macmd5() {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.macmd5)
  return macmd5_;
}
inline ::std::string* BidRequest_Device::release_macmd5() {
  clear_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = macmd5_;
    macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_macmd5(::std::string* macmd5) {
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macmd5_;
  }
  if (macmd5) {
    set_has_macmd5();
    macmd5_ = macmd5;
  } else {
    clear_has_macmd5();
    macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.macmd5)
}

// optional bool lmt = 23;
inline bool BidRequest_Device::has_lmt() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BidRequest_Device::set_has_lmt() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BidRequest_Device::clear_has_lmt() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BidRequest_Device::clear_lmt() {
  lmt_ = false;
  clear_has_lmt();
}
inline bool BidRequest_Device::lmt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.lmt)
  return lmt_;
}
inline void BidRequest_Device::set_lmt(bool value) {
  set_has_lmt();
  lmt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.lmt)
}

// -------------------------------------------------------------------

// BidRequest_Geo

// optional double lat = 1;
inline bool BidRequest_Geo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Geo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Geo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Geo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double BidRequest_Geo::lat() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.lat)
  return lat_;
}
inline void BidRequest_Geo::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.lat)
}

// optional double lon = 2;
inline bool BidRequest_Geo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Geo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Geo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Geo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double BidRequest_Geo::lon() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.lon)
  return lon_;
}
inline void BidRequest_Geo::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.lon)
}

// optional string country = 3;
inline bool BidRequest_Geo::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Geo::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Geo::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Geo::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& BidRequest_Geo::country() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.country)
  return *country_;
}
inline void BidRequest_Geo::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.country)
}
inline void BidRequest_Geo::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.country)
}
inline void BidRequest_Geo::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.country)
}
inline ::std::string* BidRequest_Geo::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.country)
  return country_;
}
inline ::std::string* BidRequest_Geo::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.country)
}

// optional string region = 4;
inline bool BidRequest_Geo::has_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Geo::set_has_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Geo::clear_has_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Geo::clear_region() {
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& BidRequest_Geo::region() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.region)
  return *region_;
}
inline void BidRequest_Geo::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.region)
}
inline void BidRequest_Geo::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.region)
}
inline void BidRequest_Geo::set_region(const char* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.region)
}
inline ::std::string* BidRequest_Geo::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.region)
  return region_;
}
inline ::std::string* BidRequest_Geo::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_region(::std::string* region) {
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (region) {
    set_has_region();
    region_ = region;
  } else {
    clear_has_region();
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.region)
}

// optional string regionfips104 = 5;
inline bool BidRequest_Geo::has_regionfips104() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Geo::set_has_regionfips104() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Geo::clear_has_regionfips104() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Geo::clear_regionfips104() {
  if (regionfips104_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfips104_->clear();
  }
  clear_has_regionfips104();
}
inline const ::std::string& BidRequest_Geo::regionfips104() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.regionfips104)
  return *regionfips104_;
}
inline void BidRequest_Geo::set_regionfips104(const ::std::string& value) {
  set_has_regionfips104();
  if (regionfips104_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfips104_ = new ::std::string;
  }
  regionfips104_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.regionfips104)
}
inline void BidRequest_Geo::set_regionfips104(const char* value) {
  set_has_regionfips104();
  if (regionfips104_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfips104_ = new ::std::string;
  }
  regionfips104_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.regionfips104)
}
inline void BidRequest_Geo::set_regionfips104(const char* value, size_t size) {
  set_has_regionfips104();
  if (regionfips104_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfips104_ = new ::std::string;
  }
  regionfips104_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.regionfips104)
}
inline ::std::string* BidRequest_Geo::mutable_regionfips104() {
  set_has_regionfips104();
  if (regionfips104_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfips104_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.regionfips104)
  return regionfips104_;
}
inline ::std::string* BidRequest_Geo::release_regionfips104() {
  clear_has_regionfips104();
  if (regionfips104_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = regionfips104_;
    regionfips104_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_regionfips104(::std::string* regionfips104) {
  if (regionfips104_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regionfips104_;
  }
  if (regionfips104) {
    set_has_regionfips104();
    regionfips104_ = regionfips104;
  } else {
    clear_has_regionfips104();
    regionfips104_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.regionfips104)
}

// optional string metro = 6;
inline bool BidRequest_Geo::has_metro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Geo::set_has_metro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Geo::clear_has_metro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Geo::clear_metro() {
  if (metro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    metro_->clear();
  }
  clear_has_metro();
}
inline const ::std::string& BidRequest_Geo::metro() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.metro)
  return *metro_;
}
inline void BidRequest_Geo::set_metro(const ::std::string& value) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    metro_ = new ::std::string;
  }
  metro_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.metro)
}
inline void BidRequest_Geo::set_metro(const char* value) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    metro_ = new ::std::string;
  }
  metro_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.metro)
}
inline void BidRequest_Geo::set_metro(const char* value, size_t size) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    metro_ = new ::std::string;
  }
  metro_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.metro)
}
inline ::std::string* BidRequest_Geo::mutable_metro() {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    metro_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.metro)
  return metro_;
}
inline ::std::string* BidRequest_Geo::release_metro() {
  clear_has_metro();
  if (metro_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = metro_;
    metro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_metro(::std::string* metro) {
  if (metro_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete metro_;
  }
  if (metro) {
    set_has_metro();
    metro_ = metro;
  } else {
    clear_has_metro();
    metro_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.metro)
}

// optional string city = 7;
inline bool BidRequest_Geo::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Geo::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Geo::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& BidRequest_Geo::city() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.city)
  return *city_;
}
inline void BidRequest_Geo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.city)
}
inline void BidRequest_Geo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.city)
}
inline void BidRequest_Geo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.city)
}
inline ::std::string* BidRequest_Geo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.city)
  return city_;
}
inline ::std::string* BidRequest_Geo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.city)
}

// optional string zip = 8;
inline bool BidRequest_Geo::has_zip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Geo::set_has_zip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Geo::clear_has_zip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Geo::clear_zip() {
  if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zip_->clear();
  }
  clear_has_zip();
}
inline const ::std::string& BidRequest_Geo::zip() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.zip)
  return *zip_;
}
inline void BidRequest_Geo::set_zip(const ::std::string& value) {
  set_has_zip();
  if (zip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zip_ = new ::std::string;
  }
  zip_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.zip)
}
inline void BidRequest_Geo::set_zip(const char* value) {
  set_has_zip();
  if (zip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zip_ = new ::std::string;
  }
  zip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.zip)
}
inline void BidRequest_Geo::set_zip(const char* value, size_t size) {
  set_has_zip();
  if (zip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zip_ = new ::std::string;
  }
  zip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.zip)
}
inline ::std::string* BidRequest_Geo::mutable_zip() {
  set_has_zip();
  if (zip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.zip)
  return zip_;
}
inline ::std::string* BidRequest_Geo::release_zip() {
  clear_has_zip();
  if (zip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = zip_;
    zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_zip(::std::string* zip) {
  if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zip_;
  }
  if (zip) {
    set_has_zip();
    zip_ = zip;
  } else {
    clear_has_zip();
    zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.zip)
}

// optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
inline bool BidRequest_Geo::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Geo::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Geo::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Geo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::google::openrtb::BidRequest_Geo_LocationType BidRequest_Geo::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.type)
  return static_cast< ::com::google::openrtb::BidRequest_Geo_LocationType >(type_);
}
inline void BidRequest_Geo::set_type(::com::google::openrtb::BidRequest_Geo_LocationType value) {
  assert(::com::google::openrtb::BidRequest_Geo_LocationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.type)
}

// optional int32 utcoffset = 10;
inline bool BidRequest_Geo::has_utcoffset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Geo::set_has_utcoffset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Geo::clear_has_utcoffset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Geo::clear_utcoffset() {
  utcoffset_ = 0;
  clear_has_utcoffset();
}
inline ::google::protobuf::int32 BidRequest_Geo::utcoffset() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.utcoffset)
  return utcoffset_;
}
inline void BidRequest_Geo::set_utcoffset(::google::protobuf::int32 value) {
  set_has_utcoffset();
  utcoffset_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.utcoffset)
}

// -------------------------------------------------------------------

// BidRequest_User

// optional string id = 1;
inline bool BidRequest_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_User::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.id)
  return *id_;
}
inline void BidRequest_User::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.id)
}
inline void BidRequest_User::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.id)
}
inline void BidRequest_User::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.id)
}
inline ::std::string* BidRequest_User::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.id)
  return id_;
}
inline ::std::string* BidRequest_User::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.id)
}

// optional string buyeruid = 2;
inline bool BidRequest_User::has_buyeruid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_User::set_has_buyeruid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_User::clear_has_buyeruid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_User::clear_buyeruid() {
  if (buyeruid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyeruid_->clear();
  }
  clear_has_buyeruid();
}
inline const ::std::string& BidRequest_User::buyeruid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.buyeruid)
  return *buyeruid_;
}
inline void BidRequest_User::set_buyeruid(const ::std::string& value) {
  set_has_buyeruid();
  if (buyeruid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyeruid_ = new ::std::string;
  }
  buyeruid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.buyeruid)
}
inline void BidRequest_User::set_buyeruid(const char* value) {
  set_has_buyeruid();
  if (buyeruid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyeruid_ = new ::std::string;
  }
  buyeruid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.buyeruid)
}
inline void BidRequest_User::set_buyeruid(const char* value, size_t size) {
  set_has_buyeruid();
  if (buyeruid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyeruid_ = new ::std::string;
  }
  buyeruid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.buyeruid)
}
inline ::std::string* BidRequest_User::mutable_buyeruid() {
  set_has_buyeruid();
  if (buyeruid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyeruid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.buyeruid)
  return buyeruid_;
}
inline ::std::string* BidRequest_User::release_buyeruid() {
  clear_has_buyeruid();
  if (buyeruid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyeruid_;
    buyeruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_buyeruid(::std::string* buyeruid) {
  if (buyeruid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyeruid_;
  }
  if (buyeruid) {
    set_has_buyeruid();
    buyeruid_ = buyeruid;
  } else {
    clear_has_buyeruid();
    buyeruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.buyeruid)
}

// optional int32 yob = 3;
inline bool BidRequest_User::has_yob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_User::set_has_yob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_User::clear_has_yob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_User::clear_yob() {
  yob_ = 0;
  clear_has_yob();
}
inline ::google::protobuf::int32 BidRequest_User::yob() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.yob)
  return yob_;
}
inline void BidRequest_User::set_yob(::google::protobuf::int32 value) {
  set_has_yob();
  yob_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.yob)
}

// optional string gender = 4;
inline bool BidRequest_User::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_User::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_User::clear_gender() {
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_->clear();
  }
  clear_has_gender();
}
inline const ::std::string& BidRequest_User::gender() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.gender)
  return *gender_;
}
inline void BidRequest_User::set_gender(const ::std::string& value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.gender)
}
inline void BidRequest_User::set_gender(const char* value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.gender)
}
inline void BidRequest_User::set_gender(const char* value, size_t size) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.gender)
}
inline ::std::string* BidRequest_User::mutable_gender() {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.gender)
  return gender_;
}
inline ::std::string* BidRequest_User::release_gender() {
  clear_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gender_;
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_gender(::std::string* gender) {
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gender_;
  }
  if (gender) {
    set_has_gender();
    gender_ = gender;
  } else {
    clear_has_gender();
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.gender)
}

// optional string keywords = 5;
inline bool BidRequest_User::has_keywords() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_User::set_has_keywords() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_User::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_User::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidRequest_User::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.keywords)
  return *keywords_;
}
inline void BidRequest_User::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.keywords)
}
inline void BidRequest_User::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.keywords)
}
inline void BidRequest_User::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.keywords)
}
inline ::std::string* BidRequest_User::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.keywords)
  return keywords_;
}
inline ::std::string* BidRequest_User::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.keywords)
}

// optional string customdata = 6;
inline bool BidRequest_User::has_customdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_User::set_has_customdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_User::clear_has_customdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_User::clear_customdata() {
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_->clear();
  }
  clear_has_customdata();
}
inline const ::std::string& BidRequest_User::customdata() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.customdata)
  return *customdata_;
}
inline void BidRequest_User::set_customdata(const ::std::string& value) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.customdata)
}
inline void BidRequest_User::set_customdata(const char* value) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.customdata)
}
inline void BidRequest_User::set_customdata(const char* value, size_t size) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.customdata)
}
inline ::std::string* BidRequest_User::mutable_customdata() {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.customdata)
  return customdata_;
}
inline ::std::string* BidRequest_User::release_customdata() {
  clear_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdata_;
    customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_customdata(::std::string* customdata) {
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdata_;
  }
  if (customdata) {
    set_has_customdata();
    customdata_ = customdata;
  } else {
    clear_has_customdata();
    customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.customdata)
}

// optional .com.google.openrtb.BidRequest.Geo geo = 7;
inline bool BidRequest_User::has_geo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_User::set_has_geo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_User::clear_has_geo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_User::clear_geo() {
  if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
  clear_has_geo();
}
inline const ::com::google::openrtb::BidRequest_Geo& BidRequest_User::geo() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::com::google::openrtb::BidRequest_Geo* BidRequest_User::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::com::google::openrtb::BidRequest_Geo;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.geo)
  return geo_;
}
inline ::com::google::openrtb::BidRequest_Geo* BidRequest_User::release_geo() {
  clear_has_geo();
  ::com::google::openrtb::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void BidRequest_User::set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.geo)
}

// repeated .com.google.openrtb.BidRequest.Data data = 8;
inline int BidRequest_User::data_size() const {
  return data_.size();
}
inline void BidRequest_User::clear_data() {
  data_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Data& BidRequest_User::data(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.data)
  return data_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Data* BidRequest_User::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.data)
  return data_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Data* BidRequest_User::add_data() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.User.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >&
BidRequest_User::data() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.User.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >*
BidRequest_User::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.User.data)
  return &data_;
}

// -------------------------------------------------------------------

// BidRequest_Data_Segment

// optional string id = 1;
inline bool BidRequest_Data_Segment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Data_Segment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Data_Segment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Data_Segment::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Data_Segment::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.id)
  return *id_;
}
inline void BidRequest_Data_Segment::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.id)
}
inline void BidRequest_Data_Segment::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.id)
}
inline void BidRequest_Data_Segment::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.id)
}
inline ::std::string* BidRequest_Data_Segment::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.id)
  return id_;
}
inline ::std::string* BidRequest_Data_Segment::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Data_Segment::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.id)
}

// optional string name = 2;
inline bool BidRequest_Data_Segment::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Data_Segment::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Data_Segment::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Data_Segment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_Data_Segment::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.name)
  return *name_;
}
inline void BidRequest_Data_Segment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.name)
}
inline void BidRequest_Data_Segment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.name)
}
inline void BidRequest_Data_Segment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.name)
}
inline ::std::string* BidRequest_Data_Segment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.name)
  return name_;
}
inline ::std::string* BidRequest_Data_Segment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Data_Segment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.name)
}

// optional string value = 3;
inline bool BidRequest_Data_Segment::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Data_Segment::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Data_Segment::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Data_Segment::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& BidRequest_Data_Segment::value() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.value)
  return *value_;
}
inline void BidRequest_Data_Segment::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.value)
}
inline void BidRequest_Data_Segment::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.value)
}
inline void BidRequest_Data_Segment::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.value)
}
inline ::std::string* BidRequest_Data_Segment::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.value)
  return value_;
}
inline ::std::string* BidRequest_Data_Segment::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Data_Segment::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.value)
}

// -------------------------------------------------------------------

// BidRequest_Data

// optional string id = 1;
inline bool BidRequest_Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Data::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Data::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.id)
  return *id_;
}
inline void BidRequest_Data::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.id)
}
inline void BidRequest_Data::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.id)
}
inline void BidRequest_Data::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.id)
}
inline ::std::string* BidRequest_Data::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.id)
  return id_;
}
inline ::std::string* BidRequest_Data::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Data::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.id)
}

// optional string name = 2;
inline bool BidRequest_Data::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Data::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_Data::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.name)
  return *name_;
}
inline void BidRequest_Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.name)
}
inline void BidRequest_Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.name)
}
inline void BidRequest_Data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.name)
}
inline ::std::string* BidRequest_Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.name)
  return name_;
}
inline ::std::string* BidRequest_Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.name)
}

// repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
inline int BidRequest_Data::segment_size() const {
  return segment_.size();
}
inline void BidRequest_Data::clear_segment() {
  segment_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Data_Segment& BidRequest_Data::segment(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Data_Segment* BidRequest_Data::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Data_Segment* BidRequest_Data::add_segment() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >&
BidRequest_Data::segment() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Data.segment)
  return segment_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >*
BidRequest_Data::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Data.segment)
  return &segment_;
}

// -------------------------------------------------------------------

// BidRequest_Regs

// optional bool coppa = 1;
inline bool BidRequest_Regs::has_coppa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Regs::set_has_coppa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Regs::clear_has_coppa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Regs::clear_coppa() {
  coppa_ = false;
  clear_has_coppa();
}
inline bool BidRequest_Regs::coppa() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Regs.coppa)
  return coppa_;
}
inline void BidRequest_Regs::set_coppa(bool value) {
  set_has_coppa();
  coppa_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Regs.coppa)
}

// -------------------------------------------------------------------

// BidRequest

// required string id = 1;
inline bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.id)
  return *id_;
}
inline void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.id)
}
inline void BidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.id)
}
inline void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.id)
}
inline ::std::string* BidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.id)
  return id_;
}
inline ::std::string* BidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.id)
}

// repeated .com.google.openrtb.BidRequest.Imp imp = 2;
inline int BidRequest::imp_size() const {
  return imp_.size();
}
inline void BidRequest::clear_imp() {
  imp_.Clear();
}
inline const ::com::google::openrtb::BidRequest_Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.imp)
  return imp_.Get(index);
}
inline ::com::google::openrtb::BidRequest_Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.imp)
  return imp_.Mutable(index);
}
inline ::com::google::openrtb::BidRequest_Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.imp)
  return imp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.imp)
  return imp_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.imp)
  return &imp_;
}

// optional .com.google.openrtb.BidRequest.Site site = 3;
inline bool BidRequest::has_site() const {
  return distributionchannel_oneof_case() == kSite;
}
inline void BidRequest::set_has_site() {
  _oneof_case_[0] = kSite;
}
inline void BidRequest::clear_site() {
  if (has_site()) {
    delete distributionchannel_oneof_.site_;
    clear_has_distributionchannel_oneof();
  }
}
inline const ::com::google::openrtb::BidRequest_Site& BidRequest::site() const {
  return has_site() ? *distributionchannel_oneof_.site_
                      : ::com::google::openrtb::BidRequest_Site::default_instance();
}
inline ::com::google::openrtb::BidRequest_Site* BidRequest::mutable_site() {
  if (!has_site()) {
    clear_distributionchannel_oneof();
    set_has_site();
    distributionchannel_oneof_.site_ = new ::com::google::openrtb::BidRequest_Site;
  }
  return distributionchannel_oneof_.site_;
}
inline ::com::google::openrtb::BidRequest_Site* BidRequest::release_site() {
  if (has_site()) {
    clear_has_distributionchannel_oneof();
    ::com::google::openrtb::BidRequest_Site* temp = distributionchannel_oneof_.site_;
    distributionchannel_oneof_.site_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidRequest::set_allocated_site(::com::google::openrtb::BidRequest_Site* site) {
  clear_distributionchannel_oneof();
  if (site) {
    set_has_site();
    distributionchannel_oneof_.site_ = site;
  }
}

// optional .com.google.openrtb.BidRequest.App app = 4;
inline bool BidRequest::has_app() const {
  return distributionchannel_oneof_case() == kApp;
}
inline void BidRequest::set_has_app() {
  _oneof_case_[0] = kApp;
}
inline void BidRequest::clear_app() {
  if (has_app()) {
    delete distributionchannel_oneof_.app_;
    clear_has_distributionchannel_oneof();
  }
}
inline const ::com::google::openrtb::BidRequest_App& BidRequest::app() const {
  return has_app() ? *distributionchannel_oneof_.app_
                      : ::com::google::openrtb::BidRequest_App::default_instance();
}
inline ::com::google::openrtb::BidRequest_App* BidRequest::mutable_app() {
  if (!has_app()) {
    clear_distributionchannel_oneof();
    set_has_app();
    distributionchannel_oneof_.app_ = new ::com::google::openrtb::BidRequest_App;
  }
  return distributionchannel_oneof_.app_;
}
inline ::com::google::openrtb::BidRequest_App* BidRequest::release_app() {
  if (has_app()) {
    clear_has_distributionchannel_oneof();
    ::com::google::openrtb::BidRequest_App* temp = distributionchannel_oneof_.app_;
    distributionchannel_oneof_.app_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidRequest::set_allocated_app(::com::google::openrtb::BidRequest_App* app) {
  clear_distributionchannel_oneof();
  if (app) {
    set_has_app();
    distributionchannel_oneof_.app_ = app;
  }
}

// optional .com.google.openrtb.BidRequest.Device device = 5;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::com::google::openrtb::BidRequest_Device::Clear();
  clear_has_device();
}
inline const ::com::google::openrtb::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::google::openrtb::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::google::openrtb::BidRequest_Device;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.device)
  return device_;
}
inline ::com::google::openrtb::BidRequest_Device* BidRequest::release_device() {
  clear_has_device();
  ::com::google::openrtb::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::com::google::openrtb::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.device)
}

// optional .com.google.openrtb.BidRequest.Regs regs = 14;
inline bool BidRequest::has_regs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_regs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_regs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_regs() {
  if (regs_ != NULL) regs_->::com::google::openrtb::BidRequest_Regs::Clear();
  clear_has_regs();
}
inline const ::com::google::openrtb::BidRequest_Regs& BidRequest::regs() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.regs)
  return regs_ != NULL ? *regs_ : *default_instance_->regs_;
}
inline ::com::google::openrtb::BidRequest_Regs* BidRequest::mutable_regs() {
  set_has_regs();
  if (regs_ == NULL) regs_ = new ::com::google::openrtb::BidRequest_Regs;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.regs)
  return regs_;
}
inline ::com::google::openrtb::BidRequest_Regs* BidRequest::release_regs() {
  clear_has_regs();
  ::com::google::openrtb::BidRequest_Regs* temp = regs_;
  regs_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_regs(::com::google::openrtb::BidRequest_Regs* regs) {
  delete regs_;
  regs_ = regs;
  if (regs) {
    set_has_regs();
  } else {
    clear_has_regs();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.regs)
}

// optional .com.google.openrtb.BidRequest.User user = 6;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::com::google::openrtb::BidRequest_User::Clear();
  clear_has_user();
}
inline const ::com::google::openrtb::BidRequest_User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::com::google::openrtb::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::com::google::openrtb::BidRequest_User;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.user)
  return user_;
}
inline ::com::google::openrtb::BidRequest_User* BidRequest::release_user() {
  clear_has_user();
  ::com::google::openrtb::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::com::google::openrtb::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.user)
}

// optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
inline bool BidRequest::has_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_at() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_at() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_at() {
  at_ = 2;
  clear_has_at();
}
inline ::com::google::openrtb::BidRequest_AuctionType BidRequest::at() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.at)
  return static_cast< ::com::google::openrtb::BidRequest_AuctionType >(at_);
}
inline void BidRequest::set_at(::com::google::openrtb::BidRequest_AuctionType value) {
  assert(::com::google::openrtb::BidRequest_AuctionType_IsValid(value));
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.at)
}

// optional int32 tmax = 8;
inline bool BidRequest::has_tmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest::set_has_tmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest::clear_has_tmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest::clear_tmax() {
  tmax_ = 0;
  clear_has_tmax();
}
inline ::google::protobuf::int32 BidRequest::tmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.tmax)
  return tmax_;
}
inline void BidRequest::set_tmax(::google::protobuf::int32 value) {
  set_has_tmax();
  tmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.tmax)
}

// repeated string wseat = 9;
inline int BidRequest::wseat_size() const {
  return wseat_.size();
}
inline void BidRequest::clear_wseat() {
  wseat_.Clear();
}
inline const ::std::string& BidRequest::wseat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.wseat)
  return wseat_.Get(index);
}
inline ::std::string* BidRequest::mutable_wseat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.wseat)
  return wseat_.Mutable(index);
}
inline void BidRequest::set_wseat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.wseat)
  wseat_.Mutable(index)->assign(value);
}
inline void BidRequest::set_wseat(int index, const char* value) {
  wseat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.wseat)
}
inline void BidRequest::set_wseat(int index, const char* value, size_t size) {
  wseat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.wseat)
}
inline ::std::string* BidRequest::add_wseat() {
  return wseat_.Add();
}
inline void BidRequest::add_wseat(const ::std::string& value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.wseat)
}
inline void BidRequest::add_wseat(const char* value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.wseat)
}
inline void BidRequest::add_wseat(const char* value, size_t size) {
  wseat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.wseat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::wseat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.wseat)
  return wseat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_wseat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.wseat)
  return &wseat_;
}

// optional bool allimps = 10 [default = false];
inline bool BidRequest::has_allimps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest::set_has_allimps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest::clear_has_allimps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest::clear_allimps() {
  allimps_ = false;
  clear_has_allimps();
}
inline bool BidRequest::allimps() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.allimps)
  return allimps_;
}
inline void BidRequest::set_allimps(bool value) {
  set_has_allimps();
  allimps_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.allimps)
}

// repeated string cur = 11;
inline int BidRequest::cur_size() const {
  return cur_.size();
}
inline void BidRequest::clear_cur() {
  cur_.Clear();
}
inline const ::std::string& BidRequest::cur(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.cur)
  return cur_.Get(index);
}
inline ::std::string* BidRequest::mutable_cur(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.cur)
  return cur_.Mutable(index);
}
inline void BidRequest::set_cur(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.cur)
  cur_.Mutable(index)->assign(value);
}
inline void BidRequest::set_cur(int index, const char* value) {
  cur_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.cur)
}
inline void BidRequest::set_cur(int index, const char* value, size_t size) {
  cur_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.cur)
}
inline ::std::string* BidRequest::add_cur() {
  return cur_.Add();
}
inline void BidRequest::add_cur(const ::std::string& value) {
  cur_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.cur)
}
inline void BidRequest::add_cur(const char* value) {
  cur_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.cur)
}
inline void BidRequest::add_cur(const char* value, size_t size) {
  cur_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.cur)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::cur() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.cur)
  return cur_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_cur() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.cur)
  return &cur_;
}

// repeated string bcat = 12;
inline int BidRequest::bcat_size() const {
  return bcat_.size();
}
inline void BidRequest::clear_bcat() {
  bcat_.Clear();
}
inline const ::std::string& BidRequest::bcat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.bcat)
  return bcat_.Get(index);
}
inline ::std::string* BidRequest::mutable_bcat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.bcat)
  return bcat_.Mutable(index);
}
inline void BidRequest::set_bcat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.bcat)
  bcat_.Mutable(index)->assign(value);
}
inline void BidRequest::set_bcat(int index, const char* value) {
  bcat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.bcat)
}
inline void BidRequest::set_bcat(int index, const char* value, size_t size) {
  bcat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.bcat)
}
inline ::std::string* BidRequest::add_bcat() {
  return bcat_.Add();
}
inline void BidRequest::add_bcat(const ::std::string& value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.bcat)
}
inline void BidRequest::add_bcat(const char* value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.bcat)
}
inline void BidRequest::add_bcat(const char* value, size_t size) {
  bcat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.bcat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::bcat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.bcat)
  return bcat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_bcat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.bcat)
  return &bcat_;
}

// repeated string badv = 13;
inline int BidRequest::badv_size() const {
  return badv_.size();
}
inline void BidRequest::clear_badv() {
  badv_.Clear();
}
inline const ::std::string& BidRequest::badv(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.badv)
  return badv_.Get(index);
}
inline ::std::string* BidRequest::mutable_badv(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.badv)
  return badv_.Mutable(index);
}
inline void BidRequest::set_badv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.badv)
  badv_.Mutable(index)->assign(value);
}
inline void BidRequest::set_badv(int index, const char* value) {
  badv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.badv)
}
inline void BidRequest::set_badv(int index, const char* value, size_t size) {
  badv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.badv)
}
inline ::std::string* BidRequest::add_badv() {
  return badv_.Add();
}
inline void BidRequest::add_badv(const ::std::string& value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.badv)
}
inline void BidRequest::add_badv(const char* value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.badv)
}
inline void BidRequest::add_badv(const char* value, size_t size) {
  badv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.badv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::badv() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.badv)
  return badv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_badv() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.badv)
  return &badv_;
}

// optional bool test = 15 [default = false];
inline bool BidRequest::has_test() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest::set_has_test() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest::clear_has_test() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest::clear_test() {
  test_ = false;
  clear_has_test();
}
inline bool BidRequest::test() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.test)
  return test_;
}
inline void BidRequest::set_test(bool value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.test)
}

inline bool BidRequest::has_distributionchannel_oneof() {
  return distributionchannel_oneof_case() != DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}
inline void BidRequest::clear_has_distributionchannel_oneof() {
  _oneof_case_[0] = DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}
inline BidRequest::DistributionchannelOneofCase BidRequest::distributionchannel_oneof_case() const {
  return BidRequest::DistributionchannelOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid

// required string id = 1;
inline bool BidResponse_SeatBid_Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidResponse_SeatBid_Bid::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.id)
  return *id_;
}
inline void BidResponse_SeatBid_Bid::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.id)
  return id_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}

// required string impid = 2;
inline bool BidResponse_SeatBid_Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_impid() {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_->clear();
  }
  clear_has_impid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::impid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
  return *impid_;
}
inline void BidResponse_SeatBid_Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_impid() {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
  return impid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_impid() {
  clear_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = impid_;
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_impid(::std::string* impid) {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (impid) {
    set_has_impid();
    impid_ = impid;
  } else {
    clear_has_impid();
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}

// required double price = 3;
inline bool BidResponse_SeatBid_Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double BidResponse_SeatBid_Bid::price() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.price)
  return price_;
}
inline void BidResponse_SeatBid_Bid::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.price)
}

// optional string adid = 4;
inline bool BidResponse_SeatBid_Bid::has_adid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_adid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_adid() {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::adid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
  return *adid_;
}
inline void BidResponse_SeatBid_Bid::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
inline void BidResponse_SeatBid_Bid::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
inline void BidResponse_SeatBid_Bid::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
  return adid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}

// optional string nurl = 5;
inline bool BidResponse_SeatBid_Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_nurl() {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_->clear();
  }
  clear_has_nurl();
}
inline const ::std::string& BidResponse_SeatBid_Bid::nurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
  return *nurl_;
}
inline void BidResponse_SeatBid_Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_nurl() {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
  return nurl_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_nurl() {
  clear_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nurl_;
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (nurl) {
    set_has_nurl();
    nurl_ = nurl;
  } else {
    clear_has_nurl();
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}

// optional string adm = 6;
inline bool BidResponse_SeatBid_Bid::has_adm() const {
  return adm_oneof_case() == kAdm;
}
inline void BidResponse_SeatBid_Bid::set_has_adm() {
  _oneof_case_[0] = kAdm;
}
inline void BidResponse_SeatBid_Bid::clear_adm() {
  if (has_adm()) {
    delete adm_oneof_.adm_;
    clear_has_adm_oneof();
  }
}
inline const ::std::string& BidResponse_SeatBid_Bid::adm() const {
  if (has_adm()) {
    return *adm_oneof_.adm_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BidResponse_SeatBid_Bid::set_adm(const ::std::string& value) {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_ = new ::std::string;
  }
  adm_oneof_.adm_->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_adm(const char* value) {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_ = new ::std::string;
  }
  adm_oneof_.adm_->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_adm(const char* value, size_t size) {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_ = new ::std::string;
  }
  adm_oneof_.adm_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adm() {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_ = new ::std::string;
  }
  return adm_oneof_.adm_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_adm() {
  if (has_adm()) {
    clear_has_adm_oneof();
    ::std::string* temp = adm_oneof_.adm_;
    adm_oneof_.adm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_adm(::std::string* adm) {
  clear_adm_oneof();
  if (adm) {
    set_has_adm();
    adm_oneof_.adm_ = adm;
  }
}

// optional .com.google.openrtb.NativeResponse adm_native = 50;
inline bool BidResponse_SeatBid_Bid::has_adm_native() const {
  return adm_oneof_case() == kAdmNative;
}
inline void BidResponse_SeatBid_Bid::set_has_adm_native() {
  _oneof_case_[0] = kAdmNative;
}
inline void BidResponse_SeatBid_Bid::clear_adm_native() {
  if (has_adm_native()) {
    delete adm_oneof_.adm_native_;
    clear_has_adm_oneof();
  }
}
inline const ::com::google::openrtb::NativeResponse& BidResponse_SeatBid_Bid::adm_native() const {
  return has_adm_native() ? *adm_oneof_.adm_native_
                      : ::com::google::openrtb::NativeResponse::default_instance();
}
inline ::com::google::openrtb::NativeResponse* BidResponse_SeatBid_Bid::mutable_adm_native() {
  if (!has_adm_native()) {
    clear_adm_oneof();
    set_has_adm_native();
    adm_oneof_.adm_native_ = new ::com::google::openrtb::NativeResponse;
  }
  return adm_oneof_.adm_native_;
}
inline ::com::google::openrtb::NativeResponse* BidResponse_SeatBid_Bid::release_adm_native() {
  if (has_adm_native()) {
    clear_has_adm_oneof();
    ::com::google::openrtb::NativeResponse* temp = adm_oneof_.adm_native_;
    adm_oneof_.adm_native_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_adm_native(::com::google::openrtb::NativeResponse* adm_native) {
  clear_adm_oneof();
  if (adm_native) {
    set_has_adm_native();
    adm_oneof_.adm_native_ = adm_native;
  }
}

// repeated string adomain = 7;
inline int BidResponse_SeatBid_Bid::adomain_size() const {
  return adomain_.size();
}
inline void BidResponse_SeatBid_Bid::clear_adomain() {
  adomain_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::adomain(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adomain(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  adomain_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value) {
  adomain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value, size_t size) {
  adomain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_adomain() {
  return adomain_.Add();
}
inline void BidResponse_SeatBid_Bid::add_adomain(const ::std::string& value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::add_adomain(const char* value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::add_adomain(const char* value, size_t size) {
  adomain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::adomain() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_adomain() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return &adomain_;
}

// optional string bundle = 14;
inline bool BidResponse_SeatBid_Bid::has_bundle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_bundle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& BidResponse_SeatBid_Bid::bundle() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
  return *bundle_;
}
inline void BidResponse_SeatBid_Bid::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
inline void BidResponse_SeatBid_Bid::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
inline void BidResponse_SeatBid_Bid::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
  return bundle_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}

// optional string iurl = 8;
inline bool BidResponse_SeatBid_Bid::has_iurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_iurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_has_iurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_iurl() {
  if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iurl_->clear();
  }
  clear_has_iurl();
}
inline const ::std::string& BidResponse_SeatBid_Bid::iurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
  return *iurl_;
}
inline void BidResponse_SeatBid_Bid::set_iurl(const ::std::string& value) {
  set_has_iurl();
  if (iurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iurl_ = new ::std::string;
  }
  iurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
inline void BidResponse_SeatBid_Bid::set_iurl(const char* value) {
  set_has_iurl();
  if (iurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iurl_ = new ::std::string;
  }
  iurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
inline void BidResponse_SeatBid_Bid::set_iurl(const char* value, size_t size) {
  set_has_iurl();
  if (iurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iurl_ = new ::std::string;
  }
  iurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_iurl() {
  set_has_iurl();
  if (iurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
  return iurl_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_iurl() {
  clear_has_iurl();
  if (iurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iurl_;
    iurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_iurl(::std::string* iurl) {
  if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iurl_;
  }
  if (iurl) {
    set_has_iurl();
    iurl_ = iurl;
  } else {
    clear_has_iurl();
    iurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}

// optional string cid = 9;
inline bool BidResponse_SeatBid_Bid::has_cid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_cid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_SeatBid_Bid::clear_has_cid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_SeatBid_Bid::clear_cid() {
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::cid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
  return *cid_;
}
inline void BidResponse_SeatBid_Bid::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
inline void BidResponse_SeatBid_Bid::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
inline void BidResponse_SeatBid_Bid::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
  return cid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}

// optional string crid = 10;
inline bool BidResponse_SeatBid_Bid::has_crid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_crid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidResponse_SeatBid_Bid::clear_has_crid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidResponse_SeatBid_Bid::clear_crid() {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_->clear();
  }
  clear_has_crid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::crid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
  return *crid_;
}
inline void BidResponse_SeatBid_Bid::set_crid(const ::std::string& value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
inline void BidResponse_SeatBid_Bid::set_crid(const char* value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
inline void BidResponse_SeatBid_Bid::set_crid(const char* value, size_t size) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_crid() {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
  return crid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_crid() {
  clear_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crid_;
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_crid(::std::string* crid) {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (crid) {
    set_has_crid();
    crid_ = crid;
  } else {
    clear_has_crid();
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}

// repeated string cat = 15;
inline int BidResponse_SeatBid_Bid::cat_size() const {
  return cat_.size();
}
inline void BidResponse_SeatBid_Bid::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_cat() {
  return cat_.Add();
}
inline void BidResponse_SeatBid_Bid::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return &cat_;
}

// repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
inline int BidResponse_SeatBid_Bid::attr_size() const {
  return attr_.size();
}
inline void BidResponse_SeatBid_Bid::clear_attr() {
  attr_.Clear();
}
inline ::com::google::openrtb::CreativeAttribute BidResponse_SeatBid_Bid::attr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(attr_.Get(index));
}
inline void BidResponse_SeatBid_Bid::set_attr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  attr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
}
inline void BidResponse_SeatBid_Bid::add_attr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  attr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
}
inline const ::google::protobuf::RepeatedField<int>&
BidResponse_SeatBid_Bid::attr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return attr_;
}
inline ::google::protobuf::RepeatedField<int>*
BidResponse_SeatBid_Bid::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return &attr_;
}

// optional string dealid = 13;
inline bool BidResponse_SeatBid_Bid::has_dealid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_dealid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidResponse_SeatBid_Bid::clear_has_dealid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidResponse_SeatBid_Bid::clear_dealid() {
  if (dealid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dealid_->clear();
  }
  clear_has_dealid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::dealid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
  return *dealid_;
}
inline void BidResponse_SeatBid_Bid::set_dealid(const ::std::string& value) {
  set_has_dealid();
  if (dealid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dealid_ = new ::std::string;
  }
  dealid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
inline void BidResponse_SeatBid_Bid::set_dealid(const char* value) {
  set_has_dealid();
  if (dealid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dealid_ = new ::std::string;
  }
  dealid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
inline void BidResponse_SeatBid_Bid::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  if (dealid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dealid_ = new ::std::string;
  }
  dealid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_dealid() {
  set_has_dealid();
  if (dealid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dealid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
  return dealid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_dealid() {
  clear_has_dealid();
  if (dealid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dealid_;
    dealid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_dealid(::std::string* dealid) {
  if (dealid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dealid_;
  }
  if (dealid) {
    set_has_dealid();
    dealid_ = dealid;
  } else {
    clear_has_dealid();
    dealid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}

// optional int32 w = 16;
inline bool BidResponse_SeatBid_Bid::has_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidResponse_SeatBid_Bid::clear_has_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidResponse_SeatBid_Bid::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BidResponse_SeatBid_Bid::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.w)
  return w_;
}
inline void BidResponse_SeatBid_Bid::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.w)
}

// optional int32 h = 17;
inline bool BidResponse_SeatBid_Bid::has_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidResponse_SeatBid_Bid::clear_has_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidResponse_SeatBid_Bid::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 BidResponse_SeatBid_Bid::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.h)
  return h_;
}
inline void BidResponse_SeatBid_Bid::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.h)
}

inline bool BidResponse_SeatBid_Bid::has_adm_oneof() {
  return adm_oneof_case() != ADM_ONEOF_NOT_SET;
}
inline void BidResponse_SeatBid_Bid::clear_has_adm_oneof() {
  _oneof_case_[0] = ADM_ONEOF_NOT_SET;
}
inline BidResponse_SeatBid_Bid::AdmOneofCase BidResponse_SeatBid_Bid::adm_oneof_case() const {
  return BidResponse_SeatBid_Bid::AdmOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BidResponse_SeatBid

// repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
inline int BidResponse_SeatBid::bid_size() const {
  return bid_.size();
}
inline void BidResponse_SeatBid::clear_bid() {
  bid_.Clear();
}
inline const ::com::google::openrtb::BidResponse_SeatBid_Bid& BidResponse_SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Get(index);
}
inline ::com::google::openrtb::BidResponse_SeatBid_Bid* BidResponse_SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Mutable(index);
}
inline ::com::google::openrtb::BidResponse_SeatBid_Bid* BidResponse_SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >&
BidResponse_SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >*
BidResponse_SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.bid)
  return &bid_;
}

// optional string seat = 2;
inline bool BidResponse_SeatBid::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid::clear_seat() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_->clear();
  }
  clear_has_seat();
}
inline const ::std::string& BidResponse_SeatBid::seat() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.seat)
  return *seat_;
}
inline void BidResponse_SeatBid::set_seat(const ::std::string& value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.seat)
}
inline void BidResponse_SeatBid::set_seat(const char* value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.seat)
}
inline void BidResponse_SeatBid::set_seat(const char* value, size_t size) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.seat)
}
inline ::std::string* BidResponse_SeatBid::mutable_seat() {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.seat)
  return seat_;
}
inline ::std::string* BidResponse_SeatBid::release_seat() {
  clear_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seat_;
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid::set_allocated_seat(::std::string* seat) {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (seat) {
    set_has_seat();
    seat_ = seat;
  } else {
    clear_has_seat();
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.seat)
}

// optional bool group = 3;
inline bool BidResponse_SeatBid::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid::clear_group() {
  group_ = false;
  clear_has_group();
}
inline bool BidResponse_SeatBid::group() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.group)
  return group_;
}
inline void BidResponse_SeatBid::set_group(bool value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.group)
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
inline bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.id)
  return *id_;
}
inline void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.id)
}
inline void BidResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.id)
}
inline void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.id)
}
inline ::std::string* BidResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.id)
  return id_;
}
inline ::std::string* BidResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.id)
}

// repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
inline int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::com::google::openrtb::BidResponse_SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Get(index);
}
inline ::com::google::openrtb::BidResponse_SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
inline ::com::google::openrtb::BidResponse_SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.seatbid)
  return seatbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.seatbid)
  return &seatbid_;
}

// optional string bidid = 3;
inline bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_bidid() {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_->clear();
  }
  clear_has_bidid();
}
inline const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.bidid)
  return *bidid_;
}
inline void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.bidid)
}
inline ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.bidid)
  return bidid_;
}
inline ::std::string* BidResponse::release_bidid() {
  clear_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidid_;
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (bidid) {
    set_has_bidid();
    bidid_ = bidid;
  } else {
    clear_has_bidid();
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.bidid)
}

// optional string cur = 4;
inline bool BidResponse::has_cur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse::set_has_cur() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse::clear_has_cur() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse::clear_cur() {
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_->clear();
  }
  clear_has_cur();
}
inline const ::std::string& BidResponse::cur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.cur)
  return *cur_;
}
inline void BidResponse::set_cur(const ::std::string& value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.cur)
}
inline void BidResponse::set_cur(const char* value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.cur)
}
inline void BidResponse::set_cur(const char* value, size_t size) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.cur)
}
inline ::std::string* BidResponse::mutable_cur() {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.cur)
  return cur_;
}
inline ::std::string* BidResponse::release_cur() {
  clear_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cur_;
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_cur(::std::string* cur) {
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_;
  }
  if (cur) {
    set_has_cur();
    cur_ = cur;
  } else {
    clear_has_cur();
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.cur)
}

// optional string customdata = 5;
inline bool BidResponse::has_customdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse::set_has_customdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse::clear_has_customdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse::clear_customdata() {
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_->clear();
  }
  clear_has_customdata();
}
inline const ::std::string& BidResponse::customdata() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.customdata)
  return *customdata_;
}
inline void BidResponse::set_customdata(const ::std::string& value) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.customdata)
}
inline void BidResponse::set_customdata(const char* value) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.customdata)
}
inline void BidResponse::set_customdata(const char* value, size_t size) {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  customdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.customdata)
}
inline ::std::string* BidResponse::mutable_customdata() {
  set_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.customdata)
  return customdata_;
}
inline ::std::string* BidResponse::release_customdata() {
  clear_has_customdata();
  if (customdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdata_;
    customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_customdata(::std::string* customdata) {
  if (customdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdata_;
  }
  if (customdata) {
    set_has_customdata();
    customdata_ = customdata;
  } else {
    clear_has_customdata();
    customdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.customdata)
}

// optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
inline bool BidResponse::has_nbr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse::set_has_nbr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse::clear_has_nbr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse::clear_nbr() {
  nbr_ = 0;
  clear_has_nbr();
}
inline ::com::google::openrtb::BidResponse_NoBidReason BidResponse::nbr() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.nbr)
  return static_cast< ::com::google::openrtb::BidResponse_NoBidReason >(nbr_);
}
inline void BidResponse::set_nbr(::com::google::openrtb::BidResponse_NoBidReason value) {
  assert(::com::google::openrtb::BidResponse_NoBidReason_IsValid(value));
  set_has_nbr();
  nbr_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.nbr)
}

// -------------------------------------------------------------------

// NativeRequest_Asset_Title

// required int32 len = 1;
inline bool NativeRequest_Asset_Title::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeRequest_Asset_Title::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeRequest_Asset_Title::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeRequest_Asset_Title::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Title::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Title.len)
  return len_;
}
inline void NativeRequest_Asset_Title::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Title.len)
}

// -------------------------------------------------------------------

// NativeRequest_Asset_Image

// optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
inline bool NativeRequest_Asset_Image::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeRequest_Asset_Image::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeRequest_Asset_Image::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeRequest_Asset_Image::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.type)
  return static_cast< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType >(type_);
}
inline void NativeRequest_Asset_Image::set_type(::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType value) {
  assert(::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.type)
}

// optional int32 w = 2;
inline bool NativeRequest_Asset_Image::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeRequest_Asset_Image::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeRequest_Asset_Image::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeRequest_Asset_Image::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Image::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.w)
  return w_;
}
inline void NativeRequest_Asset_Image::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.w)
}

// optional int32 h = 3;
inline bool NativeRequest_Asset_Image::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NativeRequest_Asset_Image::set_has_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NativeRequest_Asset_Image::clear_has_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NativeRequest_Asset_Image::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Image::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.h)
  return h_;
}
inline void NativeRequest_Asset_Image::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.h)
}

// optional int32 wmin = 4;
inline bool NativeRequest_Asset_Image::has_wmin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NativeRequest_Asset_Image::set_has_wmin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NativeRequest_Asset_Image::clear_has_wmin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NativeRequest_Asset_Image::clear_wmin() {
  wmin_ = 0;
  clear_has_wmin();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Image::wmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.wmin)
  return wmin_;
}
inline void NativeRequest_Asset_Image::set_wmin(::google::protobuf::int32 value) {
  set_has_wmin();
  wmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.wmin)
}

// optional int32 hmin = 5;
inline bool NativeRequest_Asset_Image::has_hmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NativeRequest_Asset_Image::set_has_hmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NativeRequest_Asset_Image::clear_has_hmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NativeRequest_Asset_Image::clear_hmin() {
  hmin_ = 0;
  clear_has_hmin();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Image::hmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.hmin)
  return hmin_;
}
inline void NativeRequest_Asset_Image::set_hmin(::google::protobuf::int32 value) {
  set_has_hmin();
  hmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.hmin)
}

// repeated string mimes = 6;
inline int NativeRequest_Asset_Image::mimes_size() const {
  return mimes_.size();
}
inline void NativeRequest_Asset_Image::clear_mimes() {
  mimes_.Clear();
}
inline const ::std::string& NativeRequest_Asset_Image::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_.Get(index);
}
inline ::std::string* NativeRequest_Asset_Image::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_.Mutable(index);
}
inline void NativeRequest_Asset_Image::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  mimes_.Mutable(index)->assign(value);
}
inline void NativeRequest_Asset_Image::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
inline void NativeRequest_Asset_Image::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
inline ::std::string* NativeRequest_Asset_Image::add_mimes() {
  return mimes_.Add();
}
inline void NativeRequest_Asset_Image::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
inline void NativeRequest_Asset_Image::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
inline void NativeRequest_Asset_Image::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeRequest_Asset_Image::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeRequest_Asset_Image::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// NativeRequest_Asset_Data

// required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
inline bool NativeRequest_Asset_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeRequest_Asset_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeRequest_Asset_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeRequest_Asset_Data::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Data.type)
  return static_cast< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType >(type_);
}
inline void NativeRequest_Asset_Data::set_type(::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType value) {
  assert(::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Data.type)
}

// optional int32 len = 2;
inline bool NativeRequest_Asset_Data::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeRequest_Asset_Data::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeRequest_Asset_Data::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeRequest_Asset_Data::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 NativeRequest_Asset_Data::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Data.len)
  return len_;
}
inline void NativeRequest_Asset_Data::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Data.len)
}

// -------------------------------------------------------------------

// NativeRequest_Asset

// required int32 id = 1;
inline bool NativeRequest_Asset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeRequest_Asset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeRequest_Asset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeRequest_Asset::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NativeRequest_Asset::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.id)
  return id_;
}
inline void NativeRequest_Asset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.id)
}

// optional bool required = 2 [default = false];
inline bool NativeRequest_Asset::has_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeRequest_Asset::set_has_required() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeRequest_Asset::clear_has_required() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeRequest_Asset::clear_required() {
  required_ = false;
  clear_has_required();
}
inline bool NativeRequest_Asset::required() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.required)
  return required_;
}
inline void NativeRequest_Asset::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.required)
}

// optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
inline bool NativeRequest_Asset::has_title() const {
  return asset_oneof_case() == kTitle;
}
inline void NativeRequest_Asset::set_has_title() {
  _oneof_case_[0] = kTitle;
}
inline void NativeRequest_Asset::clear_title() {
  if (has_title()) {
    delete asset_oneof_.title_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeRequest_Asset_Title& NativeRequest_Asset::title() const {
  return has_title() ? *asset_oneof_.title_
                      : ::com::google::openrtb::NativeRequest_Asset_Title::default_instance();
}
inline ::com::google::openrtb::NativeRequest_Asset_Title* NativeRequest_Asset::mutable_title() {
  if (!has_title()) {
    clear_asset_oneof();
    set_has_title();
    asset_oneof_.title_ = new ::com::google::openrtb::NativeRequest_Asset_Title;
  }
  return asset_oneof_.title_;
}
inline ::com::google::openrtb::NativeRequest_Asset_Title* NativeRequest_Asset::release_title() {
  if (has_title()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Title* temp = asset_oneof_.title_;
    asset_oneof_.title_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeRequest_Asset::set_allocated_title(::com::google::openrtb::NativeRequest_Asset_Title* title) {
  clear_asset_oneof();
  if (title) {
    set_has_title();
    asset_oneof_.title_ = title;
  }
}

// optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
inline bool NativeRequest_Asset::has_img() const {
  return asset_oneof_case() == kImg;
}
inline void NativeRequest_Asset::set_has_img() {
  _oneof_case_[0] = kImg;
}
inline void NativeRequest_Asset::clear_img() {
  if (has_img()) {
    delete asset_oneof_.img_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeRequest_Asset_Image& NativeRequest_Asset::img() const {
  return has_img() ? *asset_oneof_.img_
                      : ::com::google::openrtb::NativeRequest_Asset_Image::default_instance();
}
inline ::com::google::openrtb::NativeRequest_Asset_Image* NativeRequest_Asset::mutable_img() {
  if (!has_img()) {
    clear_asset_oneof();
    set_has_img();
    asset_oneof_.img_ = new ::com::google::openrtb::NativeRequest_Asset_Image;
  }
  return asset_oneof_.img_;
}
inline ::com::google::openrtb::NativeRequest_Asset_Image* NativeRequest_Asset::release_img() {
  if (has_img()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Image* temp = asset_oneof_.img_;
    asset_oneof_.img_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeRequest_Asset::set_allocated_img(::com::google::openrtb::NativeRequest_Asset_Image* img) {
  clear_asset_oneof();
  if (img) {
    set_has_img();
    asset_oneof_.img_ = img;
  }
}

// optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
inline bool NativeRequest_Asset::has_video() const {
  return asset_oneof_case() == kVideo;
}
inline void NativeRequest_Asset::set_has_video() {
  _oneof_case_[0] = kVideo;
}
inline void NativeRequest_Asset::clear_video() {
  if (has_video()) {
    delete asset_oneof_.video_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::BidRequest_Imp_Video& NativeRequest_Asset::video() const {
  return has_video() ? *asset_oneof_.video_
                      : ::com::google::openrtb::BidRequest_Imp_Video::default_instance();
}
inline ::com::google::openrtb::BidRequest_Imp_Video* NativeRequest_Asset::mutable_video() {
  if (!has_video()) {
    clear_asset_oneof();
    set_has_video();
    asset_oneof_.video_ = new ::com::google::openrtb::BidRequest_Imp_Video;
  }
  return asset_oneof_.video_;
}
inline ::com::google::openrtb::BidRequest_Imp_Video* NativeRequest_Asset::release_video() {
  if (has_video()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::BidRequest_Imp_Video* temp = asset_oneof_.video_;
    asset_oneof_.video_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeRequest_Asset::set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video) {
  clear_asset_oneof();
  if (video) {
    set_has_video();
    asset_oneof_.video_ = video;
  }
}

// optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
inline bool NativeRequest_Asset::has_data() const {
  return asset_oneof_case() == kData;
}
inline void NativeRequest_Asset::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void NativeRequest_Asset::clear_data() {
  if (has_data()) {
    delete asset_oneof_.data_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeRequest_Asset_Data& NativeRequest_Asset::data() const {
  return has_data() ? *asset_oneof_.data_
                      : ::com::google::openrtb::NativeRequest_Asset_Data::default_instance();
}
inline ::com::google::openrtb::NativeRequest_Asset_Data* NativeRequest_Asset::mutable_data() {
  if (!has_data()) {
    clear_asset_oneof();
    set_has_data();
    asset_oneof_.data_ = new ::com::google::openrtb::NativeRequest_Asset_Data;
  }
  return asset_oneof_.data_;
}
inline ::com::google::openrtb::NativeRequest_Asset_Data* NativeRequest_Asset::release_data() {
  if (has_data()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Data* temp = asset_oneof_.data_;
    asset_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeRequest_Asset::set_allocated_data(::com::google::openrtb::NativeRequest_Asset_Data* data) {
  clear_asset_oneof();
  if (data) {
    set_has_data();
    asset_oneof_.data_ = data;
  }
}

inline bool NativeRequest_Asset::has_asset_oneof() {
  return asset_oneof_case() != ASSET_ONEOF_NOT_SET;
}
inline void NativeRequest_Asset::clear_has_asset_oneof() {
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}
inline NativeRequest_Asset::AssetOneofCase NativeRequest_Asset::asset_oneof_case() const {
  return NativeRequest_Asset::AssetOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NativeRequest

// optional string ver = 1;
inline bool NativeRequest::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeRequest::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeRequest::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeRequest::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& NativeRequest::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.ver)
  return *ver_;
}
inline void NativeRequest::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.ver)
}
inline void NativeRequest::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeRequest.ver)
}
inline void NativeRequest::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeRequest.ver)
}
inline ::std::string* NativeRequest::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.ver)
  return ver_;
}
inline ::std::string* NativeRequest::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeRequest::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.ver)
}

// optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
inline bool NativeRequest::has_layout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeRequest::set_has_layout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeRequest::clear_has_layout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeRequest::clear_layout() {
  layout_ = 1;
  clear_has_layout();
}
inline ::com::google::openrtb::NativeRequest_LayoutId NativeRequest::layout() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.layout)
  return static_cast< ::com::google::openrtb::NativeRequest_LayoutId >(layout_);
}
inline void NativeRequest::set_layout(::com::google::openrtb::NativeRequest_LayoutId value) {
  assert(::com::google::openrtb::NativeRequest_LayoutId_IsValid(value));
  set_has_layout();
  layout_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.layout)
}

// optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
inline bool NativeRequest::has_adunit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NativeRequest::set_has_adunit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NativeRequest::clear_has_adunit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NativeRequest::clear_adunit() {
  adunit_ = 1;
  clear_has_adunit();
}
inline ::com::google::openrtb::NativeRequest_AdUnitId NativeRequest::adunit() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.adunit)
  return static_cast< ::com::google::openrtb::NativeRequest_AdUnitId >(adunit_);
}
inline void NativeRequest::set_adunit(::com::google::openrtb::NativeRequest_AdUnitId value) {
  assert(::com::google::openrtb::NativeRequest_AdUnitId_IsValid(value));
  set_has_adunit();
  adunit_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.adunit)
}

// optional int32 plcmtcnt = 4 [default = 1];
inline bool NativeRequest::has_plcmtcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NativeRequest::set_has_plcmtcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NativeRequest::clear_has_plcmtcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NativeRequest::clear_plcmtcnt() {
  plcmtcnt_ = 1;
  clear_has_plcmtcnt();
}
inline ::google::protobuf::int32 NativeRequest::plcmtcnt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.plcmtcnt)
  return plcmtcnt_;
}
inline void NativeRequest::set_plcmtcnt(::google::protobuf::int32 value) {
  set_has_plcmtcnt();
  plcmtcnt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.plcmtcnt)
}

// optional int32 seq = 5 [default = 0];
inline bool NativeRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NativeRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NativeRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NativeRequest::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 NativeRequest::seq() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.seq)
  return seq_;
}
inline void NativeRequest::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.seq)
}

// repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
inline int NativeRequest::assets_size() const {
  return assets_.size();
}
inline void NativeRequest::clear_assets() {
  assets_.Clear();
}
inline const ::com::google::openrtb::NativeRequest_Asset& NativeRequest::assets(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.assets)
  return assets_.Get(index);
}
inline ::com::google::openrtb::NativeRequest_Asset* NativeRequest::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.assets)
  return assets_.Mutable(index);
}
inline ::com::google::openrtb::NativeRequest_Asset* NativeRequest::add_assets() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeRequest.assets)
  return assets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >&
NativeRequest::assets() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeRequest.assets)
  return assets_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >*
NativeRequest::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeRequest.assets)
  return &assets_;
}

// -------------------------------------------------------------------

// NativeResponse_Link

// optional string url = 1;
inline bool NativeResponse_Link::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Link::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Link::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Link::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& NativeResponse_Link::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.url)
  return *url_;
}
inline void NativeResponse_Link::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.url)
}
inline void NativeResponse_Link::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.url)
}
inline void NativeResponse_Link::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.url)
}
inline ::std::string* NativeResponse_Link::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.url)
  return url_;
}
inline ::std::string* NativeResponse_Link::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Link::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Link.url)
}

// repeated string clicktrackers = 2;
inline int NativeResponse_Link::clicktrackers_size() const {
  return clicktrackers_.size();
}
inline void NativeResponse_Link::clear_clicktrackers() {
  clicktrackers_.Clear();
}
inline const ::std::string& NativeResponse_Link::clicktrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_.Get(index);
}
inline ::std::string* NativeResponse_Link::mutable_clicktrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_.Mutable(index);
}
inline void NativeResponse_Link::set_clicktrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.clicktrackers)
  clicktrackers_.Mutable(index)->assign(value);
}
inline void NativeResponse_Link::set_clicktrackers(int index, const char* value) {
  clicktrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
inline void NativeResponse_Link::set_clicktrackers(int index, const char* value, size_t size) {
  clicktrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
inline ::std::string* NativeResponse_Link::add_clicktrackers() {
  return clicktrackers_.Add();
}
inline void NativeResponse_Link::add_clicktrackers(const ::std::string& value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
inline void NativeResponse_Link::add_clicktrackers(const char* value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
inline void NativeResponse_Link::add_clicktrackers(const char* value, size_t size) {
  clicktrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeResponse_Link::clicktrackers() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeResponse_Link::mutable_clicktrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return &clicktrackers_;
}

// optional string fallback = 3;
inline bool NativeResponse_Link::has_fallback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NativeResponse_Link::set_has_fallback() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NativeResponse_Link::clear_has_fallback() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NativeResponse_Link::clear_fallback() {
  if (fallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fallback_->clear();
  }
  clear_has_fallback();
}
inline const ::std::string& NativeResponse_Link::fallback() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.fallback)
  return *fallback_;
}
inline void NativeResponse_Link::set_fallback(const ::std::string& value) {
  set_has_fallback();
  if (fallback_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fallback_ = new ::std::string;
  }
  fallback_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.fallback)
}
inline void NativeResponse_Link::set_fallback(const char* value) {
  set_has_fallback();
  if (fallback_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fallback_ = new ::std::string;
  }
  fallback_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.fallback)
}
inline void NativeResponse_Link::set_fallback(const char* value, size_t size) {
  set_has_fallback();
  if (fallback_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fallback_ = new ::std::string;
  }
  fallback_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.fallback)
}
inline ::std::string* NativeResponse_Link::mutable_fallback() {
  set_has_fallback();
  if (fallback_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fallback_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.fallback)
  return fallback_;
}
inline ::std::string* NativeResponse_Link::release_fallback() {
  clear_has_fallback();
  if (fallback_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fallback_;
    fallback_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Link::set_allocated_fallback(::std::string* fallback) {
  if (fallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fallback_;
  }
  if (fallback) {
    set_has_fallback();
    fallback_ = fallback;
  } else {
    clear_has_fallback();
    fallback_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Link.fallback)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Title

// required string text = 1;
inline bool NativeResponse_Asset_Title::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Asset_Title::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Asset_Title::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Asset_Title::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& NativeResponse_Asset_Title::text() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Title.text)
  return *text_;
}
inline void NativeResponse_Asset_Title::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Title.text)
}
inline void NativeResponse_Asset_Title::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Title.text)
}
inline void NativeResponse_Asset_Title::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Title.text)
}
inline ::std::string* NativeResponse_Asset_Title::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Title.text)
  return text_;
}
inline ::std::string* NativeResponse_Asset_Title::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Asset_Title::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Title.text)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Image

// optional string url = 1;
inline bool NativeResponse_Asset_Image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Asset_Image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Asset_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Asset_Image::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& NativeResponse_Asset_Image::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.url)
  return *url_;
}
inline void NativeResponse_Asset_Image::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.url)
}
inline void NativeResponse_Asset_Image::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Image.url)
}
inline void NativeResponse_Asset_Image::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Image.url)
}
inline ::std::string* NativeResponse_Asset_Image::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Image.url)
  return url_;
}
inline ::std::string* NativeResponse_Asset_Image::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Asset_Image::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Image.url)
}

// optional int32 w = 2;
inline bool NativeResponse_Asset_Image::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeResponse_Asset_Image::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeResponse_Asset_Image::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeResponse_Asset_Image::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 NativeResponse_Asset_Image::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.w)
  return w_;
}
inline void NativeResponse_Asset_Image::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.w)
}

// optional int32 h = 3;
inline bool NativeResponse_Asset_Image::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NativeResponse_Asset_Image::set_has_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NativeResponse_Asset_Image::clear_has_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NativeResponse_Asset_Image::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 NativeResponse_Asset_Image::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.h)
  return h_;
}
inline void NativeResponse_Asset_Image::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.h)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Data

// optional string label = 1;
inline bool NativeResponse_Asset_Data::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Asset_Data::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Asset_Data::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Asset_Data::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& NativeResponse_Asset_Data::label() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Data.label)
  return *label_;
}
inline void NativeResponse_Asset_Data::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Data.label)
}
inline void NativeResponse_Asset_Data::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Data.label)
}
inline void NativeResponse_Asset_Data::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Data.label)
}
inline ::std::string* NativeResponse_Asset_Data::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Data.label)
  return label_;
}
inline ::std::string* NativeResponse_Asset_Data::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Asset_Data::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Data.label)
}

// required string value = 2;
inline bool NativeResponse_Asset_Data::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeResponse_Asset_Data::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeResponse_Asset_Data::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeResponse_Asset_Data::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& NativeResponse_Asset_Data::value() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Data.value)
  return *value_;
}
inline void NativeResponse_Asset_Data::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Data.value)
}
inline void NativeResponse_Asset_Data::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Data.value)
}
inline void NativeResponse_Asset_Data::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Data.value)
}
inline ::std::string* NativeResponse_Asset_Data::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Data.value)
  return value_;
}
inline ::std::string* NativeResponse_Asset_Data::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Asset_Data::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Data.value)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Video

// optional string vasttag = 1;
inline bool NativeResponse_Asset_Video::has_vasttag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Asset_Video::set_has_vasttag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Asset_Video::clear_has_vasttag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Asset_Video::clear_vasttag() {
  if (vasttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vasttag_->clear();
  }
  clear_has_vasttag();
}
inline const ::std::string& NativeResponse_Asset_Video::vasttag() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return *vasttag_;
}
inline void NativeResponse_Asset_Video::set_vasttag(const ::std::string& value) {
  set_has_vasttag();
  if (vasttag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vasttag_ = new ::std::string;
  }
  vasttag_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
inline void NativeResponse_Asset_Video::set_vasttag(const char* value) {
  set_has_vasttag();
  if (vasttag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vasttag_ = new ::std::string;
  }
  vasttag_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
inline void NativeResponse_Asset_Video::set_vasttag(const char* value, size_t size) {
  set_has_vasttag();
  if (vasttag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vasttag_ = new ::std::string;
  }
  vasttag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
inline ::std::string* NativeResponse_Asset_Video::mutable_vasttag() {
  set_has_vasttag();
  if (vasttag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vasttag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return vasttag_;
}
inline ::std::string* NativeResponse_Asset_Video::release_vasttag() {
  clear_has_vasttag();
  if (vasttag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vasttag_;
    vasttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse_Asset_Video::set_allocated_vasttag(::std::string* vasttag) {
  if (vasttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vasttag_;
  }
  if (vasttag) {
    set_has_vasttag();
    vasttag_ = vasttag;
  } else {
    clear_has_vasttag();
    vasttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}

// -------------------------------------------------------------------

// NativeResponse_Asset

// required int32 id = 1;
inline bool NativeResponse_Asset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse_Asset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse_Asset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse_Asset::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NativeResponse_Asset::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.id)
  return id_;
}
inline void NativeResponse_Asset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.id)
}

// optional bool required = 2 [default = false];
inline bool NativeResponse_Asset::has_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeResponse_Asset::set_has_required() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NativeResponse_Asset::clear_has_required() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NativeResponse_Asset::clear_required() {
  required_ = false;
  clear_has_required();
}
inline bool NativeResponse_Asset::required() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.required)
  return required_;
}
inline void NativeResponse_Asset::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.required)
}

// optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
inline bool NativeResponse_Asset::has_title() const {
  return asset_oneof_case() == kTitle;
}
inline void NativeResponse_Asset::set_has_title() {
  _oneof_case_[0] = kTitle;
}
inline void NativeResponse_Asset::clear_title() {
  if (has_title()) {
    delete asset_oneof_.title_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeResponse_Asset_Title& NativeResponse_Asset::title() const {
  return has_title() ? *asset_oneof_.title_
                      : ::com::google::openrtb::NativeResponse_Asset_Title::default_instance();
}
inline ::com::google::openrtb::NativeResponse_Asset_Title* NativeResponse_Asset::mutable_title() {
  if (!has_title()) {
    clear_asset_oneof();
    set_has_title();
    asset_oneof_.title_ = new ::com::google::openrtb::NativeResponse_Asset_Title;
  }
  return asset_oneof_.title_;
}
inline ::com::google::openrtb::NativeResponse_Asset_Title* NativeResponse_Asset::release_title() {
  if (has_title()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Title* temp = asset_oneof_.title_;
    asset_oneof_.title_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeResponse_Asset::set_allocated_title(::com::google::openrtb::NativeResponse_Asset_Title* title) {
  clear_asset_oneof();
  if (title) {
    set_has_title();
    asset_oneof_.title_ = title;
  }
}

// optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
inline bool NativeResponse_Asset::has_img() const {
  return asset_oneof_case() == kImg;
}
inline void NativeResponse_Asset::set_has_img() {
  _oneof_case_[0] = kImg;
}
inline void NativeResponse_Asset::clear_img() {
  if (has_img()) {
    delete asset_oneof_.img_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeResponse_Asset_Image& NativeResponse_Asset::img() const {
  return has_img() ? *asset_oneof_.img_
                      : ::com::google::openrtb::NativeResponse_Asset_Image::default_instance();
}
inline ::com::google::openrtb::NativeResponse_Asset_Image* NativeResponse_Asset::mutable_img() {
  if (!has_img()) {
    clear_asset_oneof();
    set_has_img();
    asset_oneof_.img_ = new ::com::google::openrtb::NativeResponse_Asset_Image;
  }
  return asset_oneof_.img_;
}
inline ::com::google::openrtb::NativeResponse_Asset_Image* NativeResponse_Asset::release_img() {
  if (has_img()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Image* temp = asset_oneof_.img_;
    asset_oneof_.img_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeResponse_Asset::set_allocated_img(::com::google::openrtb::NativeResponse_Asset_Image* img) {
  clear_asset_oneof();
  if (img) {
    set_has_img();
    asset_oneof_.img_ = img;
  }
}

// optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
inline bool NativeResponse_Asset::has_video() const {
  return asset_oneof_case() == kVideo;
}
inline void NativeResponse_Asset::set_has_video() {
  _oneof_case_[0] = kVideo;
}
inline void NativeResponse_Asset::clear_video() {
  if (has_video()) {
    delete asset_oneof_.video_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeResponse_Asset_Video& NativeResponse_Asset::video() const {
  return has_video() ? *asset_oneof_.video_
                      : ::com::google::openrtb::NativeResponse_Asset_Video::default_instance();
}
inline ::com::google::openrtb::NativeResponse_Asset_Video* NativeResponse_Asset::mutable_video() {
  if (!has_video()) {
    clear_asset_oneof();
    set_has_video();
    asset_oneof_.video_ = new ::com::google::openrtb::NativeResponse_Asset_Video;
  }
  return asset_oneof_.video_;
}
inline ::com::google::openrtb::NativeResponse_Asset_Video* NativeResponse_Asset::release_video() {
  if (has_video()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Video* temp = asset_oneof_.video_;
    asset_oneof_.video_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeResponse_Asset::set_allocated_video(::com::google::openrtb::NativeResponse_Asset_Video* video) {
  clear_asset_oneof();
  if (video) {
    set_has_video();
    asset_oneof_.video_ = video;
  }
}

// optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
inline bool NativeResponse_Asset::has_data() const {
  return asset_oneof_case() == kData;
}
inline void NativeResponse_Asset::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void NativeResponse_Asset::clear_data() {
  if (has_data()) {
    delete asset_oneof_.data_;
    clear_has_asset_oneof();
  }
}
inline const ::com::google::openrtb::NativeResponse_Asset_Data& NativeResponse_Asset::data() const {
  return has_data() ? *asset_oneof_.data_
                      : ::com::google::openrtb::NativeResponse_Asset_Data::default_instance();
}
inline ::com::google::openrtb::NativeResponse_Asset_Data* NativeResponse_Asset::mutable_data() {
  if (!has_data()) {
    clear_asset_oneof();
    set_has_data();
    asset_oneof_.data_ = new ::com::google::openrtb::NativeResponse_Asset_Data;
  }
  return asset_oneof_.data_;
}
inline ::com::google::openrtb::NativeResponse_Asset_Data* NativeResponse_Asset::release_data() {
  if (has_data()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Data* temp = asset_oneof_.data_;
    asset_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NativeResponse_Asset::set_allocated_data(::com::google::openrtb::NativeResponse_Asset_Data* data) {
  clear_asset_oneof();
  if (data) {
    set_has_data();
    asset_oneof_.data_ = data;
  }
}

// optional .com.google.openrtb.NativeResponse.Link link = 7;
inline bool NativeResponse_Asset::has_link() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NativeResponse_Asset::set_has_link() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NativeResponse_Asset::clear_has_link() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NativeResponse_Asset::clear_link() {
  if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
  clear_has_link();
}
inline const ::com::google::openrtb::NativeResponse_Link& NativeResponse_Asset::link() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.link)
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
inline ::com::google::openrtb::NativeResponse_Link* NativeResponse_Asset::mutable_link() {
  set_has_link();
  if (link_ == NULL) link_ = new ::com::google::openrtb::NativeResponse_Link;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.link)
  return link_;
}
inline ::com::google::openrtb::NativeResponse_Link* NativeResponse_Asset::release_link() {
  clear_has_link();
  ::com::google::openrtb::NativeResponse_Link* temp = link_;
  link_ = NULL;
  return temp;
}
inline void NativeResponse_Asset::set_allocated_link(::com::google::openrtb::NativeResponse_Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.link)
}

inline bool NativeResponse_Asset::has_asset_oneof() {
  return asset_oneof_case() != ASSET_ONEOF_NOT_SET;
}
inline void NativeResponse_Asset::clear_has_asset_oneof() {
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}
inline NativeResponse_Asset::AssetOneofCase NativeResponse_Asset::asset_oneof_case() const {
  return NativeResponse_Asset::AssetOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NativeResponse

// optional string ver = 1;
inline bool NativeResponse::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeResponse::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NativeResponse::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NativeResponse::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& NativeResponse::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.ver)
  return *ver_;
}
inline void NativeResponse::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.ver)
}
inline void NativeResponse::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.ver)
}
inline void NativeResponse::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.ver)
}
inline ::std::string* NativeResponse::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.ver)
  return ver_;
}
inline ::std::string* NativeResponse::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.ver)
}

// repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
inline int NativeResponse::assets_size() const {
  return assets_.size();
}
inline void NativeResponse::clear_assets() {
  assets_.Clear();
}
inline const ::com::google::openrtb::NativeResponse_Asset& NativeResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.assets)
  return assets_.Get(index);
}
inline ::com::google::openrtb::NativeResponse_Asset* NativeResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.assets)
  return assets_.Mutable(index);
}
inline ::com::google::openrtb::NativeResponse_Asset* NativeResponse::add_assets() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.assets)
  return assets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >&
NativeResponse::assets() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.assets)
  return assets_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >*
NativeResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.assets)
  return &assets_;
}

// required .com.google.openrtb.NativeResponse.Link link = 3;
inline bool NativeResponse::has_link() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NativeResponse::set_has_link() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NativeResponse::clear_has_link() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NativeResponse::clear_link() {
  if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
  clear_has_link();
}
inline const ::com::google::openrtb::NativeResponse_Link& NativeResponse::link() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.link)
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
inline ::com::google::openrtb::NativeResponse_Link* NativeResponse::mutable_link() {
  set_has_link();
  if (link_ == NULL) link_ = new ::com::google::openrtb::NativeResponse_Link;
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.link)
  return link_;
}
inline ::com::google::openrtb::NativeResponse_Link* NativeResponse::release_link() {
  clear_has_link();
  ::com::google::openrtb::NativeResponse_Link* temp = link_;
  link_ = NULL;
  return temp;
}
inline void NativeResponse::set_allocated_link(::com::google::openrtb::NativeResponse_Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.link)
}

// repeated string imptrackers = 4;
inline int NativeResponse::imptrackers_size() const {
  return imptrackers_.size();
}
inline void NativeResponse::clear_imptrackers() {
  imptrackers_.Clear();
}
inline const ::std::string& NativeResponse::imptrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_.Get(index);
}
inline ::std::string* NativeResponse::mutable_imptrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_.Mutable(index);
}
inline void NativeResponse::set_imptrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.imptrackers)
  imptrackers_.Mutable(index)->assign(value);
}
inline void NativeResponse::set_imptrackers(int index, const char* value) {
  imptrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.imptrackers)
}
inline void NativeResponse::set_imptrackers(int index, const char* value, size_t size) {
  imptrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.imptrackers)
}
inline ::std::string* NativeResponse::add_imptrackers() {
  return imptrackers_.Add();
}
inline void NativeResponse::add_imptrackers(const ::std::string& value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.imptrackers)
}
inline void NativeResponse::add_imptrackers(const char* value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeResponse.imptrackers)
}
inline void NativeResponse::add_imptrackers(const char* value, size_t size) {
  imptrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeResponse.imptrackers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeResponse::imptrackers() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeResponse::mutable_imptrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.imptrackers)
  return &imptrackers_;
}

// optional string jstracker = 5;
inline bool NativeResponse::has_jstracker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NativeResponse::set_has_jstracker() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NativeResponse::clear_has_jstracker() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NativeResponse::clear_jstracker() {
  if (jstracker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jstracker_->clear();
  }
  clear_has_jstracker();
}
inline const ::std::string& NativeResponse::jstracker() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.jstracker)
  return *jstracker_;
}
inline void NativeResponse::set_jstracker(const ::std::string& value) {
  set_has_jstracker();
  if (jstracker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jstracker_ = new ::std::string;
  }
  jstracker_->assign(value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.jstracker)
}
inline void NativeResponse::set_jstracker(const char* value) {
  set_has_jstracker();
  if (jstracker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jstracker_ = new ::std::string;
  }
  jstracker_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.jstracker)
}
inline void NativeResponse::set_jstracker(const char* value, size_t size) {
  set_has_jstracker();
  if (jstracker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jstracker_ = new ::std::string;
  }
  jstracker_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.jstracker)
}
inline ::std::string* NativeResponse::mutable_jstracker() {
  set_has_jstracker();
  if (jstracker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jstracker_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.jstracker)
  return jstracker_;
}
inline ::std::string* NativeResponse::release_jstracker() {
  clear_has_jstracker();
  if (jstracker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jstracker_;
    jstracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NativeResponse::set_allocated_jstracker(::std::string* jstracker) {
  if (jstracker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jstracker_;
  }
  if (jstracker) {
    set_has_jstracker();
    jstracker_ = jstracker;
  } else {
    clear_has_jstracker();
    jstracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.jstracker)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openrtb
}  // namespace google
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType>() {
  return ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection>() {
  return ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_VideoStartDelay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_VideoStartDelay>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_VideoStartDelay_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod>() {
  return ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_AdPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_AdPosition>() {
  return ::com::google::openrtb::BidRequest_Imp_AdPosition_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Imp_APIFramework> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Imp_APIFramework>() {
  return ::com::google::openrtb::BidRequest_Imp_APIFramework_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Content_VideoQuality> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Content_VideoQuality>() {
  return ::com::google::openrtb::BidRequest_Content_VideoQuality_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Content_ContentContext> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Content_ContentContext>() {
  return ::com::google::openrtb::BidRequest_Content_ContentContext_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Content_QAGMediaRating> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Content_QAGMediaRating>() {
  return ::com::google::openrtb::BidRequest_Content_QAGMediaRating_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Device_DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Device_DeviceType>() {
  return ::com::google::openrtb::BidRequest_Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Device_ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Device_ConnectionType>() {
  return ::com::google::openrtb::BidRequest_Device_ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_Geo_LocationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_Geo_LocationType>() {
  return ::com::google::openrtb::BidRequest_Geo_LocationType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_User_Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_User_Gender>() {
  return ::com::google::openrtb::BidRequest_User_Gender_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidRequest_AuctionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidRequest_AuctionType>() {
  return ::com::google::openrtb::BidRequest_AuctionType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::BidResponse_NoBidReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::BidResponse_NoBidReason>() {
  return ::com::google::openrtb::BidResponse_NoBidReason_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType>() {
  return ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType>() {
  return ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::NativeRequest_LayoutId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::NativeRequest_LayoutId>() {
  return ::com::google::openrtb::NativeRequest_LayoutId_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::NativeRequest_AdUnitId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::NativeRequest_AdUnitId>() {
  return ::com::google::openrtb::NativeRequest_AdUnitId_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::ContentCategory> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::ContentCategory>() {
  return ::com::google::openrtb::ContentCategory_descriptor();
}
template <> struct is_proto_enum< ::com::google::openrtb::CreativeAttribute> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::google::openrtb::CreativeAttribute>() {
  return ::com::google::openrtb::CreativeAttribute_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openrtb_2eproto__INCLUDED
